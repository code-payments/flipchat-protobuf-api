// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file chat/v1/flipchat_service.proto (package flipchat.chat.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Auth, ChatId, ClientPong, QueryOptions, ServerPing, UserId } from "../../common/v1/flipchat_pb";
import { IsTyping, Message as Message$1, Pointer } from "../../messaging/v1/model_pb";

/**
 * @generated from message flipchat.chat.v1.StreamChatEventsRequest
 */
export class StreamChatEventsRequest extends Message<StreamChatEventsRequest> {
  /**
   * @generated from oneof flipchat.chat.v1.StreamChatEventsRequest.type
   */
  type: {
    /**
     * @generated from field: flipchat.chat.v1.StreamChatEventsRequest.Params params = 1;
     */
    value: StreamChatEventsRequest_Params;
    case: "params";
  } | {
    /**
     * @generated from field: flipchat.common.v1.ClientPong pong = 2;
     */
    value: ClientPong;
    case: "pong";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamChatEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: StreamChatEventsRequest_Params, oneof: "type" },
    { no: 2, name: "pong", kind: "message", T: ClientPong, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsRequest {
    return new StreamChatEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsRequest {
    return new StreamChatEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsRequest {
    return new StreamChatEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsRequest | PlainMessage<StreamChatEventsRequest> | undefined, b: StreamChatEventsRequest | PlainMessage<StreamChatEventsRequest> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsRequest, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.StreamChatEventsRequest.Params
 */
export class StreamChatEventsRequest_Params extends Message<StreamChatEventsRequest_Params> {
  /**
   * @generated from field: flipchat.common.v1.Auth auth = 1;
   */
  auth?: Auth;

  /**
   * ts contains the time for stream open.
   *
   * It is used primarily as a nonce for auth. Server may reject
   * timestamps that are too far in the future or past.
   *
   * @generated from field: google.protobuf.Timestamp ts = 2;
   */
  ts?: Timestamp;

  constructor(data?: PartialMessage<StreamChatEventsRequest_Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsRequest.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth", kind: "message", T: Auth },
    { no: 2, name: "ts", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsRequest_Params {
    return new StreamChatEventsRequest_Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsRequest_Params {
    return new StreamChatEventsRequest_Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsRequest_Params {
    return new StreamChatEventsRequest_Params().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsRequest_Params | PlainMessage<StreamChatEventsRequest_Params> | undefined, b: StreamChatEventsRequest_Params | PlainMessage<StreamChatEventsRequest_Params> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsRequest_Params, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.StreamChatEventsResponse
 */
export class StreamChatEventsResponse extends Message<StreamChatEventsResponse> {
  /**
   * @generated from oneof flipchat.chat.v1.StreamChatEventsResponse.type
   */
  type: {
    /**
     * @generated from field: flipchat.common.v1.ServerPing ping = 1;
     */
    value: ServerPing;
    case: "ping";
  } | {
    /**
     * @generated from field: flipchat.chat.v1.StreamChatEventsResponse.StreamError error = 2;
     */
    value: StreamChatEventsResponse_StreamError;
    case: "error";
  } | {
    /**
     * @generated from field: flipchat.chat.v1.StreamChatEventsResponse.EventBatch events = 3;
     */
    value: StreamChatEventsResponse_EventBatch;
    case: "events";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamChatEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ping", kind: "message", T: ServerPing, oneof: "type" },
    { no: 2, name: "error", kind: "message", T: StreamChatEventsResponse_StreamError, oneof: "type" },
    { no: 3, name: "events", kind: "message", T: StreamChatEventsResponse_EventBatch, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsResponse {
    return new StreamChatEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsResponse {
    return new StreamChatEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsResponse {
    return new StreamChatEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsResponse | PlainMessage<StreamChatEventsResponse> | undefined, b: StreamChatEventsResponse | PlainMessage<StreamChatEventsResponse> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsResponse, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.StreamChatEventsResponse.StreamError
 */
export class StreamChatEventsResponse_StreamError extends Message<StreamChatEventsResponse_StreamError> {
  /**
   * @generated from field: flipchat.chat.v1.StreamChatEventsResponse.StreamError.Code code = 1;
   */
  code = StreamChatEventsResponse_StreamError_Code.DENIED;

  constructor(data?: PartialMessage<StreamChatEventsResponse_StreamError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsResponse.StreamError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(StreamChatEventsResponse_StreamError_Code) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsResponse_StreamError {
    return new StreamChatEventsResponse_StreamError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_StreamError {
    return new StreamChatEventsResponse_StreamError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_StreamError {
    return new StreamChatEventsResponse_StreamError().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsResponse_StreamError | PlainMessage<StreamChatEventsResponse_StreamError> | undefined, b: StreamChatEventsResponse_StreamError | PlainMessage<StreamChatEventsResponse_StreamError> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsResponse_StreamError, a, b);
  }
}

/**
 * @generated from enum flipchat.chat.v1.StreamChatEventsResponse.StreamError.Code
 */
export enum StreamChatEventsResponse_StreamError_Code {
  /**
   * @generated from enum value: DENIED = 0;
   */
  DENIED = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(StreamChatEventsResponse_StreamError_Code)
proto3.util.setEnumType(StreamChatEventsResponse_StreamError_Code, "flipchat.chat.v1.StreamChatEventsResponse.StreamError.Code", [
  { no: 0, name: "DENIED" },
]);

/**
 * @generated from message flipchat.chat.v1.StreamChatEventsResponse.EventBatch
 */
export class StreamChatEventsResponse_EventBatch extends Message<StreamChatEventsResponse_EventBatch> {
  /**
   * @generated from field: repeated flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate updates = 1;
   */
  updates: StreamChatEventsResponse_ChatUpdate[] = [];

  constructor(data?: PartialMessage<StreamChatEventsResponse_EventBatch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsResponse.EventBatch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: StreamChatEventsResponse_ChatUpdate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsResponse_EventBatch {
    return new StreamChatEventsResponse_EventBatch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_EventBatch {
    return new StreamChatEventsResponse_EventBatch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_EventBatch {
    return new StreamChatEventsResponse_EventBatch().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsResponse_EventBatch | PlainMessage<StreamChatEventsResponse_EventBatch> | undefined, b: StreamChatEventsResponse_EventBatch | PlainMessage<StreamChatEventsResponse_EventBatch> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsResponse_EventBatch, a, b);
  }
}

/**
 * ChatUpdate contains a set of updates for a given chat id.
 *
 * Only the relevant fields will be set on update. On initial
 * stream open, all fields will be set, however.
 *
 * @generated from message flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate
 */
export class StreamChatEventsResponse_ChatUpdate extends Message<StreamChatEventsResponse_ChatUpdate> {
  /**
   * @generated from field: flipchat.common.v1.ChatId chat_id = 1;
   */
  chatId?: ChatId;

  /**
   * metadata contains the latest (full) metadata of the chat.
   *
   * @generated from field: flipchat.chat.v1.Metadata metadata = 2;
   */
  metadata?: Metadata;

  /**
   * MemberUpdate contains an update to the membership set.
   *
   * @generated from field: flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate member_update = 3;
   */
  memberUpdate?: StreamChatEventsResponse_MemberUpdate;

  /**
   * Message contains the last known message of the chat.
   *
   * @generated from field: flipchat.messaging.v1.Message last_message = 4;
   */
  lastMessage?: Message$1;

  /**
   * where 'relevant' means "relevant to UI updates". For example,
   * when a user has read the latest message.
   *
   * @generated from field: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.PointerUpdate pointer = 5;
   */
  pointer?: StreamChatEventsResponse_ChatUpdate_PointerUpdate;

  /**
   * IsTyping indicates whether or not someone is typing in the group.
   *
   * @generated from field: flipchat.messaging.v1.IsTyping is_typing = 6;
   */
  isTyping?: IsTyping;

  constructor(data?: PartialMessage<StreamChatEventsResponse_ChatUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chat_id", kind: "message", T: ChatId },
    { no: 2, name: "metadata", kind: "message", T: Metadata },
    { no: 3, name: "member_update", kind: "message", T: StreamChatEventsResponse_MemberUpdate },
    { no: 4, name: "last_message", kind: "message", T: Message$1 },
    { no: 5, name: "pointer", kind: "message", T: StreamChatEventsResponse_ChatUpdate_PointerUpdate },
    { no: 6, name: "is_typing", kind: "message", T: IsTyping },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsResponse_ChatUpdate {
    return new StreamChatEventsResponse_ChatUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_ChatUpdate {
    return new StreamChatEventsResponse_ChatUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_ChatUpdate {
    return new StreamChatEventsResponse_ChatUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsResponse_ChatUpdate | PlainMessage<StreamChatEventsResponse_ChatUpdate> | undefined, b: StreamChatEventsResponse_ChatUpdate | PlainMessage<StreamChatEventsResponse_ChatUpdate> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsResponse_ChatUpdate, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.PointerUpdate
 */
export class StreamChatEventsResponse_ChatUpdate_PointerUpdate extends Message<StreamChatEventsResponse_ChatUpdate_PointerUpdate> {
  /**
   * @generated from field: flipchat.common.v1.UserId member = 1;
   */
  member?: UserId;

  /**
   * @generated from field: flipchat.messaging.v1.Pointer pointer = 2;
   */
  pointer?: Pointer;

  constructor(data?: PartialMessage<StreamChatEventsResponse_ChatUpdate_PointerUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.PointerUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: UserId },
    { no: 2, name: "pointer", kind: "message", T: Pointer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsResponse_ChatUpdate_PointerUpdate {
    return new StreamChatEventsResponse_ChatUpdate_PointerUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_ChatUpdate_PointerUpdate {
    return new StreamChatEventsResponse_ChatUpdate_PointerUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_ChatUpdate_PointerUpdate {
    return new StreamChatEventsResponse_ChatUpdate_PointerUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsResponse_ChatUpdate_PointerUpdate | PlainMessage<StreamChatEventsResponse_ChatUpdate_PointerUpdate> | undefined, b: StreamChatEventsResponse_ChatUpdate_PointerUpdate | PlainMessage<StreamChatEventsResponse_ChatUpdate_PointerUpdate> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsResponse_ChatUpdate_PointerUpdate, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate
 */
export class StreamChatEventsResponse_MemberUpdate extends Message<StreamChatEventsResponse_MemberUpdate> {
  /**
   * @generated from oneof flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate.kind
   */
  kind: {
    /**
     * @generated from field: flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate.Refresh refresh = 1;
     */
    value: StreamChatEventsResponse_MemberUpdate_Refresh;
    case: "refresh";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamChatEventsResponse_MemberUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "refresh", kind: "message", T: StreamChatEventsResponse_MemberUpdate_Refresh, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsResponse_MemberUpdate {
    return new StreamChatEventsResponse_MemberUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_MemberUpdate {
    return new StreamChatEventsResponse_MemberUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_MemberUpdate {
    return new StreamChatEventsResponse_MemberUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsResponse_MemberUpdate | PlainMessage<StreamChatEventsResponse_MemberUpdate> | undefined, b: StreamChatEventsResponse_MemberUpdate | PlainMessage<StreamChatEventsResponse_MemberUpdate> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsResponse_MemberUpdate, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate.Refresh
 */
export class StreamChatEventsResponse_MemberUpdate_Refresh extends Message<StreamChatEventsResponse_MemberUpdate_Refresh> {
  /**
   * @generated from field: repeated flipchat.chat.v1.Member members = 1;
   */
  members: Member[] = [];

  constructor(data?: PartialMessage<StreamChatEventsResponse_MemberUpdate_Refresh>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate.Refresh";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: Member, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChatEventsResponse_MemberUpdate_Refresh {
    return new StreamChatEventsResponse_MemberUpdate_Refresh().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_MemberUpdate_Refresh {
    return new StreamChatEventsResponse_MemberUpdate_Refresh().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChatEventsResponse_MemberUpdate_Refresh {
    return new StreamChatEventsResponse_MemberUpdate_Refresh().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChatEventsResponse_MemberUpdate_Refresh | PlainMessage<StreamChatEventsResponse_MemberUpdate_Refresh> | undefined, b: StreamChatEventsResponse_MemberUpdate_Refresh | PlainMessage<StreamChatEventsResponse_MemberUpdate_Refresh> | undefined): boolean {
    return proto3.util.equals(StreamChatEventsResponse_MemberUpdate_Refresh, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.GetChatsRequest
 */
export class GetChatsRequest extends Message<GetChatsRequest> {
  /**
   * @generated from field: flipchat.common.v1.QueryOptions query_options = 1;
   */
  queryOptions?: QueryOptions;

  /**
   * @generated from field: flipchat.common.v1.Auth auth = 2;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<GetChatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.GetChatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query_options", kind: "message", T: QueryOptions },
    { no: 2, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChatsRequest {
    return new GetChatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChatsRequest {
    return new GetChatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChatsRequest {
    return new GetChatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChatsRequest | PlainMessage<GetChatsRequest> | undefined, b: GetChatsRequest | PlainMessage<GetChatsRequest> | undefined): boolean {
    return proto3.util.equals(GetChatsRequest, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.GetChatsResponse
 */
export class GetChatsResponse extends Message<GetChatsResponse> {
  /**
   * @generated from field: flipchat.chat.v1.GetChatsResponse.Result result = 1;
   */
  result = GetChatsResponse_Result.OK;

  /**
   * @generated from field: repeated flipchat.chat.v1.Metadata chats = 2;
   */
  chats: Metadata[] = [];

  constructor(data?: PartialMessage<GetChatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.GetChatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(GetChatsResponse_Result) },
    { no: 2, name: "chats", kind: "message", T: Metadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChatsResponse {
    return new GetChatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChatsResponse {
    return new GetChatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChatsResponse {
    return new GetChatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChatsResponse | PlainMessage<GetChatsResponse> | undefined, b: GetChatsResponse | PlainMessage<GetChatsResponse> | undefined): boolean {
    return proto3.util.equals(GetChatsResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.chat.v1.GetChatsResponse.Result
 */
export enum GetChatsResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(GetChatsResponse_Result)
proto3.util.setEnumType(GetChatsResponse_Result, "flipchat.chat.v1.GetChatsResponse.Result", [
  { no: 0, name: "OK" },
]);

/**
 * @generated from message flipchat.chat.v1.GetChatRequest
 */
export class GetChatRequest extends Message<GetChatRequest> {
  /**
   * @generated from oneof flipchat.chat.v1.GetChatRequest.identifier
   */
  identifier: {
    /**
     * @generated from field: flipchat.common.v1.ChatId chat_id = 1;
     */
    value: ChatId;
    case: "chatId";
  } | {
    /**
     * @generated from field: uint64 room_number = 2;
     */
    value: bigint;
    case: "roomNumber";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Auth is an optional field that authenticates the call, which
   * can be used to fill out extra information in the Metadata.
   *
   * @generated from field: flipchat.common.v1.Auth auth = 10;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<GetChatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.GetChatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chat_id", kind: "message", T: ChatId, oneof: "identifier" },
    { no: 2, name: "room_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "identifier" },
    { no: 10, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChatRequest {
    return new GetChatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChatRequest {
    return new GetChatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChatRequest {
    return new GetChatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChatRequest | PlainMessage<GetChatRequest> | undefined, b: GetChatRequest | PlainMessage<GetChatRequest> | undefined): boolean {
    return proto3.util.equals(GetChatRequest, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.GetChatResponse
 */
export class GetChatResponse extends Message<GetChatResponse> {
  /**
   * @generated from field: flipchat.chat.v1.GetChatResponse.Result result = 1;
   */
  result = GetChatResponse_Result.OK;

  /**
   * Metadata is the chat metadata, if result == OK.
   *
   * The contents of the metadata may change whether or not the
   * call was authenticated.
   *
   * @generated from field: flipchat.chat.v1.Metadata metadata = 2;
   */
  metadata?: Metadata;

  /**
   * Members contains the chat members, if result == OK.
   *
   * @generated from field: repeated flipchat.chat.v1.Member members = 3;
   */
  members: Member[] = [];

  constructor(data?: PartialMessage<GetChatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.GetChatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(GetChatResponse_Result) },
    { no: 2, name: "metadata", kind: "message", T: Metadata },
    { no: 3, name: "members", kind: "message", T: Member, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChatResponse {
    return new GetChatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChatResponse {
    return new GetChatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChatResponse {
    return new GetChatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChatResponse | PlainMessage<GetChatResponse> | undefined, b: GetChatResponse | PlainMessage<GetChatResponse> | undefined): boolean {
    return proto3.util.equals(GetChatResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.chat.v1.GetChatResponse.Result
 */
export enum GetChatResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: NOT_FOUND = 1;
   */
  NOT_FOUND = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetChatResponse_Result)
proto3.util.setEnumType(GetChatResponse_Result, "flipchat.chat.v1.GetChatResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "NOT_FOUND" },
]);

/**
 * @generated from message flipchat.chat.v1.StartChatRequest
 */
export class StartChatRequest extends Message<StartChatRequest> {
  /**
   * @generated from oneof flipchat.chat.v1.StartChatRequest.parameters
   */
  parameters: {
    /**
     * @generated from field: flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters two_way_chat = 1;
     */
    value: StartChatRequest_StartTwoWayChatParameters;
    case: "twoWayChat";
  } | {
    /**
     * @generated from field: flipchat.chat.v1.StartChatRequest.StartGroupChatParameters group_chat = 2;
     */
    value: StartChatRequest_StartGroupChatParameters;
    case: "groupChat";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: flipchat.common.v1.Auth auth = 10;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<StartChatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StartChatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "two_way_chat", kind: "message", T: StartChatRequest_StartTwoWayChatParameters, oneof: "parameters" },
    { no: 2, name: "group_chat", kind: "message", T: StartChatRequest_StartGroupChatParameters, oneof: "parameters" },
    { no: 10, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChatRequest {
    return new StartChatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChatRequest {
    return new StartChatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChatRequest {
    return new StartChatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartChatRequest | PlainMessage<StartChatRequest> | undefined, b: StartChatRequest | PlainMessage<StartChatRequest> | undefined): boolean {
    return proto3.util.equals(StartChatRequest, a, b);
  }
}

/**
 * StartTwoWayChatParameters contains the parameters required to start
 * or recover a two way chat between the caller and the specified 'other_user'.
 *
 * The 'other_user' is currently the 'tip_address', normally retrieved from
 * user.Identity.GetTwitterUser(username).
 *
 * @generated from message flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters
 */
export class StartChatRequest_StartTwoWayChatParameters extends Message<StartChatRequest_StartTwoWayChatParameters> {
  /**
   * The account id of the user the caller wishes to chat with.
   *
   * @generated from field: flipchat.common.v1.UserId other_user_id = 1;
   */
  otherUserId?: UserId;

  constructor(data?: PartialMessage<StartChatRequest_StartTwoWayChatParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "other_user_id", kind: "message", T: UserId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChatRequest_StartTwoWayChatParameters {
    return new StartChatRequest_StartTwoWayChatParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChatRequest_StartTwoWayChatParameters {
    return new StartChatRequest_StartTwoWayChatParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChatRequest_StartTwoWayChatParameters {
    return new StartChatRequest_StartTwoWayChatParameters().fromJsonString(jsonString, options);
  }

  static equals(a: StartChatRequest_StartTwoWayChatParameters | PlainMessage<StartChatRequest_StartTwoWayChatParameters> | undefined, b: StartChatRequest_StartTwoWayChatParameters | PlainMessage<StartChatRequest_StartTwoWayChatParameters> | undefined): boolean {
    return proto3.util.equals(StartChatRequest_StartTwoWayChatParameters, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.StartChatRequest.StartGroupChatParameters
 */
export class StartChatRequest_StartGroupChatParameters extends Message<StartChatRequest_StartGroupChatParameters> {
  /**
   * A set of users (not including self) to initially set in the group chat.
   *
   * @generated from field: repeated flipchat.common.v1.UserId users = 1;
   */
  users: UserId[] = [];

  /**
   * Optional title to set for the group.
   *
   * @generated from field: string title = 2;
   */
  title = "";

  constructor(data?: PartialMessage<StartChatRequest_StartGroupChatParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StartChatRequest.StartGroupChatParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: UserId, repeated: true },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChatRequest_StartGroupChatParameters {
    return new StartChatRequest_StartGroupChatParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChatRequest_StartGroupChatParameters {
    return new StartChatRequest_StartGroupChatParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChatRequest_StartGroupChatParameters {
    return new StartChatRequest_StartGroupChatParameters().fromJsonString(jsonString, options);
  }

  static equals(a: StartChatRequest_StartGroupChatParameters | PlainMessage<StartChatRequest_StartGroupChatParameters> | undefined, b: StartChatRequest_StartGroupChatParameters | PlainMessage<StartChatRequest_StartGroupChatParameters> | undefined): boolean {
    return proto3.util.equals(StartChatRequest_StartGroupChatParameters, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.StartChatResponse
 */
export class StartChatResponse extends Message<StartChatResponse> {
  /**
   * @generated from field: flipchat.chat.v1.StartChatResponse.Result result = 1;
   */
  result = StartChatResponse_Result.OK;

  /**
   * The chat to use if the RPC was successful.
   *
   * @generated from field: flipchat.chat.v1.Metadata chat = 2;
   */
  chat?: Metadata;

  constructor(data?: PartialMessage<StartChatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.StartChatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(StartChatResponse_Result) },
    { no: 2, name: "chat", kind: "message", T: Metadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartChatResponse {
    return new StartChatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartChatResponse {
    return new StartChatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartChatResponse {
    return new StartChatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartChatResponse | PlainMessage<StartChatResponse> | undefined, b: StartChatResponse | PlainMessage<StartChatResponse> | undefined): boolean {
    return proto3.util.equals(StartChatResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.chat.v1.StartChatResponse.Result
 */
export enum StartChatResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * DENIED indicates the caller is not allowed to start/join the chat.
   *
   * @generated from enum value: DENIED = 1;
   */
  DENIED = 1,

  /**
   * USER_NOT_FOUND indicates that (one of) the target user's was not found.
   *
   * @generated from enum value: USER_NOT_FOUND = 2;
   */
  USER_NOT_FOUND = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(StartChatResponse_Result)
proto3.util.setEnumType(StartChatResponse_Result, "flipchat.chat.v1.StartChatResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "DENIED" },
  { no: 2, name: "USER_NOT_FOUND" },
]);

/**
 * @generated from message flipchat.chat.v1.JoinChatRequest
 */
export class JoinChatRequest extends Message<JoinChatRequest> {
  /**
   * @generated from oneof flipchat.chat.v1.JoinChatRequest.identifier
   */
  identifier: {
    /**
     * @generated from field: flipchat.common.v1.ChatId chat_id = 1;
     */
    value: ChatId;
    case: "chatId";
  } | {
    /**
     * @generated from field: uint64 room_id = 2;
     */
    value: bigint;
    case: "roomId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: flipchat.common.v1.Auth auth = 10;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<JoinChatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.JoinChatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chat_id", kind: "message", T: ChatId, oneof: "identifier" },
    { no: 2, name: "room_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "identifier" },
    { no: 10, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinChatRequest {
    return new JoinChatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinChatRequest {
    return new JoinChatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinChatRequest {
    return new JoinChatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JoinChatRequest | PlainMessage<JoinChatRequest> | undefined, b: JoinChatRequest | PlainMessage<JoinChatRequest> | undefined): boolean {
    return proto3.util.equals(JoinChatRequest, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.JoinChatResponse
 */
export class JoinChatResponse extends Message<JoinChatResponse> {
  /**
   * @generated from field: flipchat.chat.v1.JoinChatResponse.Result result = 1;
   */
  result = JoinChatResponse_Result.OK;

  /**
   * The chat metadata, if join was successful.
   *
   * @generated from field: flipchat.chat.v1.Metadata metadata = 2;
   */
  metadata?: Metadata;

  /**
   * The members of the chat, if join was successful.
   *
   * @generated from field: repeated flipchat.chat.v1.Member members = 3;
   */
  members: Member[] = [];

  constructor(data?: PartialMessage<JoinChatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.JoinChatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(JoinChatResponse_Result) },
    { no: 2, name: "metadata", kind: "message", T: Metadata },
    { no: 3, name: "members", kind: "message", T: Member, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinChatResponse {
    return new JoinChatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinChatResponse {
    return new JoinChatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinChatResponse {
    return new JoinChatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinChatResponse | PlainMessage<JoinChatResponse> | undefined, b: JoinChatResponse | PlainMessage<JoinChatResponse> | undefined): boolean {
    return proto3.util.equals(JoinChatResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.chat.v1.JoinChatResponse.Result
 */
export enum JoinChatResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: DENIED = 1;
   */
  DENIED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(JoinChatResponse_Result)
proto3.util.setEnumType(JoinChatResponse_Result, "flipchat.chat.v1.JoinChatResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "DENIED" },
]);

/**
 * @generated from message flipchat.chat.v1.JoinChatPaymentMetadata
 */
export class JoinChatPaymentMetadata extends Message<JoinChatPaymentMetadata> {
  /**
   * @generated from field: flipchat.chat.v1.Member member = 1;
   */
  member?: Member;

  /**
   * @generated from oneof flipchat.chat.v1.JoinChatPaymentMetadata.identifier
   */
  identifier: {
    /**
     * @generated from field: flipchat.common.v1.ChatId chat_id = 2;
     */
    value: ChatId;
    case: "chatId";
  } | {
    /**
     * @generated from field: uint64 room_id = 3;
     */
    value: bigint;
    case: "roomId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<JoinChatPaymentMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.JoinChatPaymentMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member", kind: "message", T: Member },
    { no: 2, name: "chat_id", kind: "message", T: ChatId, oneof: "identifier" },
    { no: 3, name: "room_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "identifier" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinChatPaymentMetadata {
    return new JoinChatPaymentMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinChatPaymentMetadata {
    return new JoinChatPaymentMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinChatPaymentMetadata {
    return new JoinChatPaymentMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: JoinChatPaymentMetadata | PlainMessage<JoinChatPaymentMetadata> | undefined, b: JoinChatPaymentMetadata | PlainMessage<JoinChatPaymentMetadata> | undefined): boolean {
    return proto3.util.equals(JoinChatPaymentMetadata, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.LeaveChatRequest
 */
export class LeaveChatRequest extends Message<LeaveChatRequest> {
  /**
   * @generated from field: flipchat.common.v1.ChatId chat_id = 1;
   */
  chatId?: ChatId;

  /**
   * @generated from field: flipchat.common.v1.Auth auth = 2;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<LeaveChatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.LeaveChatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chat_id", kind: "message", T: ChatId },
    { no: 2, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveChatRequest {
    return new LeaveChatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveChatRequest {
    return new LeaveChatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveChatRequest {
    return new LeaveChatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveChatRequest | PlainMessage<LeaveChatRequest> | undefined, b: LeaveChatRequest | PlainMessage<LeaveChatRequest> | undefined): boolean {
    return proto3.util.equals(LeaveChatRequest, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.LeaveChatResponse
 */
export class LeaveChatResponse extends Message<LeaveChatResponse> {
  /**
   * @generated from field: flipchat.chat.v1.LeaveChatResponse.Result result = 1;
   */
  result = LeaveChatResponse_Result.OK;

  constructor(data?: PartialMessage<LeaveChatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.LeaveChatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(LeaveChatResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveChatResponse {
    return new LeaveChatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveChatResponse {
    return new LeaveChatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveChatResponse {
    return new LeaveChatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveChatResponse | PlainMessage<LeaveChatResponse> | undefined, b: LeaveChatResponse | PlainMessage<LeaveChatResponse> | undefined): boolean {
    return proto3.util.equals(LeaveChatResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.chat.v1.LeaveChatResponse.Result
 */
export enum LeaveChatResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(LeaveChatResponse_Result)
proto3.util.setEnumType(LeaveChatResponse_Result, "flipchat.chat.v1.LeaveChatResponse.Result", [
  { no: 0, name: "OK" },
]);

/**
 * @generated from message flipchat.chat.v1.SetMuteStateRequest
 */
export class SetMuteStateRequest extends Message<SetMuteStateRequest> {
  /**
   * @generated from field: flipchat.common.v1.ChatId chat_id = 1;
   */
  chatId?: ChatId;

  /**
   * @generated from field: bool is_muted = 2;
   */
  isMuted = false;

  /**
   * @generated from field: flipchat.common.v1.Auth auth = 3;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<SetMuteStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.SetMuteStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chat_id", kind: "message", T: ChatId },
    { no: 2, name: "is_muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetMuteStateRequest {
    return new SetMuteStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetMuteStateRequest {
    return new SetMuteStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetMuteStateRequest {
    return new SetMuteStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetMuteStateRequest | PlainMessage<SetMuteStateRequest> | undefined, b: SetMuteStateRequest | PlainMessage<SetMuteStateRequest> | undefined): boolean {
    return proto3.util.equals(SetMuteStateRequest, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.SetMuteStateResponse
 */
export class SetMuteStateResponse extends Message<SetMuteStateResponse> {
  /**
   * @generated from field: flipchat.chat.v1.SetMuteStateResponse.Result result = 1;
   */
  result = SetMuteStateResponse_Result.OK;

  constructor(data?: PartialMessage<SetMuteStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.SetMuteStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(SetMuteStateResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetMuteStateResponse {
    return new SetMuteStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetMuteStateResponse {
    return new SetMuteStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetMuteStateResponse {
    return new SetMuteStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetMuteStateResponse | PlainMessage<SetMuteStateResponse> | undefined, b: SetMuteStateResponse | PlainMessage<SetMuteStateResponse> | undefined): boolean {
    return proto3.util.equals(SetMuteStateResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.chat.v1.SetMuteStateResponse.Result
 */
export enum SetMuteStateResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: DENIED = 1;
   */
  DENIED = 1,

  /**
   * @generated from enum value: CANT_MUTE = 2;
   */
  CANT_MUTE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SetMuteStateResponse_Result)
proto3.util.setEnumType(SetMuteStateResponse_Result, "flipchat.chat.v1.SetMuteStateResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "DENIED" },
  { no: 2, name: "CANT_MUTE" },
]);

/**
 * @generated from message flipchat.chat.v1.Metadata
 */
export class Metadata extends Message<Metadata> {
  /**
   * @generated from field: flipchat.common.v1.ChatId chat_id = 1;
   */
  chatId?: ChatId;

  /**
   * The type of chat
   *
   * @generated from field: flipchat.chat.v1.Metadata.ChatType type = 2;
   */
  type = Metadata_ChatType.UNKNOWN;

  /**
   * The chat title, which is _only_ set by server if an explicit title
   * was set. Otherwise, clients should fill in an appropriate chat title.
   *
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * If non-zero, the room number associated with the chat.
   *
   * @generated from field: uint64 room_number = 4;
   */
  roomNumber = protoInt64.zero;

  /**
   * Whether or not the chat is muted (from the perspective of the caller).
   *
   * @generated from field: bool is_muted = 5;
   */
  isMuted = false;

  /**
   * Whether or not the chat is mutable (from the persective of the caller).
   *
   * @generated from field: bool muteable = 6;
   */
  muteable = false;

  /**
   * Number of (estimated) unread message (from the perspective of the caller).
   *
   * @generated from field: uint32 num_unread = 7;
   */
  numUnread = 0;

  /**
   * Owner is the owner/creator of the chat.
   *
   * This is a super priviledge role, in which there can only be one.
   * This role is displayed as a 'host' currently.
   *
   * @generated from field: flipchat.common.v1.UserId owner = 8;
   */
  owner?: UserId;

  constructor(data?: PartialMessage<Metadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.Metadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chat_id", kind: "message", T: ChatId },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(Metadata_ChatType) },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "room_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "is_muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "muteable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "num_unread", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "owner", kind: "message", T: UserId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {
    return new Metadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {
    return new Metadata().fromJsonString(jsonString, options);
  }

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {
    return proto3.util.equals(Metadata, a, b);
  }
}

/**
 * @generated from enum flipchat.chat.v1.Metadata.ChatType
 */
export enum Metadata_ChatType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: TWO_WAY = 1;
   */
  TWO_WAY = 1,

  /**
   * @generated from enum value: GROUP = 2;
   */
  GROUP = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Metadata_ChatType)
proto3.util.setEnumType(Metadata_ChatType, "flipchat.chat.v1.Metadata.ChatType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "TWO_WAY" },
  { no: 2, name: "GROUP" },
]);

/**
 * @generated from message flipchat.chat.v1.Member
 */
export class Member extends Message<Member> {
  /**
   * @generated from field: flipchat.common.v1.UserId user_id = 1;
   */
  userId?: UserId;

  /**
   * The chat member's identity/profile information.
   *
   * It is a light weight version of the users full profile, which
   * can be retrieved from the Profile service.
   *
   * @generated from field: flipchat.chat.v1.MemberIdentity identity = 2;
   */
  identity?: MemberIdentity;

  /**
   * Chat message state for this member.
   *
   * If set, the list may contain DELIVERED and READ pointers. SENT pointers
   * are only shared between the sender and server, to indicate persistence.
   *
   * The server may wish to omit all pointers in various types of group chats
   * or as relief valves.
   *
   * @generated from field: repeated flipchat.messaging.v1.Pointer pointers = 3;
   */
  pointers: Pointer[] = [];

  /**
   * If the member is the caller (where applicable), will be set to true.
   *
   * @generated from field: bool is_self = 4;
   */
  isSelf = false;

  /**
   * NOTE: We may switch to 'roles' in the future.
   *
   * @generated from field: bool is_host = 5;
   */
  isHost = false;

  constructor(data?: PartialMessage<Member>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.Member";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "message", T: UserId },
    { no: 2, name: "identity", kind: "message", T: MemberIdentity },
    { no: 3, name: "pointers", kind: "message", T: Pointer, repeated: true },
    { no: 4, name: "is_self", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "is_host", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Member {
    return new Member().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJsonString(jsonString, options);
  }

  static equals(a: Member | PlainMessage<Member> | undefined, b: Member | PlainMessage<Member> | undefined): boolean {
    return proto3.util.equals(Member, a, b);
  }
}

/**
 * @generated from message flipchat.chat.v1.MemberIdentity
 */
export class MemberIdentity extends Message<MemberIdentity> {
  /**
   * If present, the display name of the user.
   *
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * If present, the URL of the users profile pic.
   *
   * @generated from field: string profile_pic_url = 2;
   */
  profilePicUrl = "";

  constructor(data?: PartialMessage<MemberIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.chat.v1.MemberIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "profile_pic_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MemberIdentity {
    return new MemberIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MemberIdentity {
    return new MemberIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MemberIdentity {
    return new MemberIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: MemberIdentity | PlainMessage<MemberIdentity> | undefined, b: MemberIdentity | PlainMessage<MemberIdentity> | undefined): boolean {
    return proto3.util.equals(MemberIdentity, a, b);
  }
}

