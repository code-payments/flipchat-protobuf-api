// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file iap/v1/iap_service.proto (package flipchat.iap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Auth, Platform } from "../../common/v1/common_pb";

/**
 * @generated from message flipchat.iap.v1.OnPurchaseCompletedRequest
 */
export class OnPurchaseCompletedRequest extends Message<OnPurchaseCompletedRequest> {
  /**
   * @generated from field: flipchat.common.v1.Platform platform = 1;
   */
  platform = Platform.UNKNOWN;

  /**
   * @generated from field: flipchat.iap.v1.Receipt receipt = 2;
   */
  receipt?: Receipt;

  /**
   * @generated from field: flipchat.common.v1.Auth auth = 3;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<OnPurchaseCompletedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.iap.v1.OnPurchaseCompletedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "platform", kind: "enum", T: proto3.getEnumType(Platform) },
    { no: 2, name: "receipt", kind: "message", T: Receipt },
    { no: 3, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnPurchaseCompletedRequest {
    return new OnPurchaseCompletedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnPurchaseCompletedRequest {
    return new OnPurchaseCompletedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnPurchaseCompletedRequest {
    return new OnPurchaseCompletedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OnPurchaseCompletedRequest | PlainMessage<OnPurchaseCompletedRequest> | undefined, b: OnPurchaseCompletedRequest | PlainMessage<OnPurchaseCompletedRequest> | undefined): boolean {
    return proto3.util.equals(OnPurchaseCompletedRequest, a, b);
  }
}

/**
 * @generated from message flipchat.iap.v1.OnPurchaseCompletedResponse
 */
export class OnPurchaseCompletedResponse extends Message<OnPurchaseCompletedResponse> {
  /**
   * @generated from field: flipchat.iap.v1.OnPurchaseCompletedResponse.Result result = 1;
   */
  result = OnPurchaseCompletedResponse_Result.OK;

  constructor(data?: PartialMessage<OnPurchaseCompletedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.iap.v1.OnPurchaseCompletedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(OnPurchaseCompletedResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnPurchaseCompletedResponse {
    return new OnPurchaseCompletedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnPurchaseCompletedResponse {
    return new OnPurchaseCompletedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnPurchaseCompletedResponse {
    return new OnPurchaseCompletedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OnPurchaseCompletedResponse | PlainMessage<OnPurchaseCompletedResponse> | undefined, b: OnPurchaseCompletedResponse | PlainMessage<OnPurchaseCompletedResponse> | undefined): boolean {
    return proto3.util.equals(OnPurchaseCompletedResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.iap.v1.OnPurchaseCompletedResponse.Result
 */
export enum OnPurchaseCompletedResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: DENIED = 1;
   */
  DENIED = 1,

  /**
   * Returned if the receipt is invalid, or not in a completed payment state
   *
   * @generated from enum value: INVALID_RECEIPT = 2;
   */
  INVALID_RECEIPT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(OnPurchaseCompletedResponse_Result)
proto3.util.setEnumType(OnPurchaseCompletedResponse_Result, "flipchat.iap.v1.OnPurchaseCompletedResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "DENIED" },
  { no: 2, name: "INVALID_RECEIPT" },
]);

/**
 * @generated from message flipchat.iap.v1.Receipt
 */
export class Receipt extends Message<Receipt> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Receipt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.iap.v1.Receipt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Receipt {
    return new Receipt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Receipt {
    return new Receipt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Receipt {
    return new Receipt().fromJsonString(jsonString, options);
  }

  static equals(a: Receipt | PlainMessage<Receipt> | undefined, b: Receipt | PlainMessage<Receipt> | undefined): boolean {
    return proto3.util.equals(Receipt, a, b);
  }
}

