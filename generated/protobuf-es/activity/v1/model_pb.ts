// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file activity/v1/model.proto (package flipchat.activity.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ChatId } from "../../common/v1/common_pb";
import { MessageId } from "../../messaging/v1/model_pb";

/**
 * ActivityFeedType enables multiple activity feeds, where notifications may be
 * split across different parts of the app
 *
 * @generated from enum flipchat.activity.v1.ActivityFeedType
 */
export enum ActivityFeedType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: TRANSACTION_HISTORY = 1;
   */
  TRANSACTION_HISTORY = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ActivityFeedType)
proto3.util.setEnumType(ActivityFeedType, "flipchat.activity.v1.ActivityFeedType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "TRANSACTION_HISTORY" },
]);

/**
 * The ID of the notification, which is guaranteed to be consistent for grouped
 * events. Updates to a notification with the same ID should result in re-ordering
 * within the activity feed using the latest content.
 *
 * @generated from message flipchat.activity.v1.NotificationId
 */
export class NotificationId extends Message<NotificationId> {
  /**
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<NotificationId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.activity.v1.NotificationId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationId {
    return new NotificationId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationId {
    return new NotificationId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationId {
    return new NotificationId().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationId | PlainMessage<NotificationId> | undefined, b: NotificationId | PlainMessage<NotificationId> | undefined): boolean {
    return proto3.util.equals(NotificationId, a, b);
  }
}

/**
 * Notification is a message that is displayed in an activity feed
 *
 * @generated from message flipchat.activity.v1.Notification
 */
export class Notification extends Message<Notification> {
  /**
   * The ID of this notification
   *
   * @generated from field: flipchat.activity.v1.NotificationId id = 1;
   */
  id?: NotificationId;

  /**
   * The localized title text for the notification
   *
   * @generated from field: string localized_text = 2;
   */
  localizedText = "";

  /**
   * If relevant, the chat ID associated with this notification
   *
   * @generated from field: flipchat.common.v1.ChatId chat_id = 3;
   */
  chatId?: ChatId;

  /**
   * If relevant, the message ID associated with this notification
   *
   * @generated from field: flipchat.messaging.v1.MessageId message_id = 4;
   */
  messageId?: MessageId;

  /**
   * The timestamp of this notification
   *
   * @generated from field: google.protobuf.Timestamp ts = 10;
   */
  ts?: Timestamp;

  constructor(data?: PartialMessage<Notification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.activity.v1.Notification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: NotificationId },
    { no: 2, name: "localized_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chat_id", kind: "message", T: ChatId },
    { no: 4, name: "message_id", kind: "message", T: MessageId },
    { no: 10, name: "ts", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notification {
    return new Notification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJsonString(jsonString, options);
  }

  static equals(a: Notification | PlainMessage<Notification> | undefined, b: Notification | PlainMessage<Notification> | undefined): boolean {
    return proto3.util.equals(Notification, a, b);
  }
}

