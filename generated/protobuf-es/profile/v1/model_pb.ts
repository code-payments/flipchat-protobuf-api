// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file profile/v1/model.proto (package flipchat.profile.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message flipchat.profile.v1.UserProfile
 */
export class UserProfile extends Message<UserProfile> {
  /**
   * Display name is the display name of the user (if found).
   *
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * Social profiles are links to external social accounts
   *
   * @generated from field: repeated flipchat.profile.v1.SocialProfile social_profiles = 2;
   */
  socialProfiles: SocialProfile[] = [];

  constructor(data?: PartialMessage<UserProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.profile.v1.UserProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "social_profiles", kind: "message", T: SocialProfile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserProfile {
    return new UserProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserProfile {
    return new UserProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserProfile {
    return new UserProfile().fromJsonString(jsonString, options);
  }

  static equals(a: UserProfile | PlainMessage<UserProfile> | undefined, b: UserProfile | PlainMessage<UserProfile> | undefined): boolean {
    return proto3.util.equals(UserProfile, a, b);
  }
}

/**
 * @generated from message flipchat.profile.v1.SocialProfile
 */
export class SocialProfile extends Message<SocialProfile> {
  /**
   * @generated from oneof flipchat.profile.v1.SocialProfile.type
   */
  type: {
    /**
     * @generated from field: flipchat.profile.v1.XProfile x = 1;
     */
    value: XProfile;
    case: "x";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SocialProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.profile.v1.SocialProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "message", T: XProfile, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SocialProfile {
    return new SocialProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SocialProfile {
    return new SocialProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SocialProfile {
    return new SocialProfile().fromJsonString(jsonString, options);
  }

  static equals(a: SocialProfile | PlainMessage<SocialProfile> | undefined, b: SocialProfile | PlainMessage<SocialProfile> | undefined): boolean {
    return proto3.util.equals(SocialProfile, a, b);
  }
}

/**
 * @generated from message flipchat.profile.v1.XProfile
 */
export class XProfile extends Message<XProfile> {
  /**
   * The user's username on X
   *
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * The user's friendly name on X
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The user's description on X
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * URL to the user's X profile picture
   *
   * @generated from field: string profile_pic_url = 4;
   */
  profilePicUrl = "";

  /**
   * The type of X verification associated with the user
   *
   * @generated from field: flipchat.profile.v1.XProfile.VerifiedType verified_type = 5;
   */
  verifiedType = XProfile_VerifiedType.NONE;

  /**
   * The number of followers the user has on X
   *
   * @generated from field: uint32 follower_count = 6;
   */
  followerCount = 0;

  constructor(data?: PartialMessage<XProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.profile.v1.XProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "profile_pic_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "verified_type", kind: "enum", T: proto3.getEnumType(XProfile_VerifiedType) },
    { no: 6, name: "follower_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): XProfile {
    return new XProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): XProfile {
    return new XProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): XProfile {
    return new XProfile().fromJsonString(jsonString, options);
  }

  static equals(a: XProfile | PlainMessage<XProfile> | undefined, b: XProfile | PlainMessage<XProfile> | undefined): boolean {
    return proto3.util.equals(XProfile, a, b);
  }
}

/**
 * @generated from enum flipchat.profile.v1.XProfile.VerifiedType
 */
export enum XProfile_VerifiedType {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: BLUE = 1;
   */
  BLUE = 1,

  /**
   * @generated from enum value: BUSINESS = 2;
   */
  BUSINESS = 2,

  /**
   * @generated from enum value: GOVERNMENT = 3;
   */
  GOVERNMENT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(XProfile_VerifiedType)
proto3.util.setEnumType(XProfile_VerifiedType, "flipchat.profile.v1.XProfile.VerifiedType", [
  { no: 0, name: "NONE" },
  { no: 1, name: "BLUE" },
  { no: 2, name: "BUSINESS" },
  { no: 3, name: "GOVERNMENT" },
]);

