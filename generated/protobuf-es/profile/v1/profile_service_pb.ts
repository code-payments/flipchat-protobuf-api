// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file profile/v1/profile_service.proto (package flipchat.profile.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Auth, UserId } from "../../common/v1/flipchat_pb";
import { UserProfile } from "./model_pb";

/**
 * @generated from message flipchat.profile.v1.GetProfileRequest
 */
export class GetProfileRequest extends Message<GetProfileRequest> {
  /**
   * @generated from field: flipchat.common.v1.UserId user_id = 1;
   */
  userId?: UserId;

  constructor(data?: PartialMessage<GetProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.profile.v1.GetProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "message", T: UserId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileRequest {
    return new GetProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileRequest {
    return new GetProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileRequest {
    return new GetProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileRequest | PlainMessage<GetProfileRequest> | undefined, b: GetProfileRequest | PlainMessage<GetProfileRequest> | undefined): boolean {
    return proto3.util.equals(GetProfileRequest, a, b);
  }
}

/**
 * @generated from message flipchat.profile.v1.GetProfileResponse
 */
export class GetProfileResponse extends Message<GetProfileResponse> {
  /**
   * @generated from field: flipchat.profile.v1.GetProfileResponse.Result result = 1;
   */
  result = GetProfileResponse_Result.OK;

  /**
   * UserProfile, if found.
   *
   * Some fields may or may not be set, depending on the scope of request
   * in the future.
   *
   * @generated from field: flipchat.profile.v1.UserProfile user_profile = 2;
   */
  userProfile?: UserProfile;

  constructor(data?: PartialMessage<GetProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.profile.v1.GetProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(GetProfileResponse_Result) },
    { no: 2, name: "user_profile", kind: "message", T: UserProfile },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileResponse {
    return new GetProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileResponse {
    return new GetProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileResponse {
    return new GetProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileResponse | PlainMessage<GetProfileResponse> | undefined, b: GetProfileResponse | PlainMessage<GetProfileResponse> | undefined): boolean {
    return proto3.util.equals(GetProfileResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.profile.v1.GetProfileResponse.Result
 */
export enum GetProfileResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: NOT_FOUND = 1;
   */
  NOT_FOUND = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetProfileResponse_Result)
proto3.util.setEnumType(GetProfileResponse_Result, "flipchat.profile.v1.GetProfileResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "NOT_FOUND" },
]);

/**
 * @generated from message flipchat.profile.v1.SetDisplayNameRequest
 */
export class SetDisplayNameRequest extends Message<SetDisplayNameRequest> {
  /**
   * DisplayName is the new name to set.
   *
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: flipchat.common.v1.Auth auth = 10;
   */
  auth?: Auth;

  constructor(data?: PartialMessage<SetDisplayNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.profile.v1.SetDisplayNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "auth", kind: "message", T: Auth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDisplayNameRequest {
    return new SetDisplayNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDisplayNameRequest {
    return new SetDisplayNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDisplayNameRequest {
    return new SetDisplayNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetDisplayNameRequest | PlainMessage<SetDisplayNameRequest> | undefined, b: SetDisplayNameRequest | PlainMessage<SetDisplayNameRequest> | undefined): boolean {
    return proto3.util.equals(SetDisplayNameRequest, a, b);
  }
}

/**
 * @generated from message flipchat.profile.v1.SetDisplayNameResponse
 */
export class SetDisplayNameResponse extends Message<SetDisplayNameResponse> {
  /**
   * @generated from field: flipchat.profile.v1.SetDisplayNameResponse.Result result = 1;
   */
  result = SetDisplayNameResponse_Result.OK;

  constructor(data?: PartialMessage<SetDisplayNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.profile.v1.SetDisplayNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "enum", T: proto3.getEnumType(SetDisplayNameResponse_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetDisplayNameResponse {
    return new SetDisplayNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetDisplayNameResponse {
    return new SetDisplayNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetDisplayNameResponse {
    return new SetDisplayNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetDisplayNameResponse | PlainMessage<SetDisplayNameResponse> | undefined, b: SetDisplayNameResponse | PlainMessage<SetDisplayNameResponse> | undefined): boolean {
    return proto3.util.equals(SetDisplayNameResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.profile.v1.SetDisplayNameResponse.Result
 */
export enum SetDisplayNameResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: INVALID_DISPLAY_NAME = 1;
   */
  INVALID_DISPLAY_NAME = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SetDisplayNameResponse_Result)
proto3.util.setEnumType(SetDisplayNameResponse_Result, "flipchat.profile.v1.SetDisplayNameResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "INVALID_DISPLAY_NAME" },
]);

