// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file user/v1/profile_service.proto (package flipchat.user.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { UserId } from "../../common/v1/flipchat_pb";

/**
 * @generated from message flipchat.user.v1.GetUserProfileRequest
 */
export class GetUserProfileRequest extends Message<GetUserProfileRequest> {
  /**
   * @generated from field: flipchat.common.v1.UserId user_id = 1;
   */
  userId?: UserId;

  constructor(data?: PartialMessage<GetUserProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.user.v1.GetUserProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "message", T: UserId },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserProfileRequest {
    return new GetUserProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserProfileRequest {
    return new GetUserProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserProfileRequest {
    return new GetUserProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserProfileRequest | PlainMessage<GetUserProfileRequest> | undefined, b: GetUserProfileRequest | PlainMessage<GetUserProfileRequest> | undefined): boolean {
    return proto3.util.equals(GetUserProfileRequest, a, b);
  }
}

/**
 * @generated from message flipchat.user.v1.GetUserProfileResponse
 */
export class GetUserProfileResponse extends Message<GetUserProfileResponse> {
  /**
   * DisplayName is the display name of the user (if found).
   *
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  constructor(data?: PartialMessage<GetUserProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flipchat.user.v1.GetUserProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserProfileResponse {
    return new GetUserProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserProfileResponse {
    return new GetUserProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserProfileResponse {
    return new GetUserProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserProfileResponse | PlainMessage<GetUserProfileResponse> | undefined, b: GetUserProfileResponse | PlainMessage<GetUserProfileResponse> | undefined): boolean {
    return proto3.util.equals(GetUserProfileResponse, a, b);
  }
}

/**
 * @generated from enum flipchat.user.v1.GetUserProfileResponse.Result
 */
export enum GetUserProfileResponse_Result {
  /**
   * @generated from enum value: OK = 0;
   */
  OK = 0,

  /**
   * @generated from enum value: NOT_FOUND = 1;
   */
  NOT_FOUND = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetUserProfileResponse_Result)
proto3.util.setEnumType(GetUserProfileResponse_Result, "flipchat.user.v1.GetUserProfileResponse.Result", [
  { no: 0, name: "OK" },
  { no: 1, name: "NOT_FOUND" },
]);

