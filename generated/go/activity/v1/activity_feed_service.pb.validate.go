// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: activity/v1/activity_feed_service.proto

package activitypb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetLatestNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestNotificationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLatestNotificationsRequestMultiError, or nil if none found.
func (m *GetLatestNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _GetLatestNotificationsRequest_Type_InLookup[m.GetType()]; !ok {
		err := GetLatestNotificationsRequestValidationError{
			field:  "Type",
			reason: "value must be in list [TRANSACTION_HISTORY]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxItems() > 1024 {
		err := GetLatestNotificationsRequestValidationError{
			field:  "MaxItems",
			reason: "value must be less than or equal to 1024",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuth() == nil {
		err := GetLatestNotificationsRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLatestNotificationsRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLatestNotificationsRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLatestNotificationsRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLatestNotificationsRequestMultiError(errors)
	}

	return nil
}

// GetLatestNotificationsRequestMultiError is an error wrapping multiple
// validation errors returned by GetLatestNotificationsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetLatestNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestNotificationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestNotificationsRequestMultiError) AllErrors() []error { return m }

// GetLatestNotificationsRequestValidationError is the validation error
// returned by GetLatestNotificationsRequest.Validate if the designated
// constraints aren't met.
type GetLatestNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestNotificationsRequestValidationError) ErrorName() string {
	return "GetLatestNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestNotificationsRequestValidationError{}

var _GetLatestNotificationsRequest_Type_InLookup = map[ActivityFeedType]struct{}{
	1: {},
}

// Validate checks the field values on GetLatestNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestNotificationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLatestNotificationsResponseMultiError, or nil if none found.
func (m *GetLatestNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(m.GetNotifications()) > 1024 {
		err := GetLatestNotificationsResponseValidationError{
			field:  "Notifications",
			reason: "value must contain no more than 1024 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLatestNotificationsResponseValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLatestNotificationsResponseValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLatestNotificationsResponseValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLatestNotificationsResponseMultiError(errors)
	}

	return nil
}

// GetLatestNotificationsResponseMultiError is an error wrapping multiple
// validation errors returned by GetLatestNotificationsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetLatestNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestNotificationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestNotificationsResponseMultiError) AllErrors() []error { return m }

// GetLatestNotificationsResponseValidationError is the validation error
// returned by GetLatestNotificationsResponse.Validate if the designated
// constraints aren't met.
type GetLatestNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestNotificationsResponseValidationError) ErrorName() string {
	return "GetLatestNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestNotificationsResponseValidationError{}
