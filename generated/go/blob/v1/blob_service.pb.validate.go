// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blob/v1/blob_service.proto

package blobpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UploadBlobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadBlobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadBlobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadBlobRequestMultiError, or nil if none found.
func (m *UploadBlobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadBlobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOwnerId() == nil {
		err := UploadBlobRequestValidationError{
			field:  "OwnerId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOwnerId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadBlobRequestValidationError{
					field:  "OwnerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadBlobRequestValidationError{
					field:  "OwnerId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwnerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadBlobRequestValidationError{
				field:  "OwnerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BlobType

	if l := len(m.GetRawData()); l < 1 || l > 4194304 {
		err := UploadBlobRequestValidationError{
			field:  "RawData",
			reason: "value length must be between 1 and 4194304 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuth() == nil {
		err := UploadBlobRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadBlobRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadBlobRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadBlobRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadBlobRequestMultiError(errors)
	}

	return nil
}

// UploadBlobRequestMultiError is an error wrapping multiple validation errors
// returned by UploadBlobRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadBlobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadBlobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadBlobRequestMultiError) AllErrors() []error { return m }

// UploadBlobRequestValidationError is the validation error returned by
// UploadBlobRequest.Validate if the designated constraints aren't met.
type UploadBlobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadBlobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadBlobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadBlobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadBlobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadBlobRequestValidationError) ErrorName() string {
	return "UploadBlobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadBlobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadBlobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadBlobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadBlobRequestValidationError{}

// Validate checks the field values on UploadBlobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadBlobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadBlobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadBlobResponseMultiError, or nil if none found.
func (m *UploadBlobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadBlobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBlob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadBlobResponseValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadBlobResponseValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadBlobResponseValidationError{
				field:  "Blob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadBlobResponseMultiError(errors)
	}

	return nil
}

// UploadBlobResponseMultiError is an error wrapping multiple validation errors
// returned by UploadBlobResponse.ValidateAll() if the designated constraints
// aren't met.
type UploadBlobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadBlobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadBlobResponseMultiError) AllErrors() []error { return m }

// UploadBlobResponseValidationError is the validation error returned by
// UploadBlobResponse.Validate if the designated constraints aren't met.
type UploadBlobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadBlobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadBlobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadBlobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadBlobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadBlobResponseValidationError) ErrorName() string {
	return "UploadBlobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadBlobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadBlobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadBlobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadBlobResponseValidationError{}

// Validate checks the field values on GetBlobInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlobInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlobInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlobInfoRequestMultiError, or nil if none found.
func (m *GetBlobInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlobInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBlobId() == nil {
		err := GetBlobInfoRequestValidationError{
			field:  "BlobId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBlobId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBlobInfoRequestValidationError{
					field:  "BlobId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBlobInfoRequestValidationError{
					field:  "BlobId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlobId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBlobInfoRequestValidationError{
				field:  "BlobId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBlobInfoRequestMultiError(errors)
	}

	return nil
}

// GetBlobInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetBlobInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBlobInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlobInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlobInfoRequestMultiError) AllErrors() []error { return m }

// GetBlobInfoRequestValidationError is the validation error returned by
// GetBlobInfoRequest.Validate if the designated constraints aren't met.
type GetBlobInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlobInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlobInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlobInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlobInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlobInfoRequestValidationError) ErrorName() string {
	return "GetBlobInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlobInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlobInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlobInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlobInfoRequestValidationError{}

// Validate checks the field values on GetBlobInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBlobInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlobInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlobInfoResponseMultiError, or nil if none found.
func (m *GetBlobInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlobInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBlob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBlobInfoResponseValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBlobInfoResponseValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBlobInfoResponseValidationError{
				field:  "Blob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBlobInfoResponseMultiError(errors)
	}

	return nil
}

// GetBlobInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetBlobInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBlobInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlobInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlobInfoResponseMultiError) AllErrors() []error { return m }

// GetBlobInfoResponseValidationError is the validation error returned by
// GetBlobInfoResponse.Validate if the designated constraints aren't met.
type GetBlobInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlobInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlobInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlobInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlobInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlobInfoResponseValidationError) ErrorName() string {
	return "GetBlobInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBlobInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlobInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlobInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlobInfoResponseValidationError{}
