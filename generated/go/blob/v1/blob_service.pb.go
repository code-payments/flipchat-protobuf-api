// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: blob/v1/blob_service.proto

package blobpb

import (
	v1 "github.com/code-payments/flipchat-protobuf-api/generated/go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request for a smaller/single-shot upload
type UploadBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId  *v1.UserId `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	BlobType BlobType   `protobuf:"varint,2,opt,name=blob_type,json=blobType,proto3,enum=flipchat.blob.v1.BlobType" json:"blob_type,omitempty"`
	RawData  []byte     `protobuf:"bytes,3,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *UploadBlobRequest) Reset() {
	*x = UploadBlobRequest{}
	mi := &file_blob_v1_blob_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBlobRequest) ProtoMessage() {}

func (x *UploadBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blob_v1_blob_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBlobRequest.ProtoReflect.Descriptor instead.
func (*UploadBlobRequest) Descriptor() ([]byte, []int) {
	return file_blob_v1_blob_service_proto_rawDescGZIP(), []int{0}
}

func (x *UploadBlobRequest) GetOwnerId() *v1.UserId {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *UploadBlobRequest) GetBlobType() BlobType {
	if x != nil {
		return x.BlobType
	}
	return BlobType_BLOB_TYPE_UNKNOWN
}

func (x *UploadBlobRequest) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

// Single-shot upload response
type UploadBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob *Blob `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *UploadBlobResponse) Reset() {
	*x = UploadBlobResponse{}
	mi := &file_blob_v1_blob_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadBlobResponse) ProtoMessage() {}

func (x *UploadBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blob_v1_blob_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadBlobResponse.ProtoReflect.Descriptor instead.
func (*UploadBlobResponse) Descriptor() ([]byte, []int) {
	return file_blob_v1_blob_service_proto_rawDescGZIP(), []int{1}
}

func (x *UploadBlobResponse) GetBlob() *Blob {
	if x != nil {
		return x.Blob
	}
	return nil
}

// Retrieve existing blob info
type GetBlobInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobId *v1.BlobId `protobuf:"bytes,1,opt,name=blob_id,json=blobId,proto3" json:"blob_id,omitempty"`
}

func (x *GetBlobInfoRequest) Reset() {
	*x = GetBlobInfoRequest{}
	mi := &file_blob_v1_blob_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlobInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobInfoRequest) ProtoMessage() {}

func (x *GetBlobInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blob_v1_blob_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlobInfoRequest) Descriptor() ([]byte, []int) {
	return file_blob_v1_blob_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetBlobInfoRequest) GetBlobId() *v1.BlobId {
	if x != nil {
		return x.BlobId
	}
	return nil
}

type GetBlobInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob *Blob `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *GetBlobInfoResponse) Reset() {
	*x = GetBlobInfoResponse{}
	mi := &file_blob_v1_blob_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlobInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobInfoResponse) ProtoMessage() {}

func (x *GetBlobInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blob_v1_blob_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlobInfoResponse) Descriptor() ([]byte, []int) {
	return file_blob_v1_blob_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetBlobInfoResponse) GetBlob() *Blob {
	if x != nil {
		return x.Blob
	}
	return nil
}

var File_blob_v1_blob_service_proto protoreflect.FileDescriptor

var file_blob_v1_blob_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x11,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x12,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x62, 0x6c, 0x6f, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x49,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x49,
	0x64, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x32, 0xba, 0x01, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x06,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x62, 0x6c,
	0x6f, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7b, 0x0a, 0x20, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x31, 0x5a, 0x4a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f,
	0x76, 0x31, 0x3b, 0x62, 0x6c, 0x6f, 0x62, 0x70, 0x62, 0xa2, 0x02, 0x0a, 0x46, 0x43, 0x50, 0x42,
	0x42, 0x6c, 0x6f, 0x62, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blob_v1_blob_service_proto_rawDescOnce sync.Once
	file_blob_v1_blob_service_proto_rawDescData = file_blob_v1_blob_service_proto_rawDesc
)

func file_blob_v1_blob_service_proto_rawDescGZIP() []byte {
	file_blob_v1_blob_service_proto_rawDescOnce.Do(func() {
		file_blob_v1_blob_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_blob_v1_blob_service_proto_rawDescData)
	})
	return file_blob_v1_blob_service_proto_rawDescData
}

var file_blob_v1_blob_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_blob_v1_blob_service_proto_goTypes = []any{
	(*UploadBlobRequest)(nil),   // 0: flipchat.blob.v1.UploadBlobRequest
	(*UploadBlobResponse)(nil),  // 1: flipchat.blob.v1.UploadBlobResponse
	(*GetBlobInfoRequest)(nil),  // 2: flipchat.blob.v1.GetBlobInfoRequest
	(*GetBlobInfoResponse)(nil), // 3: flipchat.blob.v1.GetBlobInfoResponse
	(*v1.UserId)(nil),           // 4: flipchat.common.v1.UserId
	(BlobType)(0),               // 5: flipchat.blob.v1.BlobType
	(*Blob)(nil),                // 6: flipchat.blob.v1.Blob
	(*v1.BlobId)(nil),           // 7: flipchat.common.v1.BlobId
}
var file_blob_v1_blob_service_proto_depIdxs = []int32{
	4, // 0: flipchat.blob.v1.UploadBlobRequest.owner_id:type_name -> flipchat.common.v1.UserId
	5, // 1: flipchat.blob.v1.UploadBlobRequest.blob_type:type_name -> flipchat.blob.v1.BlobType
	6, // 2: flipchat.blob.v1.UploadBlobResponse.blob:type_name -> flipchat.blob.v1.Blob
	7, // 3: flipchat.blob.v1.GetBlobInfoRequest.blob_id:type_name -> flipchat.common.v1.BlobId
	6, // 4: flipchat.blob.v1.GetBlobInfoResponse.blob:type_name -> flipchat.blob.v1.Blob
	0, // 5: flipchat.blob.v1.BlobService.Upload:input_type -> flipchat.blob.v1.UploadBlobRequest
	2, // 6: flipchat.blob.v1.BlobService.GetInfo:input_type -> flipchat.blob.v1.GetBlobInfoRequest
	1, // 7: flipchat.blob.v1.BlobService.Upload:output_type -> flipchat.blob.v1.UploadBlobResponse
	3, // 8: flipchat.blob.v1.BlobService.GetInfo:output_type -> flipchat.blob.v1.GetBlobInfoResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_blob_v1_blob_service_proto_init() }
func file_blob_v1_blob_service_proto_init() {
	if File_blob_v1_blob_service_proto != nil {
		return
	}
	file_blob_v1_model_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blob_v1_blob_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blob_v1_blob_service_proto_goTypes,
		DependencyIndexes: file_blob_v1_blob_service_proto_depIdxs,
		MessageInfos:      file_blob_v1_blob_service_proto_msgTypes,
	}.Build()
	File_blob_v1_blob_service_proto = out.File
	file_blob_v1_blob_service_proto_rawDesc = nil
	file_blob_v1_blob_service_proto_goTypes = nil
	file_blob_v1_blob_service_proto_depIdxs = nil
}
