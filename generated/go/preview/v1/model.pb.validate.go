// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: preview/v1/model.proto

package previewpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonpb "github.com/code-payments/flipchat-protobuf-api/generated/go/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonpb.ContentType(0)
)

// Validate checks the field values on PreviewUrl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PreviewUrl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewUrl with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PreviewUrlMultiError, or
// nil if none found.
func (m *PreviewUrl) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewUrl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPreviewId() == nil {
		err := PreviewUrlValidationError{
			field:  "PreviewId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPreviewId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewUrlValidationError{
					field:  "PreviewId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewUrlValidationError{
					field:  "PreviewId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreviewId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewUrlValidationError{
				field:  "PreviewId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetUrl()); l < 1 || l > 2048 {
		err := PreviewUrlValidationError{
			field:  "Url",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := PreviewUrlValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 512 {
		err := PreviewUrlValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewUrlValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewUrlValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewUrlValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ContentType

	// no validation rules for ModerationStatus

	if m.GetTs() == nil {
		err := PreviewUrlValidationError{
			field:  "Ts",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PreviewUrlMultiError(errors)
	}

	return nil
}

// PreviewUrlMultiError is an error wrapping multiple validation errors
// returned by PreviewUrl.ValidateAll() if the designated constraints aren't met.
type PreviewUrlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewUrlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewUrlMultiError) AllErrors() []error { return m }

// PreviewUrlValidationError is the validation error returned by
// PreviewUrl.Validate if the designated constraints aren't met.
type PreviewUrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewUrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewUrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewUrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewUrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewUrlValidationError) ErrorName() string { return "PreviewUrlValidationError" }

// Error satisfies the builtin error interface
func (e PreviewUrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewUrl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewUrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewUrlValidationError{}

// Validate checks the field values on PreviewImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PreviewImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewImage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PreviewImageMultiError, or
// nil if none found.
func (m *PreviewImage) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetImageUrl()); l < 1 || l > 2048 {
		err := PreviewImageValidationError{
			field:  "ImageUrl",
			reason: "value length must be between 1 and 2048 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetImageHash()); l < 1 || l > 255 {
		err := PreviewImageValidationError{
			field:  "ImageHash",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Width

	// no validation rules for Height

	if len(errors) > 0 {
		return PreviewImageMultiError(errors)
	}

	return nil
}

// PreviewImageMultiError is an error wrapping multiple validation errors
// returned by PreviewImage.ValidateAll() if the designated constraints aren't met.
type PreviewImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewImageMultiError) AllErrors() []error { return m }

// PreviewImageValidationError is the validation error returned by
// PreviewImage.Validate if the designated constraints aren't met.
type PreviewImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewImageValidationError) ErrorName() string { return "PreviewImageValidationError" }

// Error satisfies the builtin error interface
func (e PreviewImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewImageValidationError{}
