// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: messaging/v1/model.proto

package messagingpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MessageId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageIdMultiError, or nil
// if none found.
func (m *MessageId) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 16 {
		err := MessageIdValidationError{
			field:  "Value",
			reason: "value length must be 16 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MessageIdMultiError(errors)
	}

	return nil
}

// MessageIdMultiError is an error wrapping multiple validation errors returned
// by MessageId.ValidateAll() if the designated constraints aren't met.
type MessageIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageIdMultiError) AllErrors() []error { return m }

// MessageIdValidationError is the validation error returned by
// MessageId.Validate if the designated constraints aren't met.
type MessageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageIdValidationError) ErrorName() string { return "MessageIdValidationError" }

// Error satisfies the builtin error interface
func (e MessageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageIdValidationError{}

// Validate checks the field values on MessageIdBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageIdBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageIdBatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageIdBatchMultiError,
// or nil if none found.
func (m *MessageIdBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageIdBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetMessageIds()); l < 1 || l > 1024 {
		err := MessageIdBatchValidationError{
			field:  "MessageIds",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMessageIds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageIdBatchValidationError{
						field:  fmt.Sprintf("MessageIds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageIdBatchValidationError{
						field:  fmt.Sprintf("MessageIds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageIdBatchValidationError{
					field:  fmt.Sprintf("MessageIds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageIdBatchMultiError(errors)
	}

	return nil
}

// MessageIdBatchMultiError is an error wrapping multiple validation errors
// returned by MessageIdBatch.ValidateAll() if the designated constraints
// aren't met.
type MessageIdBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageIdBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageIdBatchMultiError) AllErrors() []error { return m }

// MessageIdBatchValidationError is the validation error returned by
// MessageIdBatch.Validate if the designated constraints aren't met.
type MessageIdBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageIdBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageIdBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageIdBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageIdBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageIdBatchValidationError) ErrorName() string { return "MessageIdBatchValidationError" }

// Error satisfies the builtin error interface
func (e MessageIdBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageIdBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageIdBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageIdBatchValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMessageId() == nil {
		err := MessageValidationError{
			field:  "MessageId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessageId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "MessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "MessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "MessageId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSenderId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "SenderId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "SenderId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSenderId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "SenderId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetContent()) != 1 {
		err := MessageValidationError{
			field:  "Content",
			reason: "value must contain exactly 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetTs() == nil {
		err := MessageValidationError{
			field:  "Ts",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WasSenderOffStage

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on MessageBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageBatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageBatchMultiError, or
// nil if none found.
func (m *MessageBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetMessages()); l < 1 || l > 1024 {
		err := MessageBatchValidationError{
			field:  "Messages",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageBatchValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageBatchValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageBatchValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageBatchMultiError(errors)
	}

	return nil
}

// MessageBatchMultiError is an error wrapping multiple validation errors
// returned by MessageBatch.ValidateAll() if the designated constraints aren't met.
type MessageBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageBatchMultiError) AllErrors() []error { return m }

// MessageBatchValidationError is the validation error returned by
// MessageBatch.Validate if the designated constraints aren't met.
type MessageBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageBatchValidationError) ErrorName() string { return "MessageBatchValidationError" }

// Error satisfies the builtin error interface
func (e MessageBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageBatchValidationError{}

// Validate checks the field values on Pointer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pointer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pointer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PointerMultiError, or nil if none found.
func (m *Pointer) ValidateAll() error {
	return m.validate(true)
}

func (m *Pointer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Pointer_Type_NotInLookup[m.GetType()]; ok {
		err := PointerValidationError{
			field:  "Type",
			reason: "value must not be in list [UNKNOWN]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetValue() == nil {
		err := PointerValidationError{
			field:  "Value",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PointerValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PointerValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointerValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PointerMultiError(errors)
	}

	return nil
}

// PointerMultiError is an error wrapping multiple validation errors returned
// by Pointer.ValidateAll() if the designated constraints aren't met.
type PointerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointerMultiError) AllErrors() []error { return m }

// PointerValidationError is the validation error returned by Pointer.Validate
// if the designated constraints aren't met.
type PointerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointerValidationError) ErrorName() string { return "PointerValidationError" }

// Error satisfies the builtin error interface
func (e PointerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointerValidationError{}

var _Pointer_Type_NotInLookup = map[Pointer_Type]struct{}{
	0: {},
}

// Validate checks the field values on IsTyping with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsTyping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTyping with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsTypingMultiError, or nil
// if none found.
func (m *IsTyping) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTyping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := IsTypingValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IsTypingValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IsTypingValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IsTypingValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsTyping

	if len(errors) > 0 {
		return IsTypingMultiError(errors)
	}

	return nil
}

// IsTypingMultiError is an error wrapping multiple validation errors returned
// by IsTyping.ValidateAll() if the designated constraints aren't met.
type IsTypingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTypingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTypingMultiError) AllErrors() []error { return m }

// IsTypingValidationError is the validation error returned by
// IsTyping.Validate if the designated constraints aren't met.
type IsTypingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTypingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTypingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTypingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTypingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTypingValidationError) ErrorName() string { return "IsTypingValidationError" }

// Error satisfies the builtin error interface
func (e IsTypingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTyping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTypingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTypingValidationError{}

// Validate checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Content) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Content with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContentMultiError, or nil if none found.
func (m *Content) ValidateAll() error {
	return m.validate(true)
}

func (m *Content) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *Content_Text:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetText()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Text",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Text",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_LocalizedAnnouncement:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetLocalizedAnnouncement()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "LocalizedAnnouncement",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "LocalizedAnnouncement",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocalizedAnnouncement()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "LocalizedAnnouncement",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_Reaction:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetReaction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Reaction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Reaction",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReaction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Reaction",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_Reply:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetReply()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Reply",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Reply",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_Tip:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetTip()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Tip",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Tip",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTip()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Tip",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_Deleted:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetDeleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Deleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Deleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Deleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Content_Review:
		if v == nil {
			err := ContentValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetReview()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Review",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContentValidationError{
						field:  "Review",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReview()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContentValidationError{
					field:  "Review",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := ContentValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ContentMultiError(errors)
	}

	return nil
}

// ContentMultiError is an error wrapping multiple validation errors returned
// by Content.ValidateAll() if the designated constraints aren't met.
type ContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentMultiError) AllErrors() []error { return m }

// ContentValidationError is the validation error returned by Content.Validate
// if the designated constraints aren't met.
type ContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentValidationError) ErrorName() string { return "ContentValidationError" }

// Error satisfies the builtin error interface
func (e ContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentValidationError{}

// Validate checks the field values on TextContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TextContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TextContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TextContentMultiError, or
// nil if none found.
func (m *TextContent) ValidateAll() error {
	return m.validate(true)
}

func (m *TextContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 1024 {
		err := TextContentValidationError{
			field:  "Text",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TextContentMultiError(errors)
	}

	return nil
}

// TextContentMultiError is an error wrapping multiple validation errors
// returned by TextContent.ValidateAll() if the designated constraints aren't met.
type TextContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TextContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TextContentMultiError) AllErrors() []error { return m }

// TextContentValidationError is the validation error returned by
// TextContent.Validate if the designated constraints aren't met.
type TextContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TextContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TextContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TextContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TextContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TextContentValidationError) ErrorName() string { return "TextContentValidationError" }

// Error satisfies the builtin error interface
func (e TextContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTextContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TextContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TextContentValidationError{}

// Validate checks the field values on LocalizedAnnouncementContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LocalizedAnnouncementContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocalizedAnnouncementContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocalizedAnnouncementContentMultiError, or nil if none found.
func (m *LocalizedAnnouncementContent) ValidateAll() error {
	return m.validate(true)
}

func (m *LocalizedAnnouncementContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKeyOrText()); l < 1 || l > 1024 {
		err := LocalizedAnnouncementContentValidationError{
			field:  "KeyOrText",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LocalizedAnnouncementContentMultiError(errors)
	}

	return nil
}

// LocalizedAnnouncementContentMultiError is an error wrapping multiple
// validation errors returned by LocalizedAnnouncementContent.ValidateAll() if
// the designated constraints aren't met.
type LocalizedAnnouncementContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocalizedAnnouncementContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocalizedAnnouncementContentMultiError) AllErrors() []error { return m }

// LocalizedAnnouncementContentValidationError is the validation error returned
// by LocalizedAnnouncementContent.Validate if the designated constraints
// aren't met.
type LocalizedAnnouncementContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalizedAnnouncementContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalizedAnnouncementContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalizedAnnouncementContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalizedAnnouncementContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalizedAnnouncementContentValidationError) ErrorName() string {
	return "LocalizedAnnouncementContentValidationError"
}

// Error satisfies the builtin error interface
func (e LocalizedAnnouncementContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalizedAnnouncementContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalizedAnnouncementContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalizedAnnouncementContentValidationError{}

// Validate checks the field values on ReactionContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReactionContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReactionContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReactionContentMultiError, or nil if none found.
func (m *ReactionContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ReactionContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOriginalMessageId() == nil {
		err := ReactionContentValidationError{
			field:  "OriginalMessageId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOriginalMessageId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReactionContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReactionContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalMessageId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactionContentValidationError{
				field:  "OriginalMessageId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetEmoji()); l < 1 || l > 16 {
		err := ReactionContentValidationError{
			field:  "Emoji",
			reason: "value length must be between 1 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReactionContentMultiError(errors)
	}

	return nil
}

// ReactionContentMultiError is an error wrapping multiple validation errors
// returned by ReactionContent.ValidateAll() if the designated constraints
// aren't met.
type ReactionContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReactionContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReactionContentMultiError) AllErrors() []error { return m }

// ReactionContentValidationError is the validation error returned by
// ReactionContent.Validate if the designated constraints aren't met.
type ReactionContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactionContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactionContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactionContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactionContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactionContentValidationError) ErrorName() string { return "ReactionContentValidationError" }

// Error satisfies the builtin error interface
func (e ReactionContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactionContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactionContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactionContentValidationError{}

// Validate checks the field values on ReplyContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplyContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplyContentMultiError, or
// nil if none found.
func (m *ReplyContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOriginalMessageId() == nil {
		err := ReplyContentValidationError{
			field:  "OriginalMessageId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOriginalMessageId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplyContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplyContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalMessageId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplyContentValidationError{
				field:  "OriginalMessageId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetReplyText()); l < 1 || l > 1024 {
		err := ReplyContentValidationError{
			field:  "ReplyText",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReplyContentMultiError(errors)
	}

	return nil
}

// ReplyContentMultiError is an error wrapping multiple validation errors
// returned by ReplyContent.ValidateAll() if the designated constraints aren't met.
type ReplyContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyContentMultiError) AllErrors() []error { return m }

// ReplyContentValidationError is the validation error returned by
// ReplyContent.Validate if the designated constraints aren't met.
type ReplyContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyContentValidationError) ErrorName() string { return "ReplyContentValidationError" }

// Error satisfies the builtin error interface
func (e ReplyContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyContentValidationError{}

// Validate checks the field values on TipContent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TipContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TipContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TipContentMultiError, or
// nil if none found.
func (m *TipContent) ValidateAll() error {
	return m.validate(true)
}

func (m *TipContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOriginalMessageId() == nil {
		err := TipContentValidationError{
			field:  "OriginalMessageId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOriginalMessageId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TipContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TipContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalMessageId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TipContentValidationError{
				field:  "OriginalMessageId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTipAmount() == nil {
		err := TipContentValidationError{
			field:  "TipAmount",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTipAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TipContentValidationError{
					field:  "TipAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TipContentValidationError{
					field:  "TipAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTipAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TipContentValidationError{
				field:  "TipAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TipContentMultiError(errors)
	}

	return nil
}

// TipContentMultiError is an error wrapping multiple validation errors
// returned by TipContent.ValidateAll() if the designated constraints aren't met.
type TipContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TipContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TipContentMultiError) AllErrors() []error { return m }

// TipContentValidationError is the validation error returned by
// TipContent.Validate if the designated constraints aren't met.
type TipContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TipContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TipContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TipContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TipContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TipContentValidationError) ErrorName() string { return "TipContentValidationError" }

// Error satisfies the builtin error interface
func (e TipContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTipContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TipContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TipContentValidationError{}

// Validate checks the field values on DeleteMessageContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMessageContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMessageContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMessageContentMultiError, or nil if none found.
func (m *DeleteMessageContent) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMessageContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOriginalMessageId() == nil {
		err := DeleteMessageContentValidationError{
			field:  "OriginalMessageId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOriginalMessageId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteMessageContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteMessageContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalMessageId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteMessageContentValidationError{
				field:  "OriginalMessageId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteMessageContentMultiError(errors)
	}

	return nil
}

// DeleteMessageContentMultiError is an error wrapping multiple validation
// errors returned by DeleteMessageContent.ValidateAll() if the designated
// constraints aren't met.
type DeleteMessageContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMessageContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMessageContentMultiError) AllErrors() []error { return m }

// DeleteMessageContentValidationError is the validation error returned by
// DeleteMessageContent.Validate if the designated constraints aren't met.
type DeleteMessageContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageContentValidationError) ErrorName() string {
	return "DeleteMessageContentValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageContentValidationError{}

// Validate checks the field values on ReviewContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReviewContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReviewContentMultiError, or
// nil if none found.
func (m *ReviewContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOriginalMessageId() == nil {
		err := ReviewContentValidationError{
			field:  "OriginalMessageId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOriginalMessageId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewContentValidationError{
					field:  "OriginalMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginalMessageId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewContentValidationError{
				field:  "OriginalMessageId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsApproved

	if len(errors) > 0 {
		return ReviewContentMultiError(errors)
	}

	return nil
}

// ReviewContentMultiError is an error wrapping multiple validation errors
// returned by ReviewContent.ValidateAll() if the designated constraints
// aren't met.
type ReviewContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewContentMultiError) AllErrors() []error { return m }

// ReviewContentValidationError is the validation error returned by
// ReviewContent.Validate if the designated constraints aren't met.
type ReviewContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewContentValidationError) ErrorName() string { return "ReviewContentValidationError" }

// Error satisfies the builtin error interface
func (e ReviewContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewContentValidationError{}
