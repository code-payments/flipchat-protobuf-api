// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: messaging/v1/model.proto

package messagingpb

import (
	v1 "github.com/code-payments/flipchat-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pointer_Type int32

const (
	Pointer_UNKNOWN   Pointer_Type = 0
	Pointer_SENT      Pointer_Type = 1 // Always inferred by OK result in SendMessageResponse or message presence in a chat
	Pointer_DELIVERED Pointer_Type = 2
	Pointer_READ      Pointer_Type = 3
)

// Enum value maps for Pointer_Type.
var (
	Pointer_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "SENT",
		2: "DELIVERED",
		3: "READ",
	}
	Pointer_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"SENT":      1,
		"DELIVERED": 2,
		"READ":      3,
	}
)

func (x Pointer_Type) Enum() *Pointer_Type {
	p := new(Pointer_Type)
	*p = x
	return p
}

func (x Pointer_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pointer_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_model_proto_enumTypes[0].Descriptor()
}

func (Pointer_Type) Type() protoreflect.EnumType {
	return &file_messaging_v1_model_proto_enumTypes[0]
}

func (x Pointer_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pointer_Type.Descriptor instead.
func (Pointer_Type) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{4, 0}
}

type MessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A lexicographically sortable ID that can be used to sort source of
	// chat history.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageId) Reset() {
	*x = MessageId{}
	mi := &file_messaging_v1_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageId) ProtoMessage() {}

func (x *MessageId) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageId.ProtoReflect.Descriptor instead.
func (*MessageId) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *MessageId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type MessageIdBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageIds []*MessageId `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
}

func (x *MessageIdBatch) Reset() {
	*x = MessageIdBatch{}
	mi := &file_messaging_v1_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageIdBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageIdBatch) ProtoMessage() {}

func (x *MessageIdBatch) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageIdBatch.ProtoReflect.Descriptor instead.
func (*MessageIdBatch) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *MessageIdBatch) GetMessageIds() []*MessageId {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// A message in a chat
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique ID for this message
	MessageId *MessageId `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The chat member that sent the message. For NOTIFICATION chats, this field
	// is omitted since the chat has exactly 1 member.
	SenderId *v1.UserId `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// Message content, which is currently guaranteed to have exactly one item.
	Content []*Content `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	// Timestamp this message was generated at. This value is also encoded in
	// any time-based UUID message IDs.
	Ts *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`
	// If sender_id is provided, were they off stage at the time of sending
	// this message
	WasSenderOffStage bool `protobuf:"varint,5,opt,name=was_sender_off_stage,json=wasSenderOffStage,proto3" json:"was_sender_off_stage,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_messaging_v1_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *Message) GetMessageId() *MessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Message) GetSenderId() *v1.UserId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *Message) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Message) GetWasSenderOffStage() bool {
	if x != nil {
		return x.WasSenderOffStage
	}
	return false
}

type MessageBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *MessageBatch) Reset() {
	*x = MessageBatch{}
	mi := &file_messaging_v1_model_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBatch) ProtoMessage() {}

func (x *MessageBatch) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBatch.ProtoReflect.Descriptor instead.
func (*MessageBatch) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{3}
}

func (x *MessageBatch) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Pointer in a chat indicating a user's message history state in a chat.
type Pointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of pointer indicates which user's message history state can be
	// inferred from the pointer value. It is also possible to infer cross-pointer
	// state. For example, if a chat member has a READ pointer for a message with
	// ID N, then the DELIVERED pointer must be at least N.
	Type Pointer_Type `protobuf:"varint,1,opt,name=type,proto3,enum=flipchat.messaging.v1.Pointer_Type" json:"type,omitempty"`
	// Everything at or before this message ID is considered to have the state
	// inferred by the type of pointer.
	Value *MessageId `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pointer) Reset() {
	*x = Pointer{}
	mi := &file_messaging_v1_model_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pointer) ProtoMessage() {}

func (x *Pointer) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pointer.ProtoReflect.Descriptor instead.
func (*Pointer) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{4}
}

func (x *Pointer) GetType() Pointer_Type {
	if x != nil {
		return x.Type
	}
	return Pointer_UNKNOWN
}

func (x *Pointer) GetValue() *MessageId {
	if x != nil {
		return x.Value
	}
	return nil
}

type IsTyping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// is_typing indicates whether or not the user is typing.
	// If false, the user has explicitly stopped typing.
	IsTyping bool `protobuf:"varint,2,opt,name=is_typing,json=isTyping,proto3" json:"is_typing,omitempty"`
}

func (x *IsTyping) Reset() {
	*x = IsTyping{}
	mi := &file_messaging_v1_model_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsTyping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTyping) ProtoMessage() {}

func (x *IsTyping) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTyping.ProtoReflect.Descriptor instead.
func (*IsTyping) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{5}
}

func (x *IsTyping) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *IsTyping) GetIsTyping() bool {
	if x != nil {
		return x.IsTyping
	}
	return false
}

// Content for a chat message
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Content_Text
	//	*Content_LocalizedAnnouncement
	//	*Content_Reaction
	//	*Content_Reply
	//	*Content_Tip
	//	*Content_Deleted
	//	*Content_Review
	//	*Content_LocalizedAnnouncementV2
	Type isContent_Type `protobuf_oneof:"type"`
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_messaging_v1_model_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{6}
}

func (m *Content) GetType() isContent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Content) GetText() *TextContent {
	if x, ok := x.GetType().(*Content_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Content) GetLocalizedAnnouncement() *LocalizedAnnouncementContent {
	if x, ok := x.GetType().(*Content_LocalizedAnnouncement); ok {
		return x.LocalizedAnnouncement
	}
	return nil
}

func (x *Content) GetReaction() *ReactionContent {
	if x, ok := x.GetType().(*Content_Reaction); ok {
		return x.Reaction
	}
	return nil
}

func (x *Content) GetReply() *ReplyContent {
	if x, ok := x.GetType().(*Content_Reply); ok {
		return x.Reply
	}
	return nil
}

func (x *Content) GetTip() *TipContent {
	if x, ok := x.GetType().(*Content_Tip); ok {
		return x.Tip
	}
	return nil
}

func (x *Content) GetDeleted() *DeleteMessageContent {
	if x, ok := x.GetType().(*Content_Deleted); ok {
		return x.Deleted
	}
	return nil
}

func (x *Content) GetReview() *ReviewContent {
	if x, ok := x.GetType().(*Content_Review); ok {
		return x.Review
	}
	return nil
}

func (x *Content) GetLocalizedAnnouncementV2() *LocalizedAnnouncementContentV2 {
	if x, ok := x.GetType().(*Content_LocalizedAnnouncementV2); ok {
		return x.LocalizedAnnouncementV2
	}
	return nil
}

type isContent_Type interface {
	isContent_Type()
}

type Content_Text struct {
	Text *TextContent `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Content_LocalizedAnnouncement struct {
	LocalizedAnnouncement *LocalizedAnnouncementContent `protobuf:"bytes,2,opt,name=localized_announcement,json=localizedAnnouncement,proto3,oneof"`
}

type Content_Reaction struct {
	Reaction *ReactionContent `protobuf:"bytes,5,opt,name=reaction,proto3,oneof"`
}

type Content_Reply struct {
	Reply *ReplyContent `protobuf:"bytes,6,opt,name=reply,proto3,oneof"`
}

type Content_Tip struct {
	Tip *TipContent `protobuf:"bytes,7,opt,name=tip,proto3,oneof"`
}

type Content_Deleted struct {
	Deleted *DeleteMessageContent `protobuf:"bytes,8,opt,name=deleted,proto3,oneof"`
}

type Content_Review struct {
	Review *ReviewContent `protobuf:"bytes,9,opt,name=review,proto3,oneof"`
}

type Content_LocalizedAnnouncementV2 struct {
	LocalizedAnnouncementV2 *LocalizedAnnouncementContentV2 `protobuf:"bytes,10,opt,name=localized_announcement_v2,json=localizedAnnouncementV2,proto3,oneof"`
}

func (*Content_Text) isContent_Type() {}

func (*Content_LocalizedAnnouncement) isContent_Type() {}

func (*Content_Reaction) isContent_Type() {}

func (*Content_Reply) isContent_Type() {}

func (*Content_Tip) isContent_Type() {}

func (*Content_Deleted) isContent_Type() {}

func (*Content_Review) isContent_Type() {}

func (*Content_LocalizedAnnouncementV2) isContent_Type() {}

// Raw text content
type TextContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextContent) Reset() {
	*x = TextContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextContent) ProtoMessage() {}

func (x *TextContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextContent.ProtoReflect.Descriptor instead.
func (*TextContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{7}
}

func (x *TextContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// LocalizedAnnouncementContent content is an annoucement that is either a
// localization key that should be translated on client, or a server-side
// translated piece of text.
//
// Deprecated: Use v2 instead
type LocalizedAnnouncementContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyOrText string `protobuf:"bytes,1,opt,name=key_or_text,json=keyOrText,proto3" json:"key_or_text,omitempty"`
}

func (x *LocalizedAnnouncementContent) Reset() {
	*x = LocalizedAnnouncementContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalizedAnnouncementContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedAnnouncementContent) ProtoMessage() {}

func (x *LocalizedAnnouncementContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedAnnouncementContent.ProtoReflect.Descriptor instead.
func (*LocalizedAnnouncementContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{8}
}

func (x *LocalizedAnnouncementContent) GetKeyOrText() string {
	if x != nil {
		return x.KeyOrText
	}
	return ""
}

// LocalizedAnnouncementContentV2 content is an annoucement that is either a
// localization key that should be translated on client, or a server-side
// translated piece of text. It also contains other metadata, like buttons for
// CTAs.
type LocalizedAnnouncementContentV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyOrText string `protobuf:"bytes,1,opt,name=key_or_text,json=keyOrText,proto3" json:"key_or_text,omitempty"`
	// Optional button to display at the end of the announcement
	Button *v1.LocalizedButton `protobuf:"bytes,3,opt,name=button,proto3" json:"button,omitempty"`
}

func (x *LocalizedAnnouncementContentV2) Reset() {
	*x = LocalizedAnnouncementContentV2{}
	mi := &file_messaging_v1_model_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalizedAnnouncementContentV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedAnnouncementContentV2) ProtoMessage() {}

func (x *LocalizedAnnouncementContentV2) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedAnnouncementContentV2.ProtoReflect.Descriptor instead.
func (*LocalizedAnnouncementContentV2) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{9}
}

func (x *LocalizedAnnouncementContentV2) GetKeyOrText() string {
	if x != nil {
		return x.KeyOrText
	}
	return ""
}

func (x *LocalizedAnnouncementContentV2) GetButton() *v1.LocalizedButton {
	if x != nil {
		return x.Button
	}
	return nil
}

// Emoji reaction to another message
type ReactionContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message ID of the message this reaction is associated with
	OriginalMessageId *MessageId `protobuf:"bytes,1,opt,name=original_message_id,json=originalMessageId,proto3" json:"original_message_id,omitempty"`
	// The emoji or reaction symbol
	Emoji string `protobuf:"bytes,2,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *ReactionContent) Reset() {
	*x = ReactionContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReactionContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionContent) ProtoMessage() {}

func (x *ReactionContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionContent.ProtoReflect.Descriptor instead.
func (*ReactionContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{10}
}

func (x *ReactionContent) GetOriginalMessageId() *MessageId {
	if x != nil {
		return x.OriginalMessageId
	}
	return nil
}

func (x *ReactionContent) GetEmoji() string {
	if x != nil {
		return x.Emoji
	}
	return ""
}

// Text reply of another message
type ReplyContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message ID of the message this reply is referencing
	OriginalMessageId *MessageId `protobuf:"bytes,1,opt,name=original_message_id,json=originalMessageId,proto3" json:"original_message_id,omitempty"`
	// The reply text, which can be handled similarly to TextContent
	ReplyText string `protobuf:"bytes,2,opt,name=reply_text,json=replyText,proto3" json:"reply_text,omitempty"`
}

func (x *ReplyContent) Reset() {
	*x = ReplyContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyContent) ProtoMessage() {}

func (x *ReplyContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyContent.ProtoReflect.Descriptor instead.
func (*ReplyContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{11}
}

func (x *ReplyContent) GetOriginalMessageId() *MessageId {
	if x != nil {
		return x.OriginalMessageId
	}
	return nil
}

func (x *ReplyContent) GetReplyText() string {
	if x != nil {
		return x.ReplyText
	}
	return ""
}

type TipContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message ID of the message this tip is referencing
	OriginalMessageId *MessageId `protobuf:"bytes,1,opt,name=original_message_id,json=originalMessageId,proto3" json:"original_message_id,omitempty"`
	// The amount tipped for the message
	TipAmount *v1.PaymentAmount `protobuf:"bytes,2,opt,name=tip_amount,json=tipAmount,proto3" json:"tip_amount,omitempty"`
}

func (x *TipContent) Reset() {
	*x = TipContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipContent) ProtoMessage() {}

func (x *TipContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipContent.ProtoReflect.Descriptor instead.
func (*TipContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{12}
}

func (x *TipContent) GetOriginalMessageId() *MessageId {
	if x != nil {
		return x.OriginalMessageId
	}
	return nil
}

func (x *TipContent) GetTipAmount() *v1.PaymentAmount {
	if x != nil {
		return x.TipAmount
	}
	return nil
}

type DeleteMessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message ID of the message that was deleted
	OriginalMessageId *MessageId `protobuf:"bytes,1,opt,name=original_message_id,json=originalMessageId,proto3" json:"original_message_id,omitempty"`
}

func (x *DeleteMessageContent) Reset() {
	*x = DeleteMessageContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageContent) ProtoMessage() {}

func (x *DeleteMessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageContent.ProtoReflect.Descriptor instead.
func (*DeleteMessageContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteMessageContent) GetOriginalMessageId() *MessageId {
	if x != nil {
		return x.OriginalMessageId
	}
	return nil
}

type ReviewContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message ID of the message that is being reviewed. Currently, only
	// off stage messages can be reviewed
	OriginalMessageId *MessageId `protobuf:"bytes,1,opt,name=original_message_id,json=originalMessageId,proto3" json:"original_message_id,omitempty"`
	// Whether the message has been approved. In the event of multiple reviews,
	// the first message in the message log takes priority.
	IsApproved bool `protobuf:"varint,2,opt,name=is_approved,json=isApproved,proto3" json:"is_approved,omitempty"`
}

func (x *ReviewContent) Reset() {
	*x = ReviewContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewContent) ProtoMessage() {}

func (x *ReviewContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewContent.ProtoReflect.Descriptor instead.
func (*ReviewContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{14}
}

func (x *ReviewContent) GetOriginalMessageId() *MessageId {
	if x != nil {
		return x.OriginalMessageId
	}
	return nil
}

func (x *ReviewContent) GetIsApproved() bool {
	if x != nil {
		return x.IsApproved
	}
	return false
}

var File_messaging_v1_model_proto protoreflect.FileDescriptor

var file_messaging_v1_model_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x10, 0x18, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x60, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x4e, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92,
	0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x49, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x14, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77,
	0x61, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x22, 0x57, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x07, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x20, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x03, 0x22, 0x66, 0x0a, 0x08, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3d,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x82, 0x05, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x6c, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x35, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x74, 0x69, 0x70, 0x12, 0x47, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x73, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x48, 0x00, 0x52, 0x17, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22,
	0x2d, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4a,
	0x0a, 0x1c, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52,
	0x09, 0x6b, 0x65, 0x79, 0x4f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x2a, 0x0a,
	0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x09,
	0x6b, 0x65, 0x79, 0x4f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x06,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x8e, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x5a, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x05,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x10, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0x95, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5a,
	0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x69, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42,
	0x8f, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x70, 0x62, 0xa2,
	0x02, 0x0f, 0x46, 0x43, 0x50, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messaging_v1_model_proto_rawDescOnce sync.Once
	file_messaging_v1_model_proto_rawDescData = file_messaging_v1_model_proto_rawDesc
)

func file_messaging_v1_model_proto_rawDescGZIP() []byte {
	file_messaging_v1_model_proto_rawDescOnce.Do(func() {
		file_messaging_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_messaging_v1_model_proto_rawDescData)
	})
	return file_messaging_v1_model_proto_rawDescData
}

var file_messaging_v1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_messaging_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_messaging_v1_model_proto_goTypes = []any{
	(Pointer_Type)(0),                      // 0: flipchat.messaging.v1.Pointer.Type
	(*MessageId)(nil),                      // 1: flipchat.messaging.v1.MessageId
	(*MessageIdBatch)(nil),                 // 2: flipchat.messaging.v1.MessageIdBatch
	(*Message)(nil),                        // 3: flipchat.messaging.v1.Message
	(*MessageBatch)(nil),                   // 4: flipchat.messaging.v1.MessageBatch
	(*Pointer)(nil),                        // 5: flipchat.messaging.v1.Pointer
	(*IsTyping)(nil),                       // 6: flipchat.messaging.v1.IsTyping
	(*Content)(nil),                        // 7: flipchat.messaging.v1.Content
	(*TextContent)(nil),                    // 8: flipchat.messaging.v1.TextContent
	(*LocalizedAnnouncementContent)(nil),   // 9: flipchat.messaging.v1.LocalizedAnnouncementContent
	(*LocalizedAnnouncementContentV2)(nil), // 10: flipchat.messaging.v1.LocalizedAnnouncementContentV2
	(*ReactionContent)(nil),                // 11: flipchat.messaging.v1.ReactionContent
	(*ReplyContent)(nil),                   // 12: flipchat.messaging.v1.ReplyContent
	(*TipContent)(nil),                     // 13: flipchat.messaging.v1.TipContent
	(*DeleteMessageContent)(nil),           // 14: flipchat.messaging.v1.DeleteMessageContent
	(*ReviewContent)(nil),                  // 15: flipchat.messaging.v1.ReviewContent
	(*v1.UserId)(nil),                      // 16: flipchat.common.v1.UserId
	(*timestamppb.Timestamp)(nil),          // 17: google.protobuf.Timestamp
	(*v1.LocalizedButton)(nil),             // 18: flipchat.common.v1.LocalizedButton
	(*v1.PaymentAmount)(nil),               // 19: flipchat.common.v1.PaymentAmount
}
var file_messaging_v1_model_proto_depIdxs = []int32{
	1,  // 0: flipchat.messaging.v1.MessageIdBatch.message_ids:type_name -> flipchat.messaging.v1.MessageId
	1,  // 1: flipchat.messaging.v1.Message.message_id:type_name -> flipchat.messaging.v1.MessageId
	16, // 2: flipchat.messaging.v1.Message.sender_id:type_name -> flipchat.common.v1.UserId
	7,  // 3: flipchat.messaging.v1.Message.content:type_name -> flipchat.messaging.v1.Content
	17, // 4: flipchat.messaging.v1.Message.ts:type_name -> google.protobuf.Timestamp
	3,  // 5: flipchat.messaging.v1.MessageBatch.messages:type_name -> flipchat.messaging.v1.Message
	0,  // 6: flipchat.messaging.v1.Pointer.type:type_name -> flipchat.messaging.v1.Pointer.Type
	1,  // 7: flipchat.messaging.v1.Pointer.value:type_name -> flipchat.messaging.v1.MessageId
	16, // 8: flipchat.messaging.v1.IsTyping.user_id:type_name -> flipchat.common.v1.UserId
	8,  // 9: flipchat.messaging.v1.Content.text:type_name -> flipchat.messaging.v1.TextContent
	9,  // 10: flipchat.messaging.v1.Content.localized_announcement:type_name -> flipchat.messaging.v1.LocalizedAnnouncementContent
	11, // 11: flipchat.messaging.v1.Content.reaction:type_name -> flipchat.messaging.v1.ReactionContent
	12, // 12: flipchat.messaging.v1.Content.reply:type_name -> flipchat.messaging.v1.ReplyContent
	13, // 13: flipchat.messaging.v1.Content.tip:type_name -> flipchat.messaging.v1.TipContent
	14, // 14: flipchat.messaging.v1.Content.deleted:type_name -> flipchat.messaging.v1.DeleteMessageContent
	15, // 15: flipchat.messaging.v1.Content.review:type_name -> flipchat.messaging.v1.ReviewContent
	10, // 16: flipchat.messaging.v1.Content.localized_announcement_v2:type_name -> flipchat.messaging.v1.LocalizedAnnouncementContentV2
	18, // 17: flipchat.messaging.v1.LocalizedAnnouncementContentV2.button:type_name -> flipchat.common.v1.LocalizedButton
	1,  // 18: flipchat.messaging.v1.ReactionContent.original_message_id:type_name -> flipchat.messaging.v1.MessageId
	1,  // 19: flipchat.messaging.v1.ReplyContent.original_message_id:type_name -> flipchat.messaging.v1.MessageId
	1,  // 20: flipchat.messaging.v1.TipContent.original_message_id:type_name -> flipchat.messaging.v1.MessageId
	19, // 21: flipchat.messaging.v1.TipContent.tip_amount:type_name -> flipchat.common.v1.PaymentAmount
	1,  // 22: flipchat.messaging.v1.DeleteMessageContent.original_message_id:type_name -> flipchat.messaging.v1.MessageId
	1,  // 23: flipchat.messaging.v1.ReviewContent.original_message_id:type_name -> flipchat.messaging.v1.MessageId
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_messaging_v1_model_proto_init() }
func file_messaging_v1_model_proto_init() {
	if File_messaging_v1_model_proto != nil {
		return
	}
	file_messaging_v1_model_proto_msgTypes[6].OneofWrappers = []any{
		(*Content_Text)(nil),
		(*Content_LocalizedAnnouncement)(nil),
		(*Content_Reaction)(nil),
		(*Content_Reply)(nil),
		(*Content_Tip)(nil),
		(*Content_Deleted)(nil),
		(*Content_Review)(nil),
		(*Content_LocalizedAnnouncementV2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messaging_v1_model_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messaging_v1_model_proto_goTypes,
		DependencyIndexes: file_messaging_v1_model_proto_depIdxs,
		EnumInfos:         file_messaging_v1_model_proto_enumTypes,
		MessageInfos:      file_messaging_v1_model_proto_msgTypes,
	}.Build()
	File_messaging_v1_model_proto = out.File
	file_messaging_v1_model_proto_rawDesc = nil
	file_messaging_v1_model_proto_goTypes = nil
	file_messaging_v1_model_proto_depIdxs = nil
}
