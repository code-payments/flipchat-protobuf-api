// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: messaging/v1/model.proto

package messagingpb

import (
	v1 "github.com/code-payments/flipchat-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pointer_Type int32

const (
	Pointer_UNKNOWN   Pointer_Type = 0
	Pointer_SENT      Pointer_Type = 1 // Always inferred by OK result in SendMessageResponse or message presence in a chat
	Pointer_DELIVERED Pointer_Type = 2
	Pointer_READ      Pointer_Type = 3
)

// Enum value maps for Pointer_Type.
var (
	Pointer_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "SENT",
		2: "DELIVERED",
		3: "READ",
	}
	Pointer_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"SENT":      1,
		"DELIVERED": 2,
		"READ":      3,
	}
)

func (x Pointer_Type) Enum() *Pointer_Type {
	p := new(Pointer_Type)
	*p = x
	return p
}

func (x Pointer_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pointer_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_model_proto_enumTypes[0].Descriptor()
}

func (Pointer_Type) Type() protoreflect.EnumType {
	return &file_messaging_v1_model_proto_enumTypes[0]
}

func (x Pointer_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pointer_Type.Descriptor instead.
func (Pointer_Type) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{2, 0}
}

type MessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A lexicographically sortable ID that can be used to sort source of
	// chat history.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageId) Reset() {
	*x = MessageId{}
	mi := &file_messaging_v1_model_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageId) ProtoMessage() {}

func (x *MessageId) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageId.ProtoReflect.Descriptor instead.
func (*MessageId) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *MessageId) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// A message in a chat
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique ID for this message
	MessageId *MessageId `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The chat member that sent the message. For NOTIFICATION chats, this field
	// is omitted since the chat has exactly 1 member.
	SenderId *v1.UserId `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// Ordered message content. A message may have more than one piece of content.
	Content []*Content `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty"`
	// Timestamp this message was generated at. This value is also encoded in
	// any time-based UUID message IDs.
	Ts *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ts,proto3" json:"ts,omitempty"`
	// Cursor value for this message for reference in a paged GetMessagesRequest
	Cursor *Cursor `protobuf:"bytes,5,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_messaging_v1_model_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetMessageId() *MessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Message) GetSenderId() *v1.UserId {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *Message) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Message) GetCursor() *Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

// Pointer in a chat indicating a user's message history state in a chat.
type Pointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of pointer indicates which user's message history state can be
	// inferred from the pointer value. It is also possible to infer cross-pointer
	// state. For example, if a chat member has a READ pointer for a message with
	// ID N, then the DELIVERED pointer must be at least N.
	Type Pointer_Type `protobuf:"varint,1,opt,name=type,proto3,enum=flipchat.messaging.v1.Pointer_Type" json:"type,omitempty"`
	// Everything at or before this message ID is considered to have the state
	// inferred by the type of pointer.
	Value *MessageId `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pointer) Reset() {
	*x = Pointer{}
	mi := &file_messaging_v1_model_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pointer) ProtoMessage() {}

func (x *Pointer) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pointer.ProtoReflect.Descriptor instead.
func (*Pointer) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *Pointer) GetType() Pointer_Type {
	if x != nil {
		return x.Type
	}
	return Pointer_UNKNOWN
}

func (x *Pointer) GetValue() *MessageId {
	if x != nil {
		return x.Value
	}
	return nil
}

type IsTyping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// is_typing indicates whether or not the user is typing.
	// If false, the user has explicitly stopped typing.
	IsTyping bool `protobuf:"varint,2,opt,name=is_typing,json=isTyping,proto3" json:"is_typing,omitempty"`
}

func (x *IsTyping) Reset() {
	*x = IsTyping{}
	mi := &file_messaging_v1_model_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsTyping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTyping) ProtoMessage() {}

func (x *IsTyping) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTyping.ProtoReflect.Descriptor instead.
func (*IsTyping) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{3}
}

func (x *IsTyping) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *IsTyping) GetIsTyping() bool {
	if x != nil {
		return x.IsTyping
	}
	return false
}

type Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	mi := &file_messaging_v1_model_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{4}
}

func (x *Cursor) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Content for a chat message
type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Content_Text
	//	*Content_Localized
	//	*Content_NaclBox
	Type isContent_Type `protobuf_oneof:"type"`
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_messaging_v1_model_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{5}
}

func (m *Content) GetType() isContent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Content) GetText() *TextContent {
	if x, ok := x.GetType().(*Content_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Content) GetLocalized() *LocalizedContent {
	if x, ok := x.GetType().(*Content_Localized); ok {
		return x.Localized
	}
	return nil
}

func (x *Content) GetNaclBox() *NaclBoxEncryptedContent {
	if x, ok := x.GetType().(*Content_NaclBox); ok {
		return x.NaclBox
	}
	return nil
}

type isContent_Type interface {
	isContent_Type()
}

type Content_Text struct {
	Text *TextContent `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Content_Localized struct {
	Localized *LocalizedContent `protobuf:"bytes,2,opt,name=localized,proto3,oneof"`
}

type Content_NaclBox struct {
	// ExchangeDataContent     exchange_data     = 3;
	NaclBox *NaclBoxEncryptedContent `protobuf:"bytes,4,opt,name=nacl_box,json=naclBox,proto3,oneof"`
}

func (*Content_Text) isContent_Type() {}

func (*Content_Localized) isContent_Type() {}

func (*Content_NaclBox) isContent_Type() {}

// Raw text content
type TextContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextContent) Reset() {
	*x = TextContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextContent) ProtoMessage() {}

func (x *TextContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextContent.ProtoReflect.Descriptor instead.
func (*TextContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{6}
}

func (x *TextContent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Text content that is either a localization key that should be translated on
// client, or a server-side translated piece of text.
type LocalizedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyOrText string `protobuf:"bytes,1,opt,name=key_or_text,json=keyOrText,proto3" json:"key_or_text,omitempty"`
}

func (x *LocalizedContent) Reset() {
	*x = LocalizedContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalizedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedContent) ProtoMessage() {}

func (x *LocalizedContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedContent.ProtoReflect.Descriptor instead.
func (*LocalizedContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{7}
}

func (x *LocalizedContent) GetKeyOrText() string {
	if x != nil {
		return x.KeyOrText
	}
	return ""
}

// Encrypted piece of content using NaCl box encryption
type NaclBoxEncryptedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sender's public key that is used to derive the shared private key for
	// decryption for message content.
	PeerPublicKey *v1.PublicKey `protobuf:"bytes,1,opt,name=peer_public_key,json=peerPublicKey,proto3" json:"peer_public_key,omitempty"`
	// Globally random nonce that is unique to this encrypted piece of content
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The encrypted piece of message content
	EncryptedPayload []byte `protobuf:"bytes,3,opt,name=encrypted_payload,json=encryptedPayload,proto3" json:"encrypted_payload,omitempty"`
}

func (x *NaclBoxEncryptedContent) Reset() {
	*x = NaclBoxEncryptedContent{}
	mi := &file_messaging_v1_model_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaclBoxEncryptedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaclBoxEncryptedContent) ProtoMessage() {}

func (x *NaclBoxEncryptedContent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_model_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaclBoxEncryptedContent.ProtoReflect.Descriptor instead.
func (*NaclBoxEncryptedContent) Descriptor() ([]byte, []int) {
	return file_messaging_v1_model_proto_rawDescGZIP(), []int{8}
}

func (x *NaclBoxEncryptedContent) GetPeerPublicKey() *v1.PublicKey {
	if x != nil {
		return x.PeerPublicKey
	}
	return nil
}

func (x *NaclBoxEncryptedContent) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *NaclBoxEncryptedContent) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

var File_messaging_v1_model_proto protoreflect.FileDescriptor

var file_messaging_v1_model_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x10, 0x18, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc0, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0xc6, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x22, 0x66, 0x0a, 0x08,
	0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x79,
	0x70, 0x69, 0x6e, 0x67, 0x22, 0x29, 0x0a, 0x06, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x7a, 0x04, 0x10, 0x08, 0x18, 0x20, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe6, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x4b,
	0x0a, 0x08, 0x6e, 0x61, 0x63, 0x6c, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x63, 0x6c, 0x42, 0x6f, 0x78,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x63, 0x6c, 0x42, 0x6f, 0x78, 0x42, 0x0b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x2d, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80,
	0x08, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x6b,
	0x65, 0x79, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x09, 0x6b, 0x65,
	0x79, 0x4f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x4e, 0x61, 0x63, 0x6c,
	0x42, 0x6f, 0x78, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x10, 0x18, 0x18, 0x18, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x7a, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x10, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x8f,
	0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x70, 0x62, 0xa2, 0x02,
	0x0f, 0x46, 0x43, 0x50, 0x42, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messaging_v1_model_proto_rawDescOnce sync.Once
	file_messaging_v1_model_proto_rawDescData = file_messaging_v1_model_proto_rawDesc
)

func file_messaging_v1_model_proto_rawDescGZIP() []byte {
	file_messaging_v1_model_proto_rawDescOnce.Do(func() {
		file_messaging_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_messaging_v1_model_proto_rawDescData)
	})
	return file_messaging_v1_model_proto_rawDescData
}

var file_messaging_v1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_messaging_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_messaging_v1_model_proto_goTypes = []any{
	(Pointer_Type)(0),               // 0: flipchat.messaging.v1.Pointer.Type
	(*MessageId)(nil),               // 1: flipchat.messaging.v1.MessageId
	(*Message)(nil),                 // 2: flipchat.messaging.v1.Message
	(*Pointer)(nil),                 // 3: flipchat.messaging.v1.Pointer
	(*IsTyping)(nil),                // 4: flipchat.messaging.v1.IsTyping
	(*Cursor)(nil),                  // 5: flipchat.messaging.v1.Cursor
	(*Content)(nil),                 // 6: flipchat.messaging.v1.Content
	(*TextContent)(nil),             // 7: flipchat.messaging.v1.TextContent
	(*LocalizedContent)(nil),        // 8: flipchat.messaging.v1.LocalizedContent
	(*NaclBoxEncryptedContent)(nil), // 9: flipchat.messaging.v1.NaclBoxEncryptedContent
	(*v1.UserId)(nil),               // 10: flipchat.common.v1.UserId
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
	(*v1.PublicKey)(nil),            // 12: flipchat.common.v1.PublicKey
}
var file_messaging_v1_model_proto_depIdxs = []int32{
	1,  // 0: flipchat.messaging.v1.Message.message_id:type_name -> flipchat.messaging.v1.MessageId
	10, // 1: flipchat.messaging.v1.Message.sender_id:type_name -> flipchat.common.v1.UserId
	6,  // 2: flipchat.messaging.v1.Message.content:type_name -> flipchat.messaging.v1.Content
	11, // 3: flipchat.messaging.v1.Message.ts:type_name -> google.protobuf.Timestamp
	5,  // 4: flipchat.messaging.v1.Message.cursor:type_name -> flipchat.messaging.v1.Cursor
	0,  // 5: flipchat.messaging.v1.Pointer.type:type_name -> flipchat.messaging.v1.Pointer.Type
	1,  // 6: flipchat.messaging.v1.Pointer.value:type_name -> flipchat.messaging.v1.MessageId
	10, // 7: flipchat.messaging.v1.IsTyping.user_id:type_name -> flipchat.common.v1.UserId
	7,  // 8: flipchat.messaging.v1.Content.text:type_name -> flipchat.messaging.v1.TextContent
	8,  // 9: flipchat.messaging.v1.Content.localized:type_name -> flipchat.messaging.v1.LocalizedContent
	9,  // 10: flipchat.messaging.v1.Content.nacl_box:type_name -> flipchat.messaging.v1.NaclBoxEncryptedContent
	12, // 11: flipchat.messaging.v1.NaclBoxEncryptedContent.peer_public_key:type_name -> flipchat.common.v1.PublicKey
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_messaging_v1_model_proto_init() }
func file_messaging_v1_model_proto_init() {
	if File_messaging_v1_model_proto != nil {
		return
	}
	file_messaging_v1_model_proto_msgTypes[5].OneofWrappers = []any{
		(*Content_Text)(nil),
		(*Content_Localized)(nil),
		(*Content_NaclBox)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messaging_v1_model_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messaging_v1_model_proto_goTypes,
		DependencyIndexes: file_messaging_v1_model_proto_depIdxs,
		EnumInfos:         file_messaging_v1_model_proto_enumTypes,
		MessageInfos:      file_messaging_v1_model_proto_msgTypes,
	}.Build()
	File_messaging_v1_model_proto = out.File
	file_messaging_v1_model_proto_rawDesc = nil
	file_messaging_v1_model_proto_goTypes = nil
	file_messaging_v1_model_proto_depIdxs = nil
}
