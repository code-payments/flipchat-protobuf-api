// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: messaging/v1/messaging_service.proto

package messagingpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StreamMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamMessagesRequestMultiError, or nil if none found.
func (m *StreamMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *StreamMessagesRequest_Params_:
		if v == nil {
			err := StreamMessagesRequestValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMessagesRequestValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMessagesRequestValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMessagesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamMessagesRequest_Pong:
		if v == nil {
			err := StreamMessagesRequestValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPong()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMessagesRequestValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMessagesRequestValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMessagesRequestValidationError{
					field:  "Pong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := StreamMessagesRequestValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StreamMessagesRequestMultiError(errors)
	}

	return nil
}

// StreamMessagesRequestMultiError is an error wrapping multiple validation
// errors returned by StreamMessagesRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMessagesRequestMultiError) AllErrors() []error { return m }

// StreamMessagesRequestValidationError is the validation error returned by
// StreamMessagesRequest.Validate if the designated constraints aren't met.
type StreamMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMessagesRequestValidationError) ErrorName() string {
	return "StreamMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMessagesRequestValidationError{}

// Validate checks the field values on StreamMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamMessagesResponseMultiError, or nil if none found.
func (m *StreamMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *StreamMessagesResponse_Ping:
		if v == nil {
			err := StreamMessagesResponseValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPing()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMessagesResponseValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMessagesResponseValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMessagesResponseValidationError{
					field:  "Ping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamMessagesResponse_Error:
		if v == nil {
			err := StreamMessagesResponseValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMessagesResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMessagesResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMessagesResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamMessagesResponse_Messages:
		if v == nil {
			err := StreamMessagesResponseValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetMessages()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMessagesResponseValidationError{
						field:  "Messages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMessagesResponseValidationError{
						field:  "Messages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessages()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMessagesResponseValidationError{
					field:  "Messages",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := StreamMessagesResponseValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StreamMessagesResponseMultiError(errors)
	}

	return nil
}

// StreamMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by StreamMessagesResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMessagesResponseMultiError) AllErrors() []error { return m }

// StreamMessagesResponseValidationError is the validation error returned by
// StreamMessagesResponse.Validate if the designated constraints aren't met.
type StreamMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMessagesResponseValidationError) ErrorName() string {
	return "StreamMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMessagesResponseValidationError{}

// Validate checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessagesRequestMultiError, or nil if none found.
func (m *GetMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := GetMessagesRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQueryOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "QueryOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "QueryOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "QueryOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMessagesRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMessagesRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMessagesRequestMultiError(errors)
	}

	return nil
}

// GetMessagesRequestMultiError is an error wrapping multiple validation errors
// returned by GetMessagesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessagesRequestMultiError) AllErrors() []error { return m }

// GetMessagesRequestValidationError is the validation error returned by
// GetMessagesRequest.Validate if the designated constraints aren't met.
type GetMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesRequestValidationError) ErrorName() string {
	return "GetMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesRequestValidationError{}

// Validate checks the field values on GetMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessagesResponseMultiError, or nil if none found.
func (m *GetMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(m.GetMessages()) > 100 {
		err := GetMessagesResponseValidationError{
			field:  "Messages",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMessagesResponseMultiError(errors)
	}

	return nil
}

// GetMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by GetMessagesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessagesResponseMultiError) AllErrors() []error { return m }

// GetMessagesResponseValidationError is the validation error returned by
// GetMessagesResponse.Validate if the designated constraints aren't met.
type GetMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessagesResponseValidationError) ErrorName() string {
	return "GetMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessagesResponseValidationError{}

// Validate checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageRequestMultiError, or nil if none found.
func (m *SendMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := SendMessageRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetContent()) != 1 {
		err := SendMessageRequestValidationError{
			field:  "Content",
			reason: "value must contain exactly 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendMessageRequestValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendMessageRequestValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMessageRequestValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetAuth() == nil {
		err := SendMessageRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMessageRequestMultiError(errors)
	}

	return nil
}

// SendMessageRequestMultiError is an error wrapping multiple validation errors
// returned by SendMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type SendMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageRequestMultiError) AllErrors() []error { return m }

// SendMessageRequestValidationError is the validation error returned by
// SendMessageRequest.Validate if the designated constraints aren't met.
type SendMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageRequestValidationError) ErrorName() string {
	return "SendMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageRequestValidationError{}

// Validate checks the field values on SendMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageResponseMultiError, or nil if none found.
func (m *SendMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMessageResponseMultiError(errors)
	}

	return nil
}

// SendMessageResponseMultiError is an error wrapping multiple validation
// errors returned by SendMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type SendMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageResponseMultiError) AllErrors() []error { return m }

// SendMessageResponseValidationError is the validation error returned by
// SendMessageResponse.Validate if the designated constraints aren't met.
type SendMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageResponseValidationError) ErrorName() string {
	return "SendMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageResponseValidationError{}

// Validate checks the field values on AdvancePointerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvancePointerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvancePointerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvancePointerRequestMultiError, or nil if none found.
func (m *AdvancePointerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvancePointerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := AdvancePointerRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPointer() == nil {
		err := AdvancePointerRequestValidationError{
			field:  "Pointer",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPointer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPointer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "Pointer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := AdvancePointerRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdvancePointerRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdvancePointerRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdvancePointerRequestMultiError(errors)
	}

	return nil
}

// AdvancePointerRequestMultiError is an error wrapping multiple validation
// errors returned by AdvancePointerRequest.ValidateAll() if the designated
// constraints aren't met.
type AdvancePointerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvancePointerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvancePointerRequestMultiError) AllErrors() []error { return m }

// AdvancePointerRequestValidationError is the validation error returned by
// AdvancePointerRequest.Validate if the designated constraints aren't met.
type AdvancePointerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvancePointerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvancePointerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvancePointerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvancePointerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvancePointerRequestValidationError) ErrorName() string {
	return "AdvancePointerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdvancePointerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvancePointerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvancePointerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvancePointerRequestValidationError{}

// Validate checks the field values on AdvancePointerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdvancePointerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvancePointerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvancePointerResponseMultiError, or nil if none found.
func (m *AdvancePointerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvancePointerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AdvancePointerResponseMultiError(errors)
	}

	return nil
}

// AdvancePointerResponseMultiError is an error wrapping multiple validation
// errors returned by AdvancePointerResponse.ValidateAll() if the designated
// constraints aren't met.
type AdvancePointerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvancePointerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvancePointerResponseMultiError) AllErrors() []error { return m }

// AdvancePointerResponseValidationError is the validation error returned by
// AdvancePointerResponse.Validate if the designated constraints aren't met.
type AdvancePointerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvancePointerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvancePointerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvancePointerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvancePointerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvancePointerResponseValidationError) ErrorName() string {
	return "AdvancePointerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdvancePointerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvancePointerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvancePointerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvancePointerResponseValidationError{}

// Validate checks the field values on NotifyIsTypingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyIsTypingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyIsTypingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyIsTypingRequestMultiError, or nil if none found.
func (m *NotifyIsTypingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyIsTypingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := NotifyIsTypingRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyIsTypingRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyIsTypingRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyIsTypingRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsTyping

	if m.GetAuth() == nil {
		err := NotifyIsTypingRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyIsTypingRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyIsTypingRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyIsTypingRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifyIsTypingRequestMultiError(errors)
	}

	return nil
}

// NotifyIsTypingRequestMultiError is an error wrapping multiple validation
// errors returned by NotifyIsTypingRequest.ValidateAll() if the designated
// constraints aren't met.
type NotifyIsTypingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyIsTypingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyIsTypingRequestMultiError) AllErrors() []error { return m }

// NotifyIsTypingRequestValidationError is the validation error returned by
// NotifyIsTypingRequest.Validate if the designated constraints aren't met.
type NotifyIsTypingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyIsTypingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyIsTypingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyIsTypingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyIsTypingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyIsTypingRequestValidationError) ErrorName() string {
	return "NotifyIsTypingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyIsTypingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyIsTypingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyIsTypingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyIsTypingRequestValidationError{}

// Validate checks the field values on NotifyIsTypingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyIsTypingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyIsTypingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyIsTypingResponseMultiError, or nil if none found.
func (m *NotifyIsTypingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyIsTypingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return NotifyIsTypingResponseMultiError(errors)
	}

	return nil
}

// NotifyIsTypingResponseMultiError is an error wrapping multiple validation
// errors returned by NotifyIsTypingResponse.ValidateAll() if the designated
// constraints aren't met.
type NotifyIsTypingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyIsTypingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyIsTypingResponseMultiError) AllErrors() []error { return m }

// NotifyIsTypingResponseValidationError is the validation error returned by
// NotifyIsTypingResponse.Validate if the designated constraints aren't met.
type NotifyIsTypingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyIsTypingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyIsTypingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyIsTypingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyIsTypingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyIsTypingResponseValidationError) ErrorName() string {
	return "NotifyIsTypingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyIsTypingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyIsTypingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyIsTypingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyIsTypingResponseValidationError{}

// Validate checks the field values on StreamMessagesRequest_Params with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMessagesRequest_Params) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMessagesRequest_Params with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamMessagesRequest_ParamsMultiError, or nil if none found.
func (m *StreamMessagesRequest_Params) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMessagesRequest_Params) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := StreamMessagesRequest_ParamsValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamMessagesRequest_ParamsValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamMessagesRequest_ParamsValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamMessagesRequest_ParamsValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamMessagesRequest_ParamsValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamMessagesRequest_ParamsValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamMessagesRequest_ParamsValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Resume.(type) {
	case *StreamMessagesRequest_Params_LastKnownMessageId:
		if v == nil {
			err := StreamMessagesRequest_ParamsValidationError{
				field:  "Resume",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLastKnownMessageId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMessagesRequest_ParamsValidationError{
						field:  "LastKnownMessageId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMessagesRequest_ParamsValidationError{
						field:  "LastKnownMessageId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLastKnownMessageId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMessagesRequest_ParamsValidationError{
					field:  "LastKnownMessageId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamMessagesRequest_Params_LatestOnly:
		if v == nil {
			err := StreamMessagesRequest_ParamsValidationError{
				field:  "Resume",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LatestOnly
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StreamMessagesRequest_ParamsMultiError(errors)
	}

	return nil
}

// StreamMessagesRequest_ParamsMultiError is an error wrapping multiple
// validation errors returned by StreamMessagesRequest_Params.ValidateAll() if
// the designated constraints aren't met.
type StreamMessagesRequest_ParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMessagesRequest_ParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMessagesRequest_ParamsMultiError) AllErrors() []error { return m }

// StreamMessagesRequest_ParamsValidationError is the validation error returned
// by StreamMessagesRequest_Params.Validate if the designated constraints
// aren't met.
type StreamMessagesRequest_ParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMessagesRequest_ParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMessagesRequest_ParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMessagesRequest_ParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMessagesRequest_ParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMessagesRequest_ParamsValidationError) ErrorName() string {
	return "StreamMessagesRequest_ParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMessagesRequest_ParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMessagesRequest_Params.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMessagesRequest_ParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMessagesRequest_ParamsValidationError{}

// Validate checks the field values on StreamMessagesResponse_StreamError with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamMessagesResponse_StreamError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMessagesResponse_StreamError
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamMessagesResponse_StreamErrorMultiError, or nil if none found.
func (m *StreamMessagesResponse_StreamError) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMessagesResponse_StreamError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return StreamMessagesResponse_StreamErrorMultiError(errors)
	}

	return nil
}

// StreamMessagesResponse_StreamErrorMultiError is an error wrapping multiple
// validation errors returned by
// StreamMessagesResponse_StreamError.ValidateAll() if the designated
// constraints aren't met.
type StreamMessagesResponse_StreamErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMessagesResponse_StreamErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMessagesResponse_StreamErrorMultiError) AllErrors() []error { return m }

// StreamMessagesResponse_StreamErrorValidationError is the validation error
// returned by StreamMessagesResponse_StreamError.Validate if the designated
// constraints aren't met.
type StreamMessagesResponse_StreamErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMessagesResponse_StreamErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMessagesResponse_StreamErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMessagesResponse_StreamErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMessagesResponse_StreamErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMessagesResponse_StreamErrorValidationError) ErrorName() string {
	return "StreamMessagesResponse_StreamErrorValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMessagesResponse_StreamErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMessagesResponse_StreamError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMessagesResponse_StreamErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMessagesResponse_StreamErrorValidationError{}

// Validate checks the field values on StreamMessagesResponse_MessageBatch with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamMessagesResponse_MessageBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMessagesResponse_MessageBatch
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamMessagesResponse_MessageBatchMultiError, or nil if none found.
func (m *StreamMessagesResponse_MessageBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMessagesResponse_MessageBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetMessages()); l < 1 || l > 1024 {
		err := StreamMessagesResponse_MessageBatchValidationError{
			field:  "Messages",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMessagesResponse_MessageBatchValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMessagesResponse_MessageBatchValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMessagesResponse_MessageBatchValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamMessagesResponse_MessageBatchMultiError(errors)
	}

	return nil
}

// StreamMessagesResponse_MessageBatchMultiError is an error wrapping multiple
// validation errors returned by
// StreamMessagesResponse_MessageBatch.ValidateAll() if the designated
// constraints aren't met.
type StreamMessagesResponse_MessageBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMessagesResponse_MessageBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMessagesResponse_MessageBatchMultiError) AllErrors() []error { return m }

// StreamMessagesResponse_MessageBatchValidationError is the validation error
// returned by StreamMessagesResponse_MessageBatch.Validate if the designated
// constraints aren't met.
type StreamMessagesResponse_MessageBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMessagesResponse_MessageBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMessagesResponse_MessageBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMessagesResponse_MessageBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMessagesResponse_MessageBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMessagesResponse_MessageBatchValidationError) ErrorName() string {
	return "StreamMessagesResponse_MessageBatchValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMessagesResponse_MessageBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMessagesResponse_MessageBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMessagesResponse_MessageBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMessagesResponse_MessageBatchValidationError{}
