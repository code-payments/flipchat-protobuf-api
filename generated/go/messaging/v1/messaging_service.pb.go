// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: messaging/v1/messaging_service.proto

package messagingpb

import (
	v1 "github.com/code-payments/flipchat-protobuf-api/generated/go/common/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamMessagesResponse_StreamError_Code int32

const (
	StreamMessagesResponse_StreamError_DENIED StreamMessagesResponse_StreamError_Code = 0
)

// Enum value maps for StreamMessagesResponse_StreamError_Code.
var (
	StreamMessagesResponse_StreamError_Code_name = map[int32]string{
		0: "DENIED",
	}
	StreamMessagesResponse_StreamError_Code_value = map[string]int32{
		"DENIED": 0,
	}
)

func (x StreamMessagesResponse_StreamError_Code) Enum() *StreamMessagesResponse_StreamError_Code {
	p := new(StreamMessagesResponse_StreamError_Code)
	*p = x
	return p
}

func (x StreamMessagesResponse_StreamError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamMessagesResponse_StreamError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[0].Descriptor()
}

func (StreamMessagesResponse_StreamError_Code) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[0]
}

func (x StreamMessagesResponse_StreamError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamMessagesResponse_StreamError_Code.Descriptor instead.
func (StreamMessagesResponse_StreamError_Code) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{1, 0, 0}
}

type GetMessageResponse_Result int32

const (
	GetMessageResponse_OK        GetMessageResponse_Result = 0
	GetMessageResponse_DENIED    GetMessageResponse_Result = 1
	GetMessageResponse_NOT_FOUND GetMessageResponse_Result = 2
)

// Enum value maps for GetMessageResponse_Result.
var (
	GetMessageResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "NOT_FOUND",
	}
	GetMessageResponse_Result_value = map[string]int32{
		"OK":        0,
		"DENIED":    1,
		"NOT_FOUND": 2,
	}
)

func (x GetMessageResponse_Result) Enum() *GetMessageResponse_Result {
	p := new(GetMessageResponse_Result)
	*p = x
	return p
}

func (x GetMessageResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMessageResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[1].Descriptor()
}

func (GetMessageResponse_Result) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[1]
}

func (x GetMessageResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMessageResponse_Result.Descriptor instead.
func (GetMessageResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetMessagesResponse_Result int32

const (
	GetMessagesResponse_OK     GetMessagesResponse_Result = 0
	GetMessagesResponse_DENIED GetMessagesResponse_Result = 1
)

// Enum value maps for GetMessagesResponse_Result.
var (
	GetMessagesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	GetMessagesResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x GetMessagesResponse_Result) Enum() *GetMessagesResponse_Result {
	p := new(GetMessagesResponse_Result)
	*p = x
	return p
}

func (x GetMessagesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMessagesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[2].Descriptor()
}

func (GetMessagesResponse_Result) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[2]
}

func (x GetMessagesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMessagesResponse_Result.Descriptor instead.
func (GetMessagesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{5, 0}
}

type SendMessageResponse_Result int32

const (
	SendMessageResponse_OK     SendMessageResponse_Result = 0
	SendMessageResponse_DENIED SendMessageResponse_Result = 1
)

// Enum value maps for SendMessageResponse_Result.
var (
	SendMessageResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	SendMessageResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x SendMessageResponse_Result) Enum() *SendMessageResponse_Result {
	p := new(SendMessageResponse_Result)
	*p = x
	return p
}

func (x SendMessageResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMessageResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[3].Descriptor()
}

func (SendMessageResponse_Result) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[3]
}

func (x SendMessageResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMessageResponse_Result.Descriptor instead.
func (SendMessageResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{7, 0}
}

type AdvancePointerResponse_Result int32

const (
	AdvancePointerResponse_OK                AdvancePointerResponse_Result = 0
	AdvancePointerResponse_DENIED            AdvancePointerResponse_Result = 1
	AdvancePointerResponse_MESSAGE_NOT_FOUND AdvancePointerResponse_Result = 2
)

// Enum value maps for AdvancePointerResponse_Result.
var (
	AdvancePointerResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "MESSAGE_NOT_FOUND",
	}
	AdvancePointerResponse_Result_value = map[string]int32{
		"OK":                0,
		"DENIED":            1,
		"MESSAGE_NOT_FOUND": 2,
	}
)

func (x AdvancePointerResponse_Result) Enum() *AdvancePointerResponse_Result {
	p := new(AdvancePointerResponse_Result)
	*p = x
	return p
}

func (x AdvancePointerResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvancePointerResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[4].Descriptor()
}

func (AdvancePointerResponse_Result) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[4]
}

func (x AdvancePointerResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvancePointerResponse_Result.Descriptor instead.
func (AdvancePointerResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{10, 0}
}

type NotifyIsTypingResponse_Result int32

const (
	NotifyIsTypingResponse_OK     NotifyIsTypingResponse_Result = 0
	NotifyIsTypingResponse_DENIED NotifyIsTypingResponse_Result = 1
)

// Enum value maps for NotifyIsTypingResponse_Result.
var (
	NotifyIsTypingResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	NotifyIsTypingResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x NotifyIsTypingResponse_Result) Enum() *NotifyIsTypingResponse_Result {
	p := new(NotifyIsTypingResponse_Result)
	*p = x
	return p
}

func (x NotifyIsTypingResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifyIsTypingResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[5].Descriptor()
}

func (NotifyIsTypingResponse_Result) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[5]
}

func (x NotifyIsTypingResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifyIsTypingResponse_Result.Descriptor instead.
func (NotifyIsTypingResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{12, 0}
}

type DeleteMessageResponse_Result int32

const (
	DeleteMessageResponse_OK     DeleteMessageResponse_Result = 0
	DeleteMessageResponse_DENIED DeleteMessageResponse_Result = 1
)

// Enum value maps for DeleteMessageResponse_Result.
var (
	DeleteMessageResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	DeleteMessageResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x DeleteMessageResponse_Result) Enum() *DeleteMessageResponse_Result {
	p := new(DeleteMessageResponse_Result)
	*p = x
	return p
}

func (x DeleteMessageResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteMessageResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v1_messaging_service_proto_enumTypes[6].Descriptor()
}

func (DeleteMessageResponse_Result) Type() protoreflect.EnumType {
	return &file_messaging_v1_messaging_service_proto_enumTypes[6]
}

func (x DeleteMessageResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteMessageResponse_Result.Descriptor instead.
func (DeleteMessageResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{14, 0}
}

type StreamMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamMessagesRequest_Params_
	//	*StreamMessagesRequest_Pong
	Type isStreamMessagesRequest_Type `protobuf_oneof:"type"`
}

func (x *StreamMessagesRequest) Reset() {
	*x = StreamMessagesRequest{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessagesRequest) ProtoMessage() {}

func (x *StreamMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessagesRequest.ProtoReflect.Descriptor instead.
func (*StreamMessagesRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{0}
}

func (m *StreamMessagesRequest) GetType() isStreamMessagesRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamMessagesRequest) GetParams() *StreamMessagesRequest_Params {
	if x, ok := x.GetType().(*StreamMessagesRequest_Params_); ok {
		return x.Params
	}
	return nil
}

func (x *StreamMessagesRequest) GetPong() *v1.ClientPong {
	if x, ok := x.GetType().(*StreamMessagesRequest_Pong); ok {
		return x.Pong
	}
	return nil
}

type isStreamMessagesRequest_Type interface {
	isStreamMessagesRequest_Type()
}

type StreamMessagesRequest_Params_ struct {
	Params *StreamMessagesRequest_Params `protobuf:"bytes,1,opt,name=params,proto3,oneof"`
}

type StreamMessagesRequest_Pong struct {
	Pong *v1.ClientPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

func (*StreamMessagesRequest_Params_) isStreamMessagesRequest_Type() {}

func (*StreamMessagesRequest_Pong) isStreamMessagesRequest_Type() {}

type StreamMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamMessagesResponse_Ping
	//	*StreamMessagesResponse_Error
	//	*StreamMessagesResponse_Messages
	Type isStreamMessagesResponse_Type `protobuf_oneof:"type"`
}

func (x *StreamMessagesResponse) Reset() {
	*x = StreamMessagesResponse{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessagesResponse) ProtoMessage() {}

func (x *StreamMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessagesResponse.ProtoReflect.Descriptor instead.
func (*StreamMessagesResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{1}
}

func (m *StreamMessagesResponse) GetType() isStreamMessagesResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamMessagesResponse) GetPing() *v1.ServerPing {
	if x, ok := x.GetType().(*StreamMessagesResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *StreamMessagesResponse) GetError() *StreamMessagesResponse_StreamError {
	if x, ok := x.GetType().(*StreamMessagesResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StreamMessagesResponse) GetMessages() *StreamMessagesResponse_MessageBatch {
	if x, ok := x.GetType().(*StreamMessagesResponse_Messages); ok {
		return x.Messages
	}
	return nil
}

type isStreamMessagesResponse_Type interface {
	isStreamMessagesResponse_Type()
}

type StreamMessagesResponse_Ping struct {
	Ping *v1.ServerPing `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type StreamMessagesResponse_Error struct {
	Error *StreamMessagesResponse_StreamError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type StreamMessagesResponse_Messages struct {
	Messages *StreamMessagesResponse_MessageBatch `protobuf:"bytes,3,opt,name=messages,proto3,oneof"`
}

func (*StreamMessagesResponse_Ping) isStreamMessagesResponse_Type() {}

func (*StreamMessagesResponse_Error) isStreamMessagesResponse_Type() {}

func (*StreamMessagesResponse_Messages) isStreamMessagesResponse_Type() {}

type GetMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MessageId *MessageId `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Auth      *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetMessageRequest) Reset() {
	*x = GetMessageRequest{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageRequest) ProtoMessage() {}

func (x *GetMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageRequest.ProtoReflect.Descriptor instead.
func (*GetMessageRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetMessageRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GetMessageRequest) GetMessageId() *MessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *GetMessageRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  GetMessageResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.messaging.v1.GetMessageResponse_Result" json:"result,omitempty"`
	Message *Message                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetMessageResponse) Reset() {
	*x = GetMessageResponse{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageResponse) ProtoMessage() {}

func (x *GetMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageResponse.ProtoReflect.Descriptor instead.
func (*GetMessageResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetMessageResponse) GetResult() GetMessageResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetMessageResponse_OK
}

func (x *GetMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type GetMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId       *v1.ChatId       `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	QueryOptions *v1.QueryOptions `protobuf:"bytes,2,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
	Auth         *v1.Auth         `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetMessagesRequest) Reset() {
	*x = GetMessagesRequest{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesRequest) ProtoMessage() {}

func (x *GetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetMessagesRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GetMessagesRequest) GetQueryOptions() *v1.QueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

func (x *GetMessagesRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   GetMessagesResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.messaging.v1.GetMessagesResponse_Result" json:"result,omitempty"`
	Messages []*Message                 `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *GetMessagesResponse) Reset() {
	*x = GetMessagesResponse{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesResponse) ProtoMessage() {}

func (x *GetMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesResponse.ProtoReflect.Descriptor instead.
func (*GetMessagesResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetMessagesResponse) GetResult() GetMessagesResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetMessagesResponse_OK
}

func (x *GetMessagesResponse) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Allowed content types that can be sent by client:
	//   - TextContent
	//   - ReactionContent
	//   - ReplyContent
	//   - TipContent
	Content []*Content `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
	Auth    *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	// Intent ID for message contents that require a payment
	PaymentIntent *v1.IntentId `protobuf:"bytes,4,opt,name=payment_intent,json=paymentIntent,proto3" json:"payment_intent,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{6}
}

func (x *SendMessageRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SendMessageRequest) GetContent() []*Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SendMessageRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SendMessageRequest) GetPaymentIntent() *v1.IntentId {
	if x != nil {
		return x.PaymentIntent
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SendMessageResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.messaging.v1.SendMessageResponse_Result" json:"result,omitempty"`
	// The chat message that was sent if the RPC was succesful, which includes
	// server-side metadata like the generated message ID and official timestamp
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{7}
}

func (x *SendMessageResponse) GetResult() SendMessageResponse_Result {
	if x != nil {
		return x.Result
	}
	return SendMessageResponse_OK
}

func (x *SendMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type SendTipMessagePaymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chat where the message is being tipped
	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// The message that is being tipped
	MessageId *MessageId `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SendTipMessagePaymentMetadata) Reset() {
	*x = SendTipMessagePaymentMetadata{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTipMessagePaymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTipMessagePaymentMetadata) ProtoMessage() {}

func (x *SendTipMessagePaymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTipMessagePaymentMetadata.ProtoReflect.Descriptor instead.
func (*SendTipMessagePaymentMetadata) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{8}
}

func (x *SendTipMessagePaymentMetadata) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SendTipMessagePaymentMetadata) GetMessageId() *MessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

type AdvancePointerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId  *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Pointer *Pointer   `protobuf:"bytes,2,opt,name=pointer,proto3" json:"pointer,omitempty"`
	Auth    *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *AdvancePointerRequest) Reset() {
	*x = AdvancePointerRequest{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancePointerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancePointerRequest) ProtoMessage() {}

func (x *AdvancePointerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancePointerRequest.ProtoReflect.Descriptor instead.
func (*AdvancePointerRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{9}
}

func (x *AdvancePointerRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *AdvancePointerRequest) GetPointer() *Pointer {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *AdvancePointerRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type AdvancePointerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AdvancePointerResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.messaging.v1.AdvancePointerResponse_Result" json:"result,omitempty"`
}

func (x *AdvancePointerResponse) Reset() {
	*x = AdvancePointerResponse{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancePointerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancePointerResponse) ProtoMessage() {}

func (x *AdvancePointerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancePointerResponse.ProtoReflect.Descriptor instead.
func (*AdvancePointerResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{10}
}

func (x *AdvancePointerResponse) GetResult() AdvancePointerResponse_Result {
	if x != nil {
		return x.Result
	}
	return AdvancePointerResponse_OK
}

type NotifyIsTypingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId   *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	IsTyping bool       `protobuf:"varint,2,opt,name=is_typing,json=isTyping,proto3" json:"is_typing,omitempty"`
	Auth     *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *NotifyIsTypingRequest) Reset() {
	*x = NotifyIsTypingRequest{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyIsTypingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyIsTypingRequest) ProtoMessage() {}

func (x *NotifyIsTypingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyIsTypingRequest.ProtoReflect.Descriptor instead.
func (*NotifyIsTypingRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{11}
}

func (x *NotifyIsTypingRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *NotifyIsTypingRequest) GetIsTyping() bool {
	if x != nil {
		return x.IsTyping
	}
	return false
}

func (x *NotifyIsTypingRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type NotifyIsTypingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result NotifyIsTypingResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.messaging.v1.NotifyIsTypingResponse_Result" json:"result,omitempty"`
}

func (x *NotifyIsTypingResponse) Reset() {
	*x = NotifyIsTypingResponse{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyIsTypingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyIsTypingResponse) ProtoMessage() {}

func (x *NotifyIsTypingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyIsTypingResponse.ProtoReflect.Descriptor instead.
func (*NotifyIsTypingResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{12}
}

func (x *NotifyIsTypingResponse) GetResult() NotifyIsTypingResponse_Result {
	if x != nil {
		return x.Result
	}
	return NotifyIsTypingResponse_OK
}

type DeleteMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *MessageId `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Auth      *v1.Auth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *DeleteMessageRequest) Reset() {
	*x = DeleteMessageRequest{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageRequest) ProtoMessage() {}

func (x *DeleteMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteMessageRequest) GetMessageId() *MessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *DeleteMessageRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type DeleteMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result DeleteMessageResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.messaging.v1.DeleteMessageResponse_Result" json:"result,omitempty"`
}

func (x *DeleteMessageResponse) Reset() {
	*x = DeleteMessageResponse{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageResponse) ProtoMessage() {}

func (x *DeleteMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageResponse.ProtoReflect.Descriptor instead.
func (*DeleteMessageResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteMessageResponse) GetResult() DeleteMessageResponse_Result {
	if x != nil {
		return x.Result
	}
	return DeleteMessageResponse_OK
}

type StreamMessagesRequest_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Deprecated: stream flushes are no longer supported
	//
	// Types that are assignable to Resume:
	//
	//	*StreamMessagesRequest_Params_LastKnownMessageId
	//	*StreamMessagesRequest_Params_LatestOnly
	Resume isStreamMessagesRequest_Params_Resume `protobuf_oneof:"resume"`
	Auth   *v1.Auth                              `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *StreamMessagesRequest_Params) Reset() {
	*x = StreamMessagesRequest_Params{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessagesRequest_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessagesRequest_Params) ProtoMessage() {}

func (x *StreamMessagesRequest_Params) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessagesRequest_Params.ProtoReflect.Descriptor instead.
func (*StreamMessagesRequest_Params) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StreamMessagesRequest_Params) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (m *StreamMessagesRequest_Params) GetResume() isStreamMessagesRequest_Params_Resume {
	if m != nil {
		return m.Resume
	}
	return nil
}

func (x *StreamMessagesRequest_Params) GetLastKnownMessageId() *MessageId {
	if x, ok := x.GetResume().(*StreamMessagesRequest_Params_LastKnownMessageId); ok {
		return x.LastKnownMessageId
	}
	return nil
}

func (x *StreamMessagesRequest_Params) GetLatestOnly() bool {
	if x, ok := x.GetResume().(*StreamMessagesRequest_Params_LatestOnly); ok {
		return x.LatestOnly
	}
	return false
}

func (x *StreamMessagesRequest_Params) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type isStreamMessagesRequest_Params_Resume interface {
	isStreamMessagesRequest_Params_Resume()
}

type StreamMessagesRequest_Params_LastKnownMessageId struct {
	LastKnownMessageId *MessageId `protobuf:"bytes,2,opt,name=last_known_message_id,json=lastKnownMessageId,proto3,oneof"`
}

type StreamMessagesRequest_Params_LatestOnly struct {
	LatestOnly bool `protobuf:"varint,3,opt,name=latest_only,json=latestOnly,proto3,oneof"`
}

func (*StreamMessagesRequest_Params_LastKnownMessageId) isStreamMessagesRequest_Params_Resume() {}

func (*StreamMessagesRequest_Params_LatestOnly) isStreamMessagesRequest_Params_Resume() {}

type StreamMessagesResponse_StreamError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code StreamMessagesResponse_StreamError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=flipchat.messaging.v1.StreamMessagesResponse_StreamError_Code" json:"code,omitempty"`
}

func (x *StreamMessagesResponse_StreamError) Reset() {
	*x = StreamMessagesResponse_StreamError{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessagesResponse_StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessagesResponse_StreamError) ProtoMessage() {}

func (x *StreamMessagesResponse_StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessagesResponse_StreamError.ProtoReflect.Descriptor instead.
func (*StreamMessagesResponse_StreamError) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StreamMessagesResponse_StreamError) GetCode() StreamMessagesResponse_StreamError_Code {
	if x != nil {
		return x.Code
	}
	return StreamMessagesResponse_StreamError_DENIED
}

type StreamMessagesResponse_MessageBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *StreamMessagesResponse_MessageBatch) Reset() {
	*x = StreamMessagesResponse_MessageBatch{}
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessagesResponse_MessageBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessagesResponse_MessageBatch) ProtoMessage() {}

func (x *StreamMessagesResponse_MessageBatch) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v1_messaging_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessagesResponse_MessageBatch.ProtoReflect.Descriptor instead.
func (*StreamMessagesResponse_MessageBatch) Descriptor() ([]byte, []int) {
	return file_messaging_v1_messaging_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StreamMessagesResponse_MessageBatch) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

var File_messaging_v1_messaging_service_proto protoreflect.FileDescriptor

var file_messaging_v1_messaging_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x03, 0x0a, 0x15, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x1a, 0xf9, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0xd8, 0x03, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x51, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x75,
	0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x57, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08,
	0x01, 0x10, 0x80, 0x08, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xc7, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x47, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x00, 0x10, 0x80, 0x08, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x96, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22,
	0xb8, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1c, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x9b, 0x01, 0x0a, 0x16,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x33, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xab, 0x01, 0x0a, 0x15, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x99,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x32,
	0xf7, 0x05, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x61, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x2c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d,
	0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49,
	0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x73, 0x54,
	0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x8f, 0x01, 0x0a, 0x25, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x70, 0x62, 0xa2, 0x02, 0x0f, 0x46, 0x43, 0x50, 0x42,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_messaging_v1_messaging_service_proto_rawDescOnce sync.Once
	file_messaging_v1_messaging_service_proto_rawDescData = file_messaging_v1_messaging_service_proto_rawDesc
)

func file_messaging_v1_messaging_service_proto_rawDescGZIP() []byte {
	file_messaging_v1_messaging_service_proto_rawDescOnce.Do(func() {
		file_messaging_v1_messaging_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_messaging_v1_messaging_service_proto_rawDescData)
	})
	return file_messaging_v1_messaging_service_proto_rawDescData
}

var file_messaging_v1_messaging_service_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_messaging_v1_messaging_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_messaging_v1_messaging_service_proto_goTypes = []any{
	(StreamMessagesResponse_StreamError_Code)(0), // 0: flipchat.messaging.v1.StreamMessagesResponse.StreamError.Code
	(GetMessageResponse_Result)(0),               // 1: flipchat.messaging.v1.GetMessageResponse.Result
	(GetMessagesResponse_Result)(0),              // 2: flipchat.messaging.v1.GetMessagesResponse.Result
	(SendMessageResponse_Result)(0),              // 3: flipchat.messaging.v1.SendMessageResponse.Result
	(AdvancePointerResponse_Result)(0),           // 4: flipchat.messaging.v1.AdvancePointerResponse.Result
	(NotifyIsTypingResponse_Result)(0),           // 5: flipchat.messaging.v1.NotifyIsTypingResponse.Result
	(DeleteMessageResponse_Result)(0),            // 6: flipchat.messaging.v1.DeleteMessageResponse.Result
	(*StreamMessagesRequest)(nil),                // 7: flipchat.messaging.v1.StreamMessagesRequest
	(*StreamMessagesResponse)(nil),               // 8: flipchat.messaging.v1.StreamMessagesResponse
	(*GetMessageRequest)(nil),                    // 9: flipchat.messaging.v1.GetMessageRequest
	(*GetMessageResponse)(nil),                   // 10: flipchat.messaging.v1.GetMessageResponse
	(*GetMessagesRequest)(nil),                   // 11: flipchat.messaging.v1.GetMessagesRequest
	(*GetMessagesResponse)(nil),                  // 12: flipchat.messaging.v1.GetMessagesResponse
	(*SendMessageRequest)(nil),                   // 13: flipchat.messaging.v1.SendMessageRequest
	(*SendMessageResponse)(nil),                  // 14: flipchat.messaging.v1.SendMessageResponse
	(*SendTipMessagePaymentMetadata)(nil),        // 15: flipchat.messaging.v1.SendTipMessagePaymentMetadata
	(*AdvancePointerRequest)(nil),                // 16: flipchat.messaging.v1.AdvancePointerRequest
	(*AdvancePointerResponse)(nil),               // 17: flipchat.messaging.v1.AdvancePointerResponse
	(*NotifyIsTypingRequest)(nil),                // 18: flipchat.messaging.v1.NotifyIsTypingRequest
	(*NotifyIsTypingResponse)(nil),               // 19: flipchat.messaging.v1.NotifyIsTypingResponse
	(*DeleteMessageRequest)(nil),                 // 20: flipchat.messaging.v1.DeleteMessageRequest
	(*DeleteMessageResponse)(nil),                // 21: flipchat.messaging.v1.DeleteMessageResponse
	(*StreamMessagesRequest_Params)(nil),         // 22: flipchat.messaging.v1.StreamMessagesRequest.Params
	(*StreamMessagesResponse_StreamError)(nil),   // 23: flipchat.messaging.v1.StreamMessagesResponse.StreamError
	(*StreamMessagesResponse_MessageBatch)(nil),  // 24: flipchat.messaging.v1.StreamMessagesResponse.MessageBatch
	(*v1.ClientPong)(nil),                        // 25: flipchat.common.v1.ClientPong
	(*v1.ServerPing)(nil),                        // 26: flipchat.common.v1.ServerPing
	(*v1.ChatId)(nil),                            // 27: flipchat.common.v1.ChatId
	(*MessageId)(nil),                            // 28: flipchat.messaging.v1.MessageId
	(*v1.Auth)(nil),                              // 29: flipchat.common.v1.Auth
	(*Message)(nil),                              // 30: flipchat.messaging.v1.Message
	(*v1.QueryOptions)(nil),                      // 31: flipchat.common.v1.QueryOptions
	(*Content)(nil),                              // 32: flipchat.messaging.v1.Content
	(*v1.IntentId)(nil),                          // 33: flipchat.common.v1.IntentId
	(*Pointer)(nil),                              // 34: flipchat.messaging.v1.Pointer
}
var file_messaging_v1_messaging_service_proto_depIdxs = []int32{
	22, // 0: flipchat.messaging.v1.StreamMessagesRequest.params:type_name -> flipchat.messaging.v1.StreamMessagesRequest.Params
	25, // 1: flipchat.messaging.v1.StreamMessagesRequest.pong:type_name -> flipchat.common.v1.ClientPong
	26, // 2: flipchat.messaging.v1.StreamMessagesResponse.ping:type_name -> flipchat.common.v1.ServerPing
	23, // 3: flipchat.messaging.v1.StreamMessagesResponse.error:type_name -> flipchat.messaging.v1.StreamMessagesResponse.StreamError
	24, // 4: flipchat.messaging.v1.StreamMessagesResponse.messages:type_name -> flipchat.messaging.v1.StreamMessagesResponse.MessageBatch
	27, // 5: flipchat.messaging.v1.GetMessageRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	28, // 6: flipchat.messaging.v1.GetMessageRequest.message_id:type_name -> flipchat.messaging.v1.MessageId
	29, // 7: flipchat.messaging.v1.GetMessageRequest.auth:type_name -> flipchat.common.v1.Auth
	1,  // 8: flipchat.messaging.v1.GetMessageResponse.result:type_name -> flipchat.messaging.v1.GetMessageResponse.Result
	30, // 9: flipchat.messaging.v1.GetMessageResponse.message:type_name -> flipchat.messaging.v1.Message
	27, // 10: flipchat.messaging.v1.GetMessagesRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	31, // 11: flipchat.messaging.v1.GetMessagesRequest.query_options:type_name -> flipchat.common.v1.QueryOptions
	29, // 12: flipchat.messaging.v1.GetMessagesRequest.auth:type_name -> flipchat.common.v1.Auth
	2,  // 13: flipchat.messaging.v1.GetMessagesResponse.result:type_name -> flipchat.messaging.v1.GetMessagesResponse.Result
	30, // 14: flipchat.messaging.v1.GetMessagesResponse.messages:type_name -> flipchat.messaging.v1.Message
	27, // 15: flipchat.messaging.v1.SendMessageRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	32, // 16: flipchat.messaging.v1.SendMessageRequest.content:type_name -> flipchat.messaging.v1.Content
	29, // 17: flipchat.messaging.v1.SendMessageRequest.auth:type_name -> flipchat.common.v1.Auth
	33, // 18: flipchat.messaging.v1.SendMessageRequest.payment_intent:type_name -> flipchat.common.v1.IntentId
	3,  // 19: flipchat.messaging.v1.SendMessageResponse.result:type_name -> flipchat.messaging.v1.SendMessageResponse.Result
	30, // 20: flipchat.messaging.v1.SendMessageResponse.message:type_name -> flipchat.messaging.v1.Message
	27, // 21: flipchat.messaging.v1.SendTipMessagePaymentMetadata.chat_id:type_name -> flipchat.common.v1.ChatId
	28, // 22: flipchat.messaging.v1.SendTipMessagePaymentMetadata.message_id:type_name -> flipchat.messaging.v1.MessageId
	27, // 23: flipchat.messaging.v1.AdvancePointerRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	34, // 24: flipchat.messaging.v1.AdvancePointerRequest.pointer:type_name -> flipchat.messaging.v1.Pointer
	29, // 25: flipchat.messaging.v1.AdvancePointerRequest.auth:type_name -> flipchat.common.v1.Auth
	4,  // 26: flipchat.messaging.v1.AdvancePointerResponse.result:type_name -> flipchat.messaging.v1.AdvancePointerResponse.Result
	27, // 27: flipchat.messaging.v1.NotifyIsTypingRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	29, // 28: flipchat.messaging.v1.NotifyIsTypingRequest.auth:type_name -> flipchat.common.v1.Auth
	5,  // 29: flipchat.messaging.v1.NotifyIsTypingResponse.result:type_name -> flipchat.messaging.v1.NotifyIsTypingResponse.Result
	28, // 30: flipchat.messaging.v1.DeleteMessageRequest.message_id:type_name -> flipchat.messaging.v1.MessageId
	29, // 31: flipchat.messaging.v1.DeleteMessageRequest.auth:type_name -> flipchat.common.v1.Auth
	6,  // 32: flipchat.messaging.v1.DeleteMessageResponse.result:type_name -> flipchat.messaging.v1.DeleteMessageResponse.Result
	27, // 33: flipchat.messaging.v1.StreamMessagesRequest.Params.chat_id:type_name -> flipchat.common.v1.ChatId
	28, // 34: flipchat.messaging.v1.StreamMessagesRequest.Params.last_known_message_id:type_name -> flipchat.messaging.v1.MessageId
	29, // 35: flipchat.messaging.v1.StreamMessagesRequest.Params.auth:type_name -> flipchat.common.v1.Auth
	0,  // 36: flipchat.messaging.v1.StreamMessagesResponse.StreamError.code:type_name -> flipchat.messaging.v1.StreamMessagesResponse.StreamError.Code
	30, // 37: flipchat.messaging.v1.StreamMessagesResponse.MessageBatch.messages:type_name -> flipchat.messaging.v1.Message
	7,  // 38: flipchat.messaging.v1.Messaging.StreamMessages:input_type -> flipchat.messaging.v1.StreamMessagesRequest
	9,  // 39: flipchat.messaging.v1.Messaging.GetMessage:input_type -> flipchat.messaging.v1.GetMessageRequest
	11, // 40: flipchat.messaging.v1.Messaging.GetMessages:input_type -> flipchat.messaging.v1.GetMessagesRequest
	13, // 41: flipchat.messaging.v1.Messaging.SendMessage:input_type -> flipchat.messaging.v1.SendMessageRequest
	16, // 42: flipchat.messaging.v1.Messaging.AdvancePointer:input_type -> flipchat.messaging.v1.AdvancePointerRequest
	18, // 43: flipchat.messaging.v1.Messaging.NotifyIsTyping:input_type -> flipchat.messaging.v1.NotifyIsTypingRequest
	20, // 44: flipchat.messaging.v1.Messaging.DeleteMessage:input_type -> flipchat.messaging.v1.DeleteMessageRequest
	8,  // 45: flipchat.messaging.v1.Messaging.StreamMessages:output_type -> flipchat.messaging.v1.StreamMessagesResponse
	10, // 46: flipchat.messaging.v1.Messaging.GetMessage:output_type -> flipchat.messaging.v1.GetMessageResponse
	12, // 47: flipchat.messaging.v1.Messaging.GetMessages:output_type -> flipchat.messaging.v1.GetMessagesResponse
	14, // 48: flipchat.messaging.v1.Messaging.SendMessage:output_type -> flipchat.messaging.v1.SendMessageResponse
	17, // 49: flipchat.messaging.v1.Messaging.AdvancePointer:output_type -> flipchat.messaging.v1.AdvancePointerResponse
	19, // 50: flipchat.messaging.v1.Messaging.NotifyIsTyping:output_type -> flipchat.messaging.v1.NotifyIsTypingResponse
	21, // 51: flipchat.messaging.v1.Messaging.DeleteMessage:output_type -> flipchat.messaging.v1.DeleteMessageResponse
	45, // [45:52] is the sub-list for method output_type
	38, // [38:45] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_messaging_v1_messaging_service_proto_init() }
func file_messaging_v1_messaging_service_proto_init() {
	if File_messaging_v1_messaging_service_proto != nil {
		return
	}
	file_messaging_v1_model_proto_init()
	file_messaging_v1_messaging_service_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamMessagesRequest_Params_)(nil),
		(*StreamMessagesRequest_Pong)(nil),
	}
	file_messaging_v1_messaging_service_proto_msgTypes[1].OneofWrappers = []any{
		(*StreamMessagesResponse_Ping)(nil),
		(*StreamMessagesResponse_Error)(nil),
		(*StreamMessagesResponse_Messages)(nil),
	}
	file_messaging_v1_messaging_service_proto_msgTypes[15].OneofWrappers = []any{
		(*StreamMessagesRequest_Params_LastKnownMessageId)(nil),
		(*StreamMessagesRequest_Params_LatestOnly)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messaging_v1_messaging_service_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_messaging_v1_messaging_service_proto_goTypes,
		DependencyIndexes: file_messaging_v1_messaging_service_proto_depIdxs,
		EnumInfos:         file_messaging_v1_messaging_service_proto_enumTypes,
		MessageInfos:      file_messaging_v1_messaging_service_proto_msgTypes,
	}.Build()
	File_messaging_v1_messaging_service_proto = out.File
	file_messaging_v1_messaging_service_proto_rawDesc = nil
	file_messaging_v1_messaging_service_proto_goTypes = nil
	file_messaging_v1_messaging_service_proto_depIdxs = nil
}
