// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat/v1/chat_service.proto

package chatpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StreamChatEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamChatEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamChatEventsRequestMultiError, or nil if none found.
func (m *StreamChatEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *StreamChatEventsRequest_Params_:
		if v == nil {
			err := StreamChatEventsRequestValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetParams()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsRequestValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsRequestValidationError{
						field:  "Params",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEventsRequest_Pong:
		if v == nil {
			err := StreamChatEventsRequestValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPong()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsRequestValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsRequestValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsRequestValidationError{
					field:  "Pong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := StreamChatEventsRequestValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StreamChatEventsRequestMultiError(errors)
	}

	return nil
}

// StreamChatEventsRequestMultiError is an error wrapping multiple validation
// errors returned by StreamChatEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamChatEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsRequestMultiError) AllErrors() []error { return m }

// StreamChatEventsRequestValidationError is the validation error returned by
// StreamChatEventsRequest.Validate if the designated constraints aren't met.
type StreamChatEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsRequestValidationError) ErrorName() string {
	return "StreamChatEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsRequestValidationError{}

// Validate checks the field values on StreamChatEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamChatEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamChatEventsResponseMultiError, or nil if none found.
func (m *StreamChatEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *StreamChatEventsResponse_Ping:
		if v == nil {
			err := StreamChatEventsResponseValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPing()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponseValidationError{
					field:  "Ping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEventsResponse_Error:
		if v == nil {
			err := StreamChatEventsResponseValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamChatEventsResponse_Events:
		if v == nil {
			err := StreamChatEventsResponseValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetEvents()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Events",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsResponseValidationError{
						field:  "Events",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEvents()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponseValidationError{
					field:  "Events",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := StreamChatEventsResponseValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StreamChatEventsResponseMultiError(errors)
	}

	return nil
}

// StreamChatEventsResponseMultiError is an error wrapping multiple validation
// errors returned by StreamChatEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamChatEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsResponseMultiError) AllErrors() []error { return m }

// StreamChatEventsResponseValidationError is the validation error returned by
// StreamChatEventsResponse.Validate if the designated constraints aren't met.
type StreamChatEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsResponseValidationError) ErrorName() string {
	return "StreamChatEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsResponseValidationError{}

// Validate checks the field values on GetChatsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatsRequestMultiError, or nil if none found.
func (m *GetChatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccount() == nil {
		err := GetChatsRequestValidationError{
			field:  "Account",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageSize() > 100 {
		err := GetChatsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 100",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Direction

	if m.GetAuth() == nil {
		err := GetChatsRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetChatsRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetChatsRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetChatsRequestMultiError(errors)
	}

	return nil
}

// GetChatsRequestMultiError is an error wrapping multiple validation errors
// returned by GetChatsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatsRequestMultiError) AllErrors() []error { return m }

// GetChatsRequestValidationError is the validation error returned by
// GetChatsRequest.Validate if the designated constraints aren't met.
type GetChatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatsRequestValidationError) ErrorName() string { return "GetChatsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetChatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatsRequestValidationError{}

// Validate checks the field values on GetChatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChatsResponseMultiError, or nil if none found.
func (m *GetChatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(m.GetChats()) > 100 {
		err := GetChatsResponseValidationError{
			field:  "Chats",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetChats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChatsResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChatsResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChatsResponseValidationError{
					field:  fmt.Sprintf("Chats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChatsResponseMultiError(errors)
	}

	return nil
}

// GetChatsResponseMultiError is an error wrapping multiple validation errors
// returned by GetChatsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetChatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatsResponseMultiError) AllErrors() []error { return m }

// GetChatsResponseValidationError is the validation error returned by
// GetChatsResponse.Validate if the designated constraints aren't met.
type GetChatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatsResponseValidationError) ErrorName() string { return "GetChatsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetChatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatsResponseValidationError{}

// Validate checks the field values on StartChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartChatRequestMultiError, or nil if none found.
func (m *StartChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := StartChatRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChatRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChatRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChatRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := StartChatRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChatRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChatRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChatRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	oneofParametersPresent := false
	switch v := m.Parameters.(type) {
	case *StartChatRequest_TwoWayChat:
		if v == nil {
			err := StartChatRequestValidationError{
				field:  "Parameters",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofParametersPresent = true

		if all {
			switch v := interface{}(m.GetTwoWayChat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartChatRequestValidationError{
						field:  "TwoWayChat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartChatRequestValidationError{
						field:  "TwoWayChat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTwoWayChat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartChatRequestValidationError{
					field:  "TwoWayChat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StartChatRequest_GroupChat:
		if v == nil {
			err := StartChatRequestValidationError{
				field:  "Parameters",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofParametersPresent = true

		if all {
			switch v := interface{}(m.GetGroupChat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartChatRequestValidationError{
						field:  "GroupChat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartChatRequestValidationError{
						field:  "GroupChat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGroupChat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartChatRequestValidationError{
					field:  "GroupChat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofParametersPresent {
		err := StartChatRequestValidationError{
			field:  "Parameters",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartChatRequestMultiError(errors)
	}

	return nil
}

// StartChatRequestMultiError is an error wrapping multiple validation errors
// returned by StartChatRequest.ValidateAll() if the designated constraints
// aren't met.
type StartChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartChatRequestMultiError) AllErrors() []error { return m }

// StartChatRequestValidationError is the validation error returned by
// StartChatRequest.Validate if the designated constraints aren't met.
type StartChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChatRequestValidationError) ErrorName() string { return "StartChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e StartChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChatRequestValidationError{}

// Validate checks the field values on StartChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StartChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartChatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartChatResponseMultiError, or nil if none found.
func (m *StartChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetChat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChatResponseValidationError{
					field:  "Chat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChatResponseValidationError{
					field:  "Chat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChatResponseValidationError{
				field:  "Chat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartChatResponseMultiError(errors)
	}

	return nil
}

// StartChatResponseMultiError is an error wrapping multiple validation errors
// returned by StartChatResponse.ValidateAll() if the designated constraints
// aren't met.
type StartChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartChatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartChatResponseMultiError) AllErrors() []error { return m }

// StartChatResponseValidationError is the validation error returned by
// StartChatResponse.Validate if the designated constraints aren't met.
type StartChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChatResponseValidationError) ErrorName() string {
	return "StartChatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChatResponseValidationError{}

// Validate checks the field values on JoinChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinChatRequestMultiError, or nil if none found.
func (m *JoinChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := JoinChatRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinChatRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinChatRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinChatRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() == nil {
		err := JoinChatRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinChatRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinChatRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinChatRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := JoinChatRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinChatRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinChatRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinChatRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinChatRequestMultiError(errors)
	}

	return nil
}

// JoinChatRequestMultiError is an error wrapping multiple validation errors
// returned by JoinChatRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinChatRequestMultiError) AllErrors() []error { return m }

// JoinChatRequestValidationError is the validation error returned by
// JoinChatRequest.Validate if the designated constraints aren't met.
type JoinChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinChatRequestValidationError) ErrorName() string { return "JoinChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinChatRequestValidationError{}

// Validate checks the field values on JoinChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinChatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinChatResponseMultiError, or nil if none found.
func (m *JoinChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return JoinChatResponseMultiError(errors)
	}

	return nil
}

// JoinChatResponseMultiError is an error wrapping multiple validation errors
// returned by JoinChatResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinChatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinChatResponseMultiError) AllErrors() []error { return m }

// JoinChatResponseValidationError is the validation error returned by
// JoinChatResponse.Validate if the designated constraints aren't met.
type JoinChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinChatResponseValidationError) ErrorName() string { return "JoinChatResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinChatResponseValidationError{}

// Validate checks the field values on LeaveChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveChatRequestMultiError, or nil if none found.
func (m *LeaveChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := LeaveChatRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveChatRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveChatRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveChatRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() == nil {
		err := LeaveChatRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveChatRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveChatRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveChatRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := LeaveChatRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaveChatRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaveChatRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaveChatRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LeaveChatRequestMultiError(errors)
	}

	return nil
}

// LeaveChatRequestMultiError is an error wrapping multiple validation errors
// returned by LeaveChatRequest.ValidateAll() if the designated constraints
// aren't met.
type LeaveChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveChatRequestMultiError) AllErrors() []error { return m }

// LeaveChatRequestValidationError is the validation error returned by
// LeaveChatRequest.Validate if the designated constraints aren't met.
type LeaveChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveChatRequestValidationError) ErrorName() string { return "LeaveChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e LeaveChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveChatRequestValidationError{}

// Validate checks the field values on LeaveChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LeaveChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveChatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveChatResponseMultiError, or nil if none found.
func (m *LeaveChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return LeaveChatResponseMultiError(errors)
	}

	return nil
}

// LeaveChatResponseMultiError is an error wrapping multiple validation errors
// returned by LeaveChatResponse.ValidateAll() if the designated constraints
// aren't met.
type LeaveChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveChatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveChatResponseMultiError) AllErrors() []error { return m }

// LeaveChatResponseValidationError is the validation error returned by
// LeaveChatResponse.Validate if the designated constraints aren't met.
type LeaveChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveChatResponseValidationError) ErrorName() string {
	return "LeaveChatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveChatResponseValidationError{}

// Validate checks the field values on SetMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMuteStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMuteStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMuteStateRequestMultiError, or nil if none found.
func (m *SetMuteStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMuteStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := SetMuteStateRequestValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMuteStateRequestValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsMuted

	if m.GetAuth() == nil {
		err := SetMuteStateRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetMuteStateRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMuteStateRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetMuteStateRequestMultiError(errors)
	}

	return nil
}

// SetMuteStateRequestMultiError is an error wrapping multiple validation
// errors returned by SetMuteStateRequest.ValidateAll() if the designated
// constraints aren't met.
type SetMuteStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMuteStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMuteStateRequestMultiError) AllErrors() []error { return m }

// SetMuteStateRequestValidationError is the validation error returned by
// SetMuteStateRequest.Validate if the designated constraints aren't met.
type SetMuteStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMuteStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMuteStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMuteStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMuteStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMuteStateRequestValidationError) ErrorName() string {
	return "SetMuteStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMuteStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMuteStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMuteStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMuteStateRequestValidationError{}

// Validate checks the field values on SetMuteStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetMuteStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMuteStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMuteStateResponseMultiError, or nil if none found.
func (m *SetMuteStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMuteStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SetMuteStateResponseMultiError(errors)
	}

	return nil
}

// SetMuteStateResponseMultiError is an error wrapping multiple validation
// errors returned by SetMuteStateResponse.ValidateAll() if the designated
// constraints aren't met.
type SetMuteStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMuteStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMuteStateResponseMultiError) AllErrors() []error { return m }

// SetMuteStateResponseValidationError is the validation error returned by
// SetMuteStateResponse.Validate if the designated constraints aren't met.
type SetMuteStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMuteStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMuteStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMuteStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMuteStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMuteStateResponseValidationError) ErrorName() string {
	return "SetMuteStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetMuteStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMuteStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMuteStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMuteStateResponseValidationError{}

// Validate checks the field values on Metadata with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetadataMultiError, or nil
// if none found.
func (m *Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := MetadataValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetadataValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetadataValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetadataValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Metadata_Type_NotInLookup[m.GetType()]; ok {
		err := MetadataValidationError{
			field:  "Type",
			reason: "value must not be in list [UNKNOWN]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetadataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetadataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetadataValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 0 || l > 1024 {
		err := MetadataValidationError{
			field:  "Title",
			reason: "value length must be between 0 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetMembers()); l < 1 || l > 2 {
		err := MetadataValidationError{
			field:  "Members",
			reason: "value must contain between 1 and 2 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetadataValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetadataValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetadataValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsMuted

	// no validation rules for Muteable

	// no validation rules for NumUnread

	if len(errors) > 0 {
		return MetadataMultiError(errors)
	}

	return nil
}

// MetadataMultiError is an error wrapping multiple validation errors returned
// by Metadata.ValidateAll() if the designated constraints aren't met.
type MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetadataMultiError) AllErrors() []error { return m }

// MetadataValidationError is the validation error returned by
// Metadata.Validate if the designated constraints aren't met.
type MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetadataValidationError) ErrorName() string { return "MetadataValidationError" }

// Error satisfies the builtin error interface
func (e MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetadataValidationError{}

var _Metadata_Type_NotInLookup = map[Metadata_ChatType]struct{}{
	0: {},
}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := MemberValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "Identity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetPointers()) > 2 {
		err := MemberValidationError{
			field:  "Pointers",
			reason: "value must contain no more than 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPointers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberValidationError{
						field:  fmt.Sprintf("Pointers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberValidationError{
						field:  fmt.Sprintf("Pointers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberValidationError{
					field:  fmt.Sprintf("Pointers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsSelf

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on MemberIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberIdentityMultiError,
// or nil if none found.
func (m *MemberIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDisplayName()) > 255 {
		err := MemberIdentityValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProfilePicUrl()) > 255 {
		err := MemberIdentityValidationError{
			field:  "ProfilePicUrl",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MemberIdentityMultiError(errors)
	}

	return nil
}

// MemberIdentityMultiError is an error wrapping multiple validation errors
// returned by MemberIdentity.ValidateAll() if the designated constraints
// aren't met.
type MemberIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberIdentityMultiError) AllErrors() []error { return m }

// MemberIdentityValidationError is the validation error returned by
// MemberIdentity.Validate if the designated constraints aren't met.
type MemberIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberIdentityValidationError) ErrorName() string { return "MemberIdentityValidationError" }

// Error satisfies the builtin error interface
func (e MemberIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberIdentityValidationError{}

// Validate checks the field values on Cursor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cursor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cursor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CursorMultiError, or nil if none found.
func (m *Cursor) ValidateAll() error {
	return m.validate(true)
}

func (m *Cursor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 8 || l > 32 {
		err := CursorValidationError{
			field:  "Value",
			reason: "value length must be between 8 and 32 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CursorMultiError(errors)
	}

	return nil
}

// CursorMultiError is an error wrapping multiple validation errors returned by
// Cursor.ValidateAll() if the designated constraints aren't met.
type CursorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CursorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CursorMultiError) AllErrors() []error { return m }

// CursorValidationError is the validation error returned by Cursor.Validate if
// the designated constraints aren't met.
type CursorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CursorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CursorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CursorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CursorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CursorValidationError) ErrorName() string { return "CursorValidationError" }

// Error satisfies the builtin error interface
func (e CursorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCursor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CursorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CursorValidationError{}

// Validate checks the field values on StreamChatEventsRequest_Params with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamChatEventsRequest_Params) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatEventsRequest_Params with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StreamChatEventsRequest_ParamsMultiError, or nil if none found.
func (m *StreamChatEventsRequest_Params) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsRequest_Params) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := StreamChatEventsRequest_ParamsValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsRequest_ParamsValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsRequest_ParamsValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsRequest_ParamsValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := StreamChatEventsRequest_ParamsValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsRequest_ParamsValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsRequest_ParamsValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsRequest_ParamsValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamChatEventsRequest_ParamsMultiError(errors)
	}

	return nil
}

// StreamChatEventsRequest_ParamsMultiError is an error wrapping multiple
// validation errors returned by StreamChatEventsRequest_Params.ValidateAll()
// if the designated constraints aren't met.
type StreamChatEventsRequest_ParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsRequest_ParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsRequest_ParamsMultiError) AllErrors() []error { return m }

// StreamChatEventsRequest_ParamsValidationError is the validation error
// returned by StreamChatEventsRequest_Params.Validate if the designated
// constraints aren't met.
type StreamChatEventsRequest_ParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsRequest_ParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsRequest_ParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsRequest_ParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsRequest_ParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsRequest_ParamsValidationError) ErrorName() string {
	return "StreamChatEventsRequest_ParamsValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsRequest_ParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsRequest_Params.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsRequest_ParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsRequest_ParamsValidationError{}

// Validate checks the field values on StreamChatEventsResponse_StreamError
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *StreamChatEventsResponse_StreamError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatEventsResponse_StreamError
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamChatEventsResponse_StreamErrorMultiError, or nil if none found.
func (m *StreamChatEventsResponse_StreamError) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsResponse_StreamError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return StreamChatEventsResponse_StreamErrorMultiError(errors)
	}

	return nil
}

// StreamChatEventsResponse_StreamErrorMultiError is an error wrapping multiple
// validation errors returned by
// StreamChatEventsResponse_StreamError.ValidateAll() if the designated
// constraints aren't met.
type StreamChatEventsResponse_StreamErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsResponse_StreamErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsResponse_StreamErrorMultiError) AllErrors() []error { return m }

// StreamChatEventsResponse_StreamErrorValidationError is the validation error
// returned by StreamChatEventsResponse_StreamError.Validate if the designated
// constraints aren't met.
type StreamChatEventsResponse_StreamErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsResponse_StreamErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsResponse_StreamErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsResponse_StreamErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsResponse_StreamErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsResponse_StreamErrorValidationError) ErrorName() string {
	return "StreamChatEventsResponse_StreamErrorValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsResponse_StreamErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsResponse_StreamError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsResponse_StreamErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsResponse_StreamErrorValidationError{}

// Validate checks the field values on StreamChatEventsResponse_EventBatch with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamChatEventsResponse_EventBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatEventsResponse_EventBatch
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamChatEventsResponse_EventBatchMultiError, or nil if none found.
func (m *StreamChatEventsResponse_EventBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsResponse_EventBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUpdates()); l < 1 || l > 1024 {
		err := StreamChatEventsResponse_EventBatchValidationError{
			field:  "Updates",
			reason: "value must contain between 1 and 1024 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUpdates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatEventsResponse_EventBatchValidationError{
						field:  fmt.Sprintf("Updates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatEventsResponse_EventBatchValidationError{
						field:  fmt.Sprintf("Updates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatEventsResponse_EventBatchValidationError{
					field:  fmt.Sprintf("Updates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamChatEventsResponse_EventBatchMultiError(errors)
	}

	return nil
}

// StreamChatEventsResponse_EventBatchMultiError is an error wrapping multiple
// validation errors returned by
// StreamChatEventsResponse_EventBatch.ValidateAll() if the designated
// constraints aren't met.
type StreamChatEventsResponse_EventBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsResponse_EventBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsResponse_EventBatchMultiError) AllErrors() []error { return m }

// StreamChatEventsResponse_EventBatchValidationError is the validation error
// returned by StreamChatEventsResponse_EventBatch.Validate if the designated
// constraints aren't met.
type StreamChatEventsResponse_EventBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsResponse_EventBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsResponse_EventBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsResponse_EventBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsResponse_EventBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsResponse_EventBatchValidationError) ErrorName() string {
	return "StreamChatEventsResponse_EventBatchValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsResponse_EventBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsResponse_EventBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsResponse_EventBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsResponse_EventBatchValidationError{}

// Validate checks the field values on StreamChatEventsResponse_ChatUpdate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamChatEventsResponse_ChatUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatEventsResponse_ChatUpdate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamChatEventsResponse_ChatUpdateMultiError, or nil if none found.
func (m *StreamChatEventsResponse_ChatUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsResponse_ChatUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() == nil {
		err := StreamChatEventsResponse_ChatUpdateValidationError{
			field:  "ChatId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChatId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "ChatId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChatId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsResponse_ChatUpdateValidationError{
				field:  "ChatId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsResponse_ChatUpdateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "LastMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "LastMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsResponse_ChatUpdateValidationError{
				field:  "LastMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPointer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPointer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsResponse_ChatUpdateValidationError{
				field:  "Pointer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsTyping()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "IsTyping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdateValidationError{
					field:  "IsTyping",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsTyping()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsResponse_ChatUpdateValidationError{
				field:  "IsTyping",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamChatEventsResponse_ChatUpdateMultiError(errors)
	}

	return nil
}

// StreamChatEventsResponse_ChatUpdateMultiError is an error wrapping multiple
// validation errors returned by
// StreamChatEventsResponse_ChatUpdate.ValidateAll() if the designated
// constraints aren't met.
type StreamChatEventsResponse_ChatUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsResponse_ChatUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsResponse_ChatUpdateMultiError) AllErrors() []error { return m }

// StreamChatEventsResponse_ChatUpdateValidationError is the validation error
// returned by StreamChatEventsResponse_ChatUpdate.Validate if the designated
// constraints aren't met.
type StreamChatEventsResponse_ChatUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsResponse_ChatUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatEventsResponse_ChatUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatEventsResponse_ChatUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatEventsResponse_ChatUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsResponse_ChatUpdateValidationError) ErrorName() string {
	return "StreamChatEventsResponse_ChatUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsResponse_ChatUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsResponse_ChatUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsResponse_ChatUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsResponse_ChatUpdateValidationError{}

// Validate checks the field values on
// StreamChatEventsResponse_ChatUpdate_PointerUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamChatEventsResponse_ChatUpdate_PointerUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StreamChatEventsResponse_ChatUpdate_PointerUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// StreamChatEventsResponse_ChatUpdate_PointerUpdateMultiError, or nil if none found.
func (m *StreamChatEventsResponse_ChatUpdate_PointerUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatEventsResponse_ChatUpdate_PointerUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMember() == nil {
		err := StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{
			field:  "Member",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPointer() == nil {
		err := StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{
			field:  "Pointer",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPointer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{
					field:  "Pointer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPointer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{
				field:  "Pointer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamChatEventsResponse_ChatUpdate_PointerUpdateMultiError(errors)
	}

	return nil
}

// StreamChatEventsResponse_ChatUpdate_PointerUpdateMultiError is an error
// wrapping multiple validation errors returned by
// StreamChatEventsResponse_ChatUpdate_PointerUpdate.ValidateAll() if the
// designated constraints aren't met.
type StreamChatEventsResponse_ChatUpdate_PointerUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatEventsResponse_ChatUpdate_PointerUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatEventsResponse_ChatUpdate_PointerUpdateMultiError) AllErrors() []error { return m }

// StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError is the
// validation error returned by
// StreamChatEventsResponse_ChatUpdate_PointerUpdate.Validate if the
// designated constraints aren't met.
type StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError) ErrorName() string {
	return "StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatEventsResponse_ChatUpdate_PointerUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatEventsResponse_ChatUpdate_PointerUpdateValidationError{}

// Validate checks the field values on
// StartChatRequest_StartTwoWayChatParameters with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartChatRequest_StartTwoWayChatParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartChatRequest_StartTwoWayChatParameters with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartChatRequest_StartTwoWayChatParametersMultiError, or nil if none found.
func (m *StartChatRequest_StartTwoWayChatParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *StartChatRequest_StartTwoWayChatParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOtherUserId() == nil {
		err := StartChatRequest_StartTwoWayChatParametersValidationError{
			field:  "OtherUserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOtherUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartChatRequest_StartTwoWayChatParametersValidationError{
					field:  "OtherUserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartChatRequest_StartTwoWayChatParametersValidationError{
					field:  "OtherUserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOtherUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartChatRequest_StartTwoWayChatParametersValidationError{
				field:  "OtherUserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartChatRequest_StartTwoWayChatParametersMultiError(errors)
	}

	return nil
}

// StartChatRequest_StartTwoWayChatParametersMultiError is an error wrapping
// multiple validation errors returned by
// StartChatRequest_StartTwoWayChatParameters.ValidateAll() if the designated
// constraints aren't met.
type StartChatRequest_StartTwoWayChatParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartChatRequest_StartTwoWayChatParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartChatRequest_StartTwoWayChatParametersMultiError) AllErrors() []error { return m }

// StartChatRequest_StartTwoWayChatParametersValidationError is the validation
// error returned by StartChatRequest_StartTwoWayChatParameters.Validate if
// the designated constraints aren't met.
type StartChatRequest_StartTwoWayChatParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChatRequest_StartTwoWayChatParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartChatRequest_StartTwoWayChatParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartChatRequest_StartTwoWayChatParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartChatRequest_StartTwoWayChatParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChatRequest_StartTwoWayChatParametersValidationError) ErrorName() string {
	return "StartChatRequest_StartTwoWayChatParametersValidationError"
}

// Error satisfies the builtin error interface
func (e StartChatRequest_StartTwoWayChatParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChatRequest_StartTwoWayChatParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChatRequest_StartTwoWayChatParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChatRequest_StartTwoWayChatParametersValidationError{}

// Validate checks the field values on
// StartChatRequest_StartGroupChatParameters with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartChatRequest_StartGroupChatParameters) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// StartChatRequest_StartGroupChatParameters with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// StartChatRequest_StartGroupChatParametersMultiError, or nil if none found.
func (m *StartChatRequest_StartGroupChatParameters) ValidateAll() error {
	return m.validate(true)
}

func (m *StartChatRequest_StartGroupChatParameters) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetUsers()); l < 1 || l > 32 {
		err := StartChatRequest_StartGroupChatParametersValidationError{
			field:  "Users",
			reason: "value must contain between 1 and 32 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartChatRequest_StartGroupChatParametersValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartChatRequest_StartGroupChatParametersValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartChatRequest_StartGroupChatParametersValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Title

	if len(errors) > 0 {
		return StartChatRequest_StartGroupChatParametersMultiError(errors)
	}

	return nil
}

// StartChatRequest_StartGroupChatParametersMultiError is an error wrapping
// multiple validation errors returned by
// StartChatRequest_StartGroupChatParameters.ValidateAll() if the designated
// constraints aren't met.
type StartChatRequest_StartGroupChatParametersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartChatRequest_StartGroupChatParametersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartChatRequest_StartGroupChatParametersMultiError) AllErrors() []error { return m }

// StartChatRequest_StartGroupChatParametersValidationError is the validation
// error returned by StartChatRequest_StartGroupChatParameters.Validate if the
// designated constraints aren't met.
type StartChatRequest_StartGroupChatParametersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartChatRequest_StartGroupChatParametersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartChatRequest_StartGroupChatParametersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartChatRequest_StartGroupChatParametersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartChatRequest_StartGroupChatParametersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartChatRequest_StartGroupChatParametersValidationError) ErrorName() string {
	return "StartChatRequest_StartGroupChatParametersValidationError"
}

// Error satisfies the builtin error interface
func (e StartChatRequest_StartGroupChatParametersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartChatRequest_StartGroupChatParameters.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartChatRequest_StartGroupChatParametersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartChatRequest_StartGroupChatParametersValidationError{}
