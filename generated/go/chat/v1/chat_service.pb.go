// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: chat/v1/chat_service.proto

package chatpb

import (
	v1 "github.com/code-payments/flipchat-protobuf-api/generated/go/common/v1"
	v11 "github.com/code-payments/flipchat-protobuf-api/generated/go/messaging/v1"
	v12 "github.com/code-payments/flipchat-protobuf-api/generated/go/profile/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamChatEventsResponse_StreamError_Code int32

const (
	StreamChatEventsResponse_StreamError_DENIED StreamChatEventsResponse_StreamError_Code = 0
)

// Enum value maps for StreamChatEventsResponse_StreamError_Code.
var (
	StreamChatEventsResponse_StreamError_Code_name = map[int32]string{
		0: "DENIED",
	}
	StreamChatEventsResponse_StreamError_Code_value = map[string]int32{
		"DENIED": 0,
	}
)

func (x StreamChatEventsResponse_StreamError_Code) Enum() *StreamChatEventsResponse_StreamError_Code {
	p := new(StreamChatEventsResponse_StreamError_Code)
	*p = x
	return p
}

func (x StreamChatEventsResponse_StreamError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamChatEventsResponse_StreamError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[0].Descriptor()
}

func (StreamChatEventsResponse_StreamError_Code) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[0]
}

func (x StreamChatEventsResponse_StreamError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamChatEventsResponse_StreamError_Code.Descriptor instead.
func (StreamChatEventsResponse_StreamError_Code) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{1, 0, 0}
}

type GetChatsResponse_Result int32

const (
	GetChatsResponse_OK GetChatsResponse_Result = 0
)

// Enum value maps for GetChatsResponse_Result.
var (
	GetChatsResponse_Result_name = map[int32]string{
		0: "OK",
	}
	GetChatsResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x GetChatsResponse_Result) Enum() *GetChatsResponse_Result {
	p := new(GetChatsResponse_Result)
	*p = x
	return p
}

func (x GetChatsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[1].Descriptor()
}

func (GetChatsResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[1]
}

func (x GetChatsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatsResponse_Result.Descriptor instead.
func (GetChatsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetChatResponse_Result int32

const (
	GetChatResponse_OK        GetChatResponse_Result = 0
	GetChatResponse_NOT_FOUND GetChatResponse_Result = 1
)

// Enum value maps for GetChatResponse_Result.
var (
	GetChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetChatResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetChatResponse_Result) Enum() *GetChatResponse_Result {
	p := new(GetChatResponse_Result)
	*p = x
	return p
}

func (x GetChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[2].Descriptor()
}

func (GetChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[2]
}

func (x GetChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatResponse_Result.Descriptor instead.
func (GetChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{5, 0}
}

type StartChatResponse_Result int32

const (
	StartChatResponse_OK StartChatResponse_Result = 0
	// DENIED indicates the caller is not allowed to start/join the chat.
	StartChatResponse_DENIED StartChatResponse_Result = 1
	// USER_NOT_FOUND indicates that (one of) the target user's was not found.
	StartChatResponse_USER_NOT_FOUND StartChatResponse_Result = 2
)

// Enum value maps for StartChatResponse_Result.
var (
	StartChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "USER_NOT_FOUND",
	}
	StartChatResponse_Result_value = map[string]int32{
		"OK":             0,
		"DENIED":         1,
		"USER_NOT_FOUND": 2,
	}
)

func (x StartChatResponse_Result) Enum() *StartChatResponse_Result {
	p := new(StartChatResponse_Result)
	*p = x
	return p
}

func (x StartChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[3].Descriptor()
}

func (StartChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[3]
}

func (x StartChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartChatResponse_Result.Descriptor instead.
func (StartChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{7, 0}
}

type JoinChatResponse_Result int32

const (
	JoinChatResponse_OK     JoinChatResponse_Result = 0
	JoinChatResponse_DENIED JoinChatResponse_Result = 1
)

// Enum value maps for JoinChatResponse_Result.
var (
	JoinChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	JoinChatResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x JoinChatResponse_Result) Enum() *JoinChatResponse_Result {
	p := new(JoinChatResponse_Result)
	*p = x
	return p
}

func (x JoinChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[4].Descriptor()
}

func (JoinChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[4]
}

func (x JoinChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinChatResponse_Result.Descriptor instead.
func (JoinChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{10, 0}
}

type LeaveChatResponse_Result int32

const (
	LeaveChatResponse_OK LeaveChatResponse_Result = 0
)

// Enum value maps for LeaveChatResponse_Result.
var (
	LeaveChatResponse_Result_name = map[int32]string{
		0: "OK",
	}
	LeaveChatResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x LeaveChatResponse_Result) Enum() *LeaveChatResponse_Result {
	p := new(LeaveChatResponse_Result)
	*p = x
	return p
}

func (x LeaveChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaveChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[5].Descriptor()
}

func (LeaveChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[5]
}

func (x LeaveChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaveChatResponse_Result.Descriptor instead.
func (LeaveChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{13, 0}
}

type OpenChatResponse_Result int32

const (
	OpenChatResponse_OK     OpenChatResponse_Result = 0
	OpenChatResponse_DENIED OpenChatResponse_Result = 1
)

// Enum value maps for OpenChatResponse_Result.
var (
	OpenChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	OpenChatResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x OpenChatResponse_Result) Enum() *OpenChatResponse_Result {
	p := new(OpenChatResponse_Result)
	*p = x
	return p
}

func (x OpenChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[6].Descriptor()
}

func (OpenChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[6]
}

func (x OpenChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenChatResponse_Result.Descriptor instead.
func (OpenChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{15, 0}
}

type CloseChatResponse_Result int32

const (
	CloseChatResponse_OK     CloseChatResponse_Result = 0
	CloseChatResponse_DENIED CloseChatResponse_Result = 1
)

// Enum value maps for CloseChatResponse_Result.
var (
	CloseChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	CloseChatResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x CloseChatResponse_Result) Enum() *CloseChatResponse_Result {
	p := new(CloseChatResponse_Result)
	*p = x
	return p
}

func (x CloseChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[7].Descriptor()
}

func (CloseChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[7]
}

func (x CloseChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloseChatResponse_Result.Descriptor instead.
func (CloseChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{17, 0}
}

type CheckDisplayNameResponse_Result int32

const (
	CheckDisplayNameResponse_OK CheckDisplayNameResponse_Result = 0
)

// Enum value maps for CheckDisplayNameResponse_Result.
var (
	CheckDisplayNameResponse_Result_name = map[int32]string{
		0: "OK",
	}
	CheckDisplayNameResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x CheckDisplayNameResponse_Result) Enum() *CheckDisplayNameResponse_Result {
	p := new(CheckDisplayNameResponse_Result)
	*p = x
	return p
}

func (x CheckDisplayNameResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckDisplayNameResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[8].Descriptor()
}

func (CheckDisplayNameResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[8]
}

func (x CheckDisplayNameResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckDisplayNameResponse_Result.Descriptor instead.
func (CheckDisplayNameResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{19, 0}
}

type SetDisplayNameResponse_Result int32

const (
	SetDisplayNameResponse_OK       SetDisplayNameResponse_Result = 0
	SetDisplayNameResponse_DENIED   SetDisplayNameResponse_Result = 1
	SetDisplayNameResponse_CANT_SET SetDisplayNameResponse_Result = 2
)

// Enum value maps for SetDisplayNameResponse_Result.
var (
	SetDisplayNameResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CANT_SET",
	}
	SetDisplayNameResponse_Result_value = map[string]int32{
		"OK":       0,
		"DENIED":   1,
		"CANT_SET": 2,
	}
)

func (x SetDisplayNameResponse_Result) Enum() *SetDisplayNameResponse_Result {
	p := new(SetDisplayNameResponse_Result)
	*p = x
	return p
}

func (x SetDisplayNameResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetDisplayNameResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[9].Descriptor()
}

func (SetDisplayNameResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[9]
}

func (x SetDisplayNameResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetDisplayNameResponse_Result.Descriptor instead.
func (SetDisplayNameResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{21, 0}
}

type SetDescriptionResponse_Result int32

const (
	SetDescriptionResponse_OK       SetDescriptionResponse_Result = 0
	SetDescriptionResponse_DENIED   SetDescriptionResponse_Result = 1
	SetDescriptionResponse_CANT_SET SetDescriptionResponse_Result = 2
)

// Enum value maps for SetDescriptionResponse_Result.
var (
	SetDescriptionResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CANT_SET",
	}
	SetDescriptionResponse_Result_value = map[string]int32{
		"OK":       0,
		"DENIED":   1,
		"CANT_SET": 2,
	}
)

func (x SetDescriptionResponse_Result) Enum() *SetDescriptionResponse_Result {
	p := new(SetDescriptionResponse_Result)
	*p = x
	return p
}

func (x SetDescriptionResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetDescriptionResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[10].Descriptor()
}

func (SetDescriptionResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[10]
}

func (x SetDescriptionResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetDescriptionResponse_Result.Descriptor instead.
func (SetDescriptionResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{23, 0}
}

type SetCoverChargeResponse_Result int32

const (
	SetCoverChargeResponse_OK       SetCoverChargeResponse_Result = 0
	SetCoverChargeResponse_DENIED   SetCoverChargeResponse_Result = 1
	SetCoverChargeResponse_CANT_SET SetCoverChargeResponse_Result = 2
)

// Enum value maps for SetCoverChargeResponse_Result.
var (
	SetCoverChargeResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CANT_SET",
	}
	SetCoverChargeResponse_Result_value = map[string]int32{
		"OK":       0,
		"DENIED":   1,
		"CANT_SET": 2,
	}
)

func (x SetCoverChargeResponse_Result) Enum() *SetCoverChargeResponse_Result {
	p := new(SetCoverChargeResponse_Result)
	*p = x
	return p
}

func (x SetCoverChargeResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetCoverChargeResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[11].Descriptor()
}

func (SetCoverChargeResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[11]
}

func (x SetCoverChargeResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetCoverChargeResponse_Result.Descriptor instead.
func (SetCoverChargeResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{25, 0}
}

type SetMessagingFeeResponse_Result int32

const (
	SetMessagingFeeResponse_OK       SetMessagingFeeResponse_Result = 0
	SetMessagingFeeResponse_DENIED   SetMessagingFeeResponse_Result = 1
	SetMessagingFeeResponse_CANT_SET SetMessagingFeeResponse_Result = 2
)

// Enum value maps for SetMessagingFeeResponse_Result.
var (
	SetMessagingFeeResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CANT_SET",
	}
	SetMessagingFeeResponse_Result_value = map[string]int32{
		"OK":       0,
		"DENIED":   1,
		"CANT_SET": 2,
	}
)

func (x SetMessagingFeeResponse_Result) Enum() *SetMessagingFeeResponse_Result {
	p := new(SetMessagingFeeResponse_Result)
	*p = x
	return p
}

func (x SetMessagingFeeResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetMessagingFeeResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[12].Descriptor()
}

func (SetMessagingFeeResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[12]
}

func (x SetMessagingFeeResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetMessagingFeeResponse_Result.Descriptor instead.
func (SetMessagingFeeResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{27, 0}
}

type GetMemberUpdatesResponse_Result int32

const (
	GetMemberUpdatesResponse_OK        GetMemberUpdatesResponse_Result = 0
	GetMemberUpdatesResponse_NOT_FOUND GetMemberUpdatesResponse_Result = 1
)

// Enum value maps for GetMemberUpdatesResponse_Result.
var (
	GetMemberUpdatesResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetMemberUpdatesResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetMemberUpdatesResponse_Result) Enum() *GetMemberUpdatesResponse_Result {
	p := new(GetMemberUpdatesResponse_Result)
	*p = x
	return p
}

func (x GetMemberUpdatesResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMemberUpdatesResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[13].Descriptor()
}

func (GetMemberUpdatesResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[13]
}

func (x GetMemberUpdatesResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMemberUpdatesResponse_Result.Descriptor instead.
func (GetMemberUpdatesResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{29, 0}
}

type PromoteUserResponse_Result int32

const (
	PromoteUserResponse_OK             PromoteUserResponse_Result = 0
	PromoteUserResponse_DENIED         PromoteUserResponse_Result = 1
	PromoteUserResponse_NOT_REGISTERED PromoteUserResponse_Result = 2
)

// Enum value maps for PromoteUserResponse_Result.
var (
	PromoteUserResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "NOT_REGISTERED",
	}
	PromoteUserResponse_Result_value = map[string]int32{
		"OK":             0,
		"DENIED":         1,
		"NOT_REGISTERED": 2,
	}
)

func (x PromoteUserResponse_Result) Enum() *PromoteUserResponse_Result {
	p := new(PromoteUserResponse_Result)
	*p = x
	return p
}

func (x PromoteUserResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromoteUserResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[14].Descriptor()
}

func (PromoteUserResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[14]
}

func (x PromoteUserResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromoteUserResponse_Result.Descriptor instead.
func (PromoteUserResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{31, 0}
}

type DemoteUserResponse_Result int32

const (
	DemoteUserResponse_OK     DemoteUserResponse_Result = 0
	DemoteUserResponse_DENIED DemoteUserResponse_Result = 1
)

// Enum value maps for DemoteUserResponse_Result.
var (
	DemoteUserResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	DemoteUserResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x DemoteUserResponse_Result) Enum() *DemoteUserResponse_Result {
	p := new(DemoteUserResponse_Result)
	*p = x
	return p
}

func (x DemoteUserResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DemoteUserResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[15].Descriptor()
}

func (DemoteUserResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[15]
}

func (x DemoteUserResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DemoteUserResponse_Result.Descriptor instead.
func (DemoteUserResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{33, 0}
}

type RemoveUserResponse_Result int32

const (
	RemoveUserResponse_OK     RemoveUserResponse_Result = 0
	RemoveUserResponse_DENIED RemoveUserResponse_Result = 1
)

// Enum value maps for RemoveUserResponse_Result.
var (
	RemoveUserResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	RemoveUserResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x RemoveUserResponse_Result) Enum() *RemoveUserResponse_Result {
	p := new(RemoveUserResponse_Result)
	*p = x
	return p
}

func (x RemoveUserResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveUserResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[16].Descriptor()
}

func (RemoveUserResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[16]
}

func (x RemoveUserResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveUserResponse_Result.Descriptor instead.
func (RemoveUserResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{35, 0}
}

type MuteUserResponse_Result int32

const (
	MuteUserResponse_OK     MuteUserResponse_Result = 0
	MuteUserResponse_DENIED MuteUserResponse_Result = 1
)

// Enum value maps for MuteUserResponse_Result.
var (
	MuteUserResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	MuteUserResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x MuteUserResponse_Result) Enum() *MuteUserResponse_Result {
	p := new(MuteUserResponse_Result)
	*p = x
	return p
}

func (x MuteUserResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MuteUserResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[17].Descriptor()
}

func (MuteUserResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[17]
}

func (x MuteUserResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MuteUserResponse_Result.Descriptor instead.
func (MuteUserResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{37, 0}
}

type MuteChatResponse_Result int32

const (
	MuteChatResponse_OK     MuteChatResponse_Result = 0
	MuteChatResponse_DENIED MuteChatResponse_Result = 1
)

// Enum value maps for MuteChatResponse_Result.
var (
	MuteChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	MuteChatResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x MuteChatResponse_Result) Enum() *MuteChatResponse_Result {
	p := new(MuteChatResponse_Result)
	*p = x
	return p
}

func (x MuteChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MuteChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[18].Descriptor()
}

func (MuteChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[18]
}

func (x MuteChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MuteChatResponse_Result.Descriptor instead.
func (MuteChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{39, 0}
}

type UnmuteChatResponse_Result int32

const (
	UnmuteChatResponse_OK     UnmuteChatResponse_Result = 0
	UnmuteChatResponse_DENIED UnmuteChatResponse_Result = 1
)

// Enum value maps for UnmuteChatResponse_Result.
var (
	UnmuteChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	UnmuteChatResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x UnmuteChatResponse_Result) Enum() *UnmuteChatResponse_Result {
	p := new(UnmuteChatResponse_Result)
	*p = x
	return p
}

func (x UnmuteChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnmuteChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[19].Descriptor()
}

func (UnmuteChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[19]
}

func (x UnmuteChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnmuteChatResponse_Result.Descriptor instead.
func (UnmuteChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{41, 0}
}

type ReportUserResponse_Result int32

const (
	ReportUserResponse_OK ReportUserResponse_Result = 0
)

// Enum value maps for ReportUserResponse_Result.
var (
	ReportUserResponse_Result_name = map[int32]string{
		0: "OK",
	}
	ReportUserResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x ReportUserResponse_Result) Enum() *ReportUserResponse_Result {
	p := new(ReportUserResponse_Result)
	*p = x
	return p
}

func (x ReportUserResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportUserResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[20].Descriptor()
}

func (ReportUserResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[20]
}

func (x ReportUserResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportUserResponse_Result.Descriptor instead.
func (ReportUserResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{43, 0}
}

type Metadata_ChatType int32

const (
	Metadata_UNKNOWN Metadata_ChatType = 0
	Metadata_TWO_WAY Metadata_ChatType = 1
	Metadata_GROUP   Metadata_ChatType = 2
)

// Enum value maps for Metadata_ChatType.
var (
	Metadata_ChatType_name = map[int32]string{
		0: "UNKNOWN",
		1: "TWO_WAY",
		2: "GROUP",
	}
	Metadata_ChatType_value = map[string]int32{
		"UNKNOWN": 0,
		"TWO_WAY": 1,
		"GROUP":   2,
	}
)

func (x Metadata_ChatType) Enum() *Metadata_ChatType {
	p := new(Metadata_ChatType)
	*p = x
	return p
}

func (x Metadata_ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_chat_service_proto_enumTypes[21].Descriptor()
}

func (Metadata_ChatType) Type() protoreflect.EnumType {
	return &file_chat_v1_chat_service_proto_enumTypes[21]
}

func (x Metadata_ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_ChatType.Descriptor instead.
func (Metadata_ChatType) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{44, 0}
}

type StreamChatEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamChatEventsRequest_Params_
	//	*StreamChatEventsRequest_Pong
	Type isStreamChatEventsRequest_Type `protobuf_oneof:"type"`
}

func (x *StreamChatEventsRequest) Reset() {
	*x = StreamChatEventsRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsRequest) ProtoMessage() {}

func (x *StreamChatEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamChatEventsRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{0}
}

func (m *StreamChatEventsRequest) GetType() isStreamChatEventsRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamChatEventsRequest) GetParams() *StreamChatEventsRequest_Params {
	if x, ok := x.GetType().(*StreamChatEventsRequest_Params_); ok {
		return x.Params
	}
	return nil
}

func (x *StreamChatEventsRequest) GetPong() *v1.ClientPong {
	if x, ok := x.GetType().(*StreamChatEventsRequest_Pong); ok {
		return x.Pong
	}
	return nil
}

type isStreamChatEventsRequest_Type interface {
	isStreamChatEventsRequest_Type()
}

type StreamChatEventsRequest_Params_ struct {
	Params *StreamChatEventsRequest_Params `protobuf:"bytes,1,opt,name=params,proto3,oneof"`
}

type StreamChatEventsRequest_Pong struct {
	Pong *v1.ClientPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

func (*StreamChatEventsRequest_Params_) isStreamChatEventsRequest_Type() {}

func (*StreamChatEventsRequest_Pong) isStreamChatEventsRequest_Type() {}

type StreamChatEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamChatEventsResponse_Ping
	//	*StreamChatEventsResponse_Error
	//	*StreamChatEventsResponse_Events
	Type isStreamChatEventsResponse_Type `protobuf_oneof:"type"`
}

func (x *StreamChatEventsResponse) Reset() {
	*x = StreamChatEventsResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse) ProtoMessage() {}

func (x *StreamChatEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{1}
}

func (m *StreamChatEventsResponse) GetType() isStreamChatEventsResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamChatEventsResponse) GetPing() *v1.ServerPing {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *StreamChatEventsResponse) GetError() *StreamChatEventsResponse_StreamError {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StreamChatEventsResponse) GetEvents() *StreamChatEventsResponse_EventBatch {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Events); ok {
		return x.Events
	}
	return nil
}

type isStreamChatEventsResponse_Type interface {
	isStreamChatEventsResponse_Type()
}

type StreamChatEventsResponse_Ping struct {
	Ping *v1.ServerPing `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type StreamChatEventsResponse_Error struct {
	Error *StreamChatEventsResponse_StreamError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type StreamChatEventsResponse_Events struct {
	Events *StreamChatEventsResponse_EventBatch `protobuf:"bytes,3,opt,name=events,proto3,oneof"`
}

func (*StreamChatEventsResponse_Ping) isStreamChatEventsResponse_Type() {}

func (*StreamChatEventsResponse_Error) isStreamChatEventsResponse_Type() {}

func (*StreamChatEventsResponse_Events) isStreamChatEventsResponse_Type() {}

type GetChatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryOptions *v1.QueryOptions `protobuf:"bytes,1,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
	Auth         *v1.Auth         `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetChatsRequest) Reset() {
	*x = GetChatsRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsRequest) ProtoMessage() {}

func (x *GetChatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsRequest.ProtoReflect.Descriptor instead.
func (*GetChatsRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetChatsRequest) GetQueryOptions() *v1.QueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

func (x *GetChatsRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetChatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetChatsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.GetChatsResponse_Result" json:"result,omitempty"`
	Chats  []*Metadata             `protobuf:"bytes,2,rep,name=chats,proto3" json:"chats,omitempty"`
}

func (x *GetChatsResponse) Reset() {
	*x = GetChatsResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsResponse) ProtoMessage() {}

func (x *GetChatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsResponse.ProtoReflect.Descriptor instead.
func (*GetChatsResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetChatsResponse) GetResult() GetChatsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetChatsResponse_OK
}

func (x *GetChatsResponse) GetChats() []*Metadata {
	if x != nil {
		return x.Chats
	}
	return nil
}

type GetChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*GetChatRequest_ChatId
	//	*GetChatRequest_RoomNumber
	Identifier     isGetChatRequest_Identifier `protobuf_oneof:"identifier"`
	ExcludeMembers bool                        `protobuf:"varint,9,opt,name=exclude_members,json=excludeMembers,proto3" json:"exclude_members,omitempty"`
	// Auth is an optional field that authenticates the call, which
	// can be used to fill out extra information in the Metadata.
	Auth *v1.Auth `protobuf:"bytes,10,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetChatRequest) Reset() {
	*x = GetChatRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRequest) ProtoMessage() {}

func (x *GetChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRequest.ProtoReflect.Descriptor instead.
func (*GetChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{4}
}

func (m *GetChatRequest) GetIdentifier() isGetChatRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetChatRequest) GetChatId() *v1.ChatId {
	if x, ok := x.GetIdentifier().(*GetChatRequest_ChatId); ok {
		return x.ChatId
	}
	return nil
}

func (x *GetChatRequest) GetRoomNumber() uint64 {
	if x, ok := x.GetIdentifier().(*GetChatRequest_RoomNumber); ok {
		return x.RoomNumber
	}
	return 0
}

func (x *GetChatRequest) GetExcludeMembers() bool {
	if x != nil {
		return x.ExcludeMembers
	}
	return false
}

func (x *GetChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type isGetChatRequest_Identifier interface {
	isGetChatRequest_Identifier()
}

type GetChatRequest_ChatId struct {
	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3,oneof"`
}

type GetChatRequest_RoomNumber struct {
	RoomNumber uint64 `protobuf:"varint,2,opt,name=room_number,json=roomNumber,proto3,oneof"`
}

func (*GetChatRequest_ChatId) isGetChatRequest_Identifier() {}

func (*GetChatRequest_RoomNumber) isGetChatRequest_Identifier() {}

type GetChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.GetChatResponse_Result" json:"result,omitempty"`
	// Metadata is the chat metadata, if result == OK.
	//
	// The contents of the metadata may change whether or not the
	// call was authenticated.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Members contains the chat members, if result == OK and were requested.
	Members []*Member `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetChatResponse) Reset() {
	*x = GetChatResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatResponse) ProtoMessage() {}

func (x *GetChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatResponse.ProtoReflect.Descriptor instead.
func (*GetChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetChatResponse) GetResult() GetChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetChatResponse_OK
}

func (x *GetChatResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetChatResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type StartChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*StartChatRequest_TwoWayChat
	//	*StartChatRequest_GroupChat
	Parameters isStartChatRequest_Parameters `protobuf_oneof:"parameters"`
	Auth       *v1.Auth                      `protobuf:"bytes,10,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *StartChatRequest) Reset() {
	*x = StartChatRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatRequest) ProtoMessage() {}

func (x *StartChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatRequest.ProtoReflect.Descriptor instead.
func (*StartChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{6}
}

func (m *StartChatRequest) GetParameters() isStartChatRequest_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *StartChatRequest) GetTwoWayChat() *StartChatRequest_StartTwoWayChatParameters {
	if x, ok := x.GetParameters().(*StartChatRequest_TwoWayChat); ok {
		return x.TwoWayChat
	}
	return nil
}

func (x *StartChatRequest) GetGroupChat() *StartChatRequest_StartGroupChatParameters {
	if x, ok := x.GetParameters().(*StartChatRequest_GroupChat); ok {
		return x.GroupChat
	}
	return nil
}

func (x *StartChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type isStartChatRequest_Parameters interface {
	isStartChatRequest_Parameters()
}

type StartChatRequest_TwoWayChat struct {
	TwoWayChat *StartChatRequest_StartTwoWayChatParameters `protobuf:"bytes,1,opt,name=two_way_chat,json=twoWayChat,proto3,oneof"`
}

type StartChatRequest_GroupChat struct {
	GroupChat *StartChatRequest_StartGroupChatParameters `protobuf:"bytes,2,opt,name=group_chat,json=groupChat,proto3,oneof"`
}

func (*StartChatRequest_TwoWayChat) isStartChatRequest_Parameters() {}

func (*StartChatRequest_GroupChat) isStartChatRequest_Parameters() {}

type StartChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result StartChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.StartChatResponse_Result" json:"result,omitempty"`
	// The chat to use, if result == OK.
	Chat *Metadata `protobuf:"bytes,2,opt,name=chat,proto3" json:"chat,omitempty"`
	// Members contains the chat members, if result == OK.
	Members []*Member `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *StartChatResponse) Reset() {
	*x = StartChatResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatResponse) ProtoMessage() {}

func (x *StartChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatResponse.ProtoReflect.Descriptor instead.
func (*StartChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{7}
}

func (x *StartChatResponse) GetResult() StartChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return StartChatResponse_OK
}

func (x *StartChatResponse) GetChat() *Metadata {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *StartChatResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type StartGroupChatPaymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user creating the group chat, who will be the initial owner
	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StartGroupChatPaymentMetadata) Reset() {
	*x = StartGroupChatPaymentMetadata{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartGroupChatPaymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGroupChatPaymentMetadata) ProtoMessage() {}

func (x *StartGroupChatPaymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGroupChatPaymentMetadata.ProtoReflect.Descriptor instead.
func (*StartGroupChatPaymentMetadata) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{8}
}

func (x *StartGroupChatPaymentMetadata) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

type JoinChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*JoinChatRequest_ChatId
	//	*JoinChatRequest_RoomId
	Identifier isJoinChatRequest_Identifier `protobuf_oneof:"identifier"`
	// Does the user want to join without the ability to send messages in the chat?
	// If so, then payment_intent is not required? Otherwise, it is.
	WithoutSendPermission bool `protobuf:"varint,8,opt,name=without_send_permission,json=withoutSendPermission,proto3" json:"without_send_permission,omitempty"`
	// The payment for joining a chat, which is required for sending messages in
	// the chat.
	//
	// Note: The chat owner can always bypass payment.
	PaymentIntent *v1.IntentId `protobuf:"bytes,9,opt,name=payment_intent,json=paymentIntent,proto3" json:"payment_intent,omitempty"`
	Auth          *v1.Auth     `protobuf:"bytes,10,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *JoinChatRequest) Reset() {
	*x = JoinChatRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChatRequest) ProtoMessage() {}

func (x *JoinChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChatRequest.ProtoReflect.Descriptor instead.
func (*JoinChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{9}
}

func (m *JoinChatRequest) GetIdentifier() isJoinChatRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *JoinChatRequest) GetChatId() *v1.ChatId {
	if x, ok := x.GetIdentifier().(*JoinChatRequest_ChatId); ok {
		return x.ChatId
	}
	return nil
}

func (x *JoinChatRequest) GetRoomId() uint64 {
	if x, ok := x.GetIdentifier().(*JoinChatRequest_RoomId); ok {
		return x.RoomId
	}
	return 0
}

func (x *JoinChatRequest) GetWithoutSendPermission() bool {
	if x != nil {
		return x.WithoutSendPermission
	}
	return false
}

func (x *JoinChatRequest) GetPaymentIntent() *v1.IntentId {
	if x != nil {
		return x.PaymentIntent
	}
	return nil
}

func (x *JoinChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type isJoinChatRequest_Identifier interface {
	isJoinChatRequest_Identifier()
}

type JoinChatRequest_ChatId struct {
	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3,oneof"`
}

type JoinChatRequest_RoomId struct {
	RoomId uint64 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3,oneof"`
}

func (*JoinChatRequest_ChatId) isJoinChatRequest_Identifier() {}

func (*JoinChatRequest_RoomId) isJoinChatRequest_Identifier() {}

type JoinChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result JoinChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.JoinChatResponse_Result" json:"result,omitempty"`
	// The chat metadata, if join was successful.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The members of the chat, if join was successful.
	Members []*Member `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *JoinChatResponse) Reset() {
	*x = JoinChatResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChatResponse) ProtoMessage() {}

func (x *JoinChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChatResponse.ProtoReflect.Descriptor instead.
func (*JoinChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{10}
}

func (x *JoinChatResponse) GetResult() JoinChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return JoinChatResponse_OK
}

func (x *JoinChatResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JoinChatResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type JoinChatPaymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user joining the chat
	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The chat that the user is joining
	ChatId *v1.ChatId `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *JoinChatPaymentMetadata) Reset() {
	*x = JoinChatPaymentMetadata{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChatPaymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChatPaymentMetadata) ProtoMessage() {}

func (x *JoinChatPaymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChatPaymentMetadata.ProtoReflect.Descriptor instead.
func (*JoinChatPaymentMetadata) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{11}
}

func (x *JoinChatPaymentMetadata) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *JoinChatPaymentMetadata) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

type LeaveChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *LeaveChatRequest) Reset() {
	*x = LeaveChatRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChatRequest) ProtoMessage() {}

func (x *LeaveChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChatRequest.ProtoReflect.Descriptor instead.
func (*LeaveChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{12}
}

func (x *LeaveChatRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *LeaveChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type LeaveChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result LeaveChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.LeaveChatResponse_Result" json:"result,omitempty"`
}

func (x *LeaveChatResponse) Reset() {
	*x = LeaveChatResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChatResponse) ProtoMessage() {}

func (x *LeaveChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChatResponse.ProtoReflect.Descriptor instead.
func (*LeaveChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{13}
}

func (x *LeaveChatResponse) GetResult() LeaveChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return LeaveChatResponse_OK
}

type OpenChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The chat that is being opened
	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *OpenChatRequest) Reset() {
	*x = OpenChatRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChatRequest) ProtoMessage() {}

func (x *OpenChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChatRequest.ProtoReflect.Descriptor instead.
func (*OpenChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{14}
}

func (x *OpenChatRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *OpenChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type OpenChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result OpenChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.OpenChatResponse_Result" json:"result,omitempty"`
}

func (x *OpenChatResponse) Reset() {
	*x = OpenChatResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenChatResponse) ProtoMessage() {}

func (x *OpenChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenChatResponse.ProtoReflect.Descriptor instead.
func (*OpenChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{15}
}

func (x *OpenChatResponse) GetResult() OpenChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return OpenChatResponse_OK
}

type CloseChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The chat that is being closed
	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *CloseChatRequest) Reset() {
	*x = CloseChatRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseChatRequest) ProtoMessage() {}

func (x *CloseChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseChatRequest.ProtoReflect.Descriptor instead.
func (*CloseChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{16}
}

func (x *CloseChatRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *CloseChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type CloseChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CloseChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.CloseChatResponse_Result" json:"result,omitempty"`
}

func (x *CloseChatResponse) Reset() {
	*x = CloseChatResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseChatResponse) ProtoMessage() {}

func (x *CloseChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseChatResponse.ProtoReflect.Descriptor instead.
func (*CloseChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{17}
}

func (x *CloseChatResponse) GetResult() CloseChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return CloseChatResponse_OK
}

type CheckDisplayNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *CheckDisplayNameRequest) Reset() {
	*x = CheckDisplayNameRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckDisplayNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDisplayNameRequest) ProtoMessage() {}

func (x *CheckDisplayNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDisplayNameRequest.ProtoReflect.Descriptor instead.
func (*CheckDisplayNameRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{18}
}

func (x *CheckDisplayNameRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type CheckDisplayNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    CheckDisplayNameResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.CheckDisplayNameResponse_Result" json:"result,omitempty"`
	IsAllowed bool                            `protobuf:"varint,2,opt,name=is_allowed,json=isAllowed,proto3" json:"is_allowed,omitempty"`
}

func (x *CheckDisplayNameResponse) Reset() {
	*x = CheckDisplayNameResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckDisplayNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDisplayNameResponse) ProtoMessage() {}

func (x *CheckDisplayNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDisplayNameResponse.ProtoReflect.Descriptor instead.
func (*CheckDisplayNameResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{19}
}

func (x *CheckDisplayNameResponse) GetResult() CheckDisplayNameResponse_Result {
	if x != nil {
		return x.Result
	}
	return CheckDisplayNameResponse_OK
}

func (x *CheckDisplayNameResponse) GetIsAllowed() bool {
	if x != nil {
		return x.IsAllowed
	}
	return false
}

type SetDisplayNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	DisplayName string     `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Auth        *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *SetDisplayNameRequest) Reset() {
	*x = SetDisplayNameRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDisplayNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDisplayNameRequest) ProtoMessage() {}

func (x *SetDisplayNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDisplayNameRequest.ProtoReflect.Descriptor instead.
func (*SetDisplayNameRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{20}
}

func (x *SetDisplayNameRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetDisplayNameRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SetDisplayNameRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type SetDisplayNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result               SetDisplayNameResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.SetDisplayNameResponse_Result" json:"result,omitempty"`
	AlternateSuggestions []string                      `protobuf:"bytes,2,rep,name=alternate_suggestions,json=alternateSuggestions,proto3" json:"alternate_suggestions,omitempty"`
}

func (x *SetDisplayNameResponse) Reset() {
	*x = SetDisplayNameResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDisplayNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDisplayNameResponse) ProtoMessage() {}

func (x *SetDisplayNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDisplayNameResponse.ProtoReflect.Descriptor instead.
func (*SetDisplayNameResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{21}
}

func (x *SetDisplayNameResponse) GetResult() SetDisplayNameResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetDisplayNameResponse_OK
}

func (x *SetDisplayNameResponse) GetAlternateSuggestions() []string {
	if x != nil {
		return x.AlternateSuggestions
	}
	return nil
}

type SetDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Auth        *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *SetDescriptionRequest) Reset() {
	*x = SetDescriptionRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDescriptionRequest) ProtoMessage() {}

func (x *SetDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDescriptionRequest.ProtoReflect.Descriptor instead.
func (*SetDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{22}
}

func (x *SetDescriptionRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetDescriptionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SetDescriptionRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type SetDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetDescriptionResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.SetDescriptionResponse_Result" json:"result,omitempty"`
}

func (x *SetDescriptionResponse) Reset() {
	*x = SetDescriptionResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDescriptionResponse) ProtoMessage() {}

func (x *SetDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDescriptionResponse.ProtoReflect.Descriptor instead.
func (*SetDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{23}
}

func (x *SetDescriptionResponse) GetResult() SetDescriptionResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetDescriptionResponse_OK
}

type SetCoverChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      *v1.ChatId        `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	CoverCharge *v1.PaymentAmount `protobuf:"bytes,2,opt,name=cover_charge,json=coverCharge,proto3" json:"cover_charge,omitempty"`
	Auth        *v1.Auth          `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *SetCoverChargeRequest) Reset() {
	*x = SetCoverChargeRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCoverChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoverChargeRequest) ProtoMessage() {}

func (x *SetCoverChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoverChargeRequest.ProtoReflect.Descriptor instead.
func (*SetCoverChargeRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{24}
}

func (x *SetCoverChargeRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetCoverChargeRequest) GetCoverCharge() *v1.PaymentAmount {
	if x != nil {
		return x.CoverCharge
	}
	return nil
}

func (x *SetCoverChargeRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type SetCoverChargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetCoverChargeResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.SetCoverChargeResponse_Result" json:"result,omitempty"`
}

func (x *SetCoverChargeResponse) Reset() {
	*x = SetCoverChargeResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCoverChargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoverChargeResponse) ProtoMessage() {}

func (x *SetCoverChargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoverChargeResponse.ProtoReflect.Descriptor instead.
func (*SetCoverChargeResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{25}
}

func (x *SetCoverChargeResponse) GetResult() SetCoverChargeResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetCoverChargeResponse_OK
}

type SetMessagingFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId       *v1.ChatId        `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MessagingFee *v1.PaymentAmount `protobuf:"bytes,2,opt,name=messaging_fee,json=messagingFee,proto3" json:"messaging_fee,omitempty"`
	Auth         *v1.Auth          `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *SetMessagingFeeRequest) Reset() {
	*x = SetMessagingFeeRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMessagingFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMessagingFeeRequest) ProtoMessage() {}

func (x *SetMessagingFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMessagingFeeRequest.ProtoReflect.Descriptor instead.
func (*SetMessagingFeeRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{26}
}

func (x *SetMessagingFeeRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetMessagingFeeRequest) GetMessagingFee() *v1.PaymentAmount {
	if x != nil {
		return x.MessagingFee
	}
	return nil
}

func (x *SetMessagingFeeRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type SetMessagingFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetMessagingFeeResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.SetMessagingFeeResponse_Result" json:"result,omitempty"`
}

func (x *SetMessagingFeeResponse) Reset() {
	*x = SetMessagingFeeResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMessagingFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMessagingFeeResponse) ProtoMessage() {}

func (x *SetMessagingFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMessagingFeeResponse.ProtoReflect.Descriptor instead.
func (*SetMessagingFeeResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{27}
}

func (x *SetMessagingFeeResponse) GetResult() SetMessagingFeeResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetMessagingFeeResponse_OK
}

type GetMemberUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// If not provided, a full refresh is performed. Server may also choose
	// to compact updates into a full or individual refresh.
	PagingToken *v1.PagingToken `protobuf:"bytes,2,opt,name=paging_token,json=pagingToken,proto3" json:"paging_token,omitempty"`
	// Auth is an optional field that authenticates the call, which
	// can be used to fill out extra information.
	Auth *v1.Auth `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetMemberUpdatesRequest) Reset() {
	*x = GetMemberUpdatesRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemberUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberUpdatesRequest) ProtoMessage() {}

func (x *GetMemberUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberUpdatesRequest.ProtoReflect.Descriptor instead.
func (*GetMemberUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{28}
}

func (x *GetMemberUpdatesRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GetMemberUpdatesRequest) GetPagingToken() *v1.PagingToken {
	if x != nil {
		return x.PagingToken
	}
	return nil
}

func (x *GetMemberUpdatesRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetMemberUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  GetMemberUpdatesResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.GetMemberUpdatesResponse_Result" json:"result,omitempty"`
	Updates []*MemberUpdate                 `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *GetMemberUpdatesResponse) Reset() {
	*x = GetMemberUpdatesResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemberUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemberUpdatesResponse) ProtoMessage() {}

func (x *GetMemberUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemberUpdatesResponse.ProtoReflect.Descriptor instead.
func (*GetMemberUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetMemberUpdatesResponse) GetResult() GetMemberUpdatesResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetMemberUpdatesResponse_OK
}

func (x *GetMemberUpdatesResponse) GetUpdates() []*MemberUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type PromoteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId *v1.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Enables send permissions when value is true
	EnableSendPermission bool     `protobuf:"varint,3,opt,name=enable_send_permission,json=enableSendPermission,proto3" json:"enable_send_permission,omitempty"`
	Auth                 *v1.Auth `protobuf:"bytes,100,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *PromoteUserRequest) Reset() {
	*x = PromoteUserRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteUserRequest) ProtoMessage() {}

func (x *PromoteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteUserRequest.ProtoReflect.Descriptor instead.
func (*PromoteUserRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{30}
}

func (x *PromoteUserRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *PromoteUserRequest) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *PromoteUserRequest) GetEnableSendPermission() bool {
	if x != nil {
		return x.EnableSendPermission
	}
	return false
}

func (x *PromoteUserRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type PromoteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result PromoteUserResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.PromoteUserResponse_Result" json:"result,omitempty"`
}

func (x *PromoteUserResponse) Reset() {
	*x = PromoteUserResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteUserResponse) ProtoMessage() {}

func (x *PromoteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteUserResponse.ProtoReflect.Descriptor instead.
func (*PromoteUserResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{31}
}

func (x *PromoteUserResponse) GetResult() PromoteUserResponse_Result {
	if x != nil {
		return x.Result
	}
	return PromoteUserResponse_OK
}

type DemoteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId *v1.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Disables send permissions when value is true
	DisableSendPermission bool     `protobuf:"varint,3,opt,name=disable_send_permission,json=disableSendPermission,proto3" json:"disable_send_permission,omitempty"`
	Auth                  *v1.Auth `protobuf:"bytes,100,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *DemoteUserRequest) Reset() {
	*x = DemoteUserRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemoteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteUserRequest) ProtoMessage() {}

func (x *DemoteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteUserRequest.ProtoReflect.Descriptor instead.
func (*DemoteUserRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{32}
}

func (x *DemoteUserRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *DemoteUserRequest) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *DemoteUserRequest) GetDisableSendPermission() bool {
	if x != nil {
		return x.DisableSendPermission
	}
	return false
}

func (x *DemoteUserRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type DemoteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result DemoteUserResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.DemoteUserResponse_Result" json:"result,omitempty"`
}

func (x *DemoteUserResponse) Reset() {
	*x = DemoteUserResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemoteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteUserResponse) ProtoMessage() {}

func (x *DemoteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteUserResponse.ProtoReflect.Descriptor instead.
func (*DemoteUserResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{33}
}

func (x *DemoteUserResponse) GetResult() DemoteUserResponse_Result {
	if x != nil {
		return x.Result
	}
	return DemoteUserResponse_OK
}

type RemoveUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId *v1.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *RemoveUserRequest) Reset() {
	*x = RemoveUserRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserRequest) ProtoMessage() {}

func (x *RemoveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{34}
}

func (x *RemoveUserRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *RemoveUserRequest) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *RemoveUserRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type RemoveUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result RemoveUserResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.RemoveUserResponse_Result" json:"result,omitempty"`
}

func (x *RemoveUserResponse) Reset() {
	*x = RemoveUserResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserResponse) ProtoMessage() {}

func (x *RemoveUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{35}
}

func (x *RemoveUserResponse) GetResult() RemoveUserResponse_Result {
	if x != nil {
		return x.Result
	}
	return RemoveUserResponse_OK
}

type MuteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId *v1.UserId `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *MuteUserRequest) Reset() {
	*x = MuteUserRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MuteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteUserRequest) ProtoMessage() {}

func (x *MuteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteUserRequest.ProtoReflect.Descriptor instead.
func (*MuteUserRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{36}
}

func (x *MuteUserRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *MuteUserRequest) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *MuteUserRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type MuteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result MuteUserResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.MuteUserResponse_Result" json:"result,omitempty"`
}

func (x *MuteUserResponse) Reset() {
	*x = MuteUserResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MuteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteUserResponse) ProtoMessage() {}

func (x *MuteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteUserResponse.ProtoReflect.Descriptor instead.
func (*MuteUserResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{37}
}

func (x *MuteUserResponse) GetResult() MuteUserResponse_Result {
	if x != nil {
		return x.Result
	}
	return MuteUserResponse_OK
}

type MuteChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *MuteChatRequest) Reset() {
	*x = MuteChatRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MuteChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteChatRequest) ProtoMessage() {}

func (x *MuteChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteChatRequest.ProtoReflect.Descriptor instead.
func (*MuteChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{38}
}

func (x *MuteChatRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *MuteChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type MuteChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result MuteChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.MuteChatResponse_Result" json:"result,omitempty"`
}

func (x *MuteChatResponse) Reset() {
	*x = MuteChatResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MuteChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteChatResponse) ProtoMessage() {}

func (x *MuteChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteChatResponse.ProtoReflect.Descriptor instead.
func (*MuteChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{39}
}

func (x *MuteChatResponse) GetResult() MuteChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return MuteChatResponse_OK
}

type UnmuteChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *UnmuteChatRequest) Reset() {
	*x = UnmuteChatRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnmuteChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmuteChatRequest) ProtoMessage() {}

func (x *UnmuteChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmuteChatRequest.ProtoReflect.Descriptor instead.
func (*UnmuteChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{40}
}

func (x *UnmuteChatRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *UnmuteChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type UnmuteChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result UnmuteChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.UnmuteChatResponse_Result" json:"result,omitempty"`
}

func (x *UnmuteChatResponse) Reset() {
	*x = UnmuteChatResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnmuteChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmuteChatResponse) ProtoMessage() {}

func (x *UnmuteChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmuteChatResponse.ProtoReflect.Descriptor instead.
func (*UnmuteChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{41}
}

func (x *UnmuteChatResponse) GetResult() UnmuteChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return UnmuteChatResponse_OK
}

type ReportUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *v1.UserId     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MessageId *v11.MessageId `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Auth      *v1.Auth       `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *ReportUserRequest) Reset() {
	*x = ReportUserRequest{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUserRequest) ProtoMessage() {}

func (x *ReportUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUserRequest.ProtoReflect.Descriptor instead.
func (*ReportUserRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{42}
}

func (x *ReportUserRequest) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *ReportUserRequest) GetMessageId() *v11.MessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *ReportUserRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ReportUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ReportUserResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.ReportUserResponse_Result" json:"result,omitempty"`
}

func (x *ReportUserResponse) Reset() {
	*x = ReportUserResponse{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUserResponse) ProtoMessage() {}

func (x *ReportUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUserResponse.ProtoReflect.Descriptor instead.
func (*ReportUserResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{43}
}

func (x *ReportUserResponse) GetResult() ReportUserResponse_Result {
	if x != nil {
		return x.Result
	}
	return ReportUserResponse_OK
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// The type of chat
	Type Metadata_ChatType `protobuf:"varint,2,opt,name=type,proto3,enum=flipchat.chat.v1.Metadata_ChatType" json:"type,omitempty"`
	// The chat display name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// If non-zero, the room number associated with the chat.
	RoomNumber uint64 `protobuf:"varint,4,opt,name=room_number,json=roomNumber,proto3" json:"room_number,omitempty"`
	// Are push notifications enabled for this chat (from the perspective of the caller)?
	IsPushEnabled bool `protobuf:"varint,5,opt,name=is_push_enabled,json=isPushEnabled,proto3" json:"is_push_enabled,omitempty"`
	// Can the user disable push notifications for this chat using MuteChat?
	CanDisablePush bool `protobuf:"varint,6,opt,name=can_disable_push,json=canDisablePush,proto3" json:"can_disable_push,omitempty"`
	// Number of (estimated) unread message (from the perspective of the caller).
	NumUnread uint32 `protobuf:"varint,7,opt,name=num_unread,json=numUnread,proto3" json:"num_unread,omitempty"`
	// If there are more unread messages than indicated by num_unread. If this is
	// true, client should show num_unread+ as the unread count.
	HasMoreUnread bool `protobuf:"varint,11,opt,name=has_more_unread,json=hasMoreUnread,proto3" json:"has_more_unread,omitempty"`
	// Owner is the owner/creator of the chat.
	//
	// This is a super priviledge role, in which there can only be one.
	// This role is displayed as a 'host' currently.
	Owner *v1.UserId `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	// If present, the fee that must be paid to send a message as a non-regular
	// chat member.
	//
	// This replaces the legacy cover charge mechanic, which is deprecated
	MessagingFee *v1.PaymentAmount `protobuf:"bytes,9,opt,name=messaging_fee,json=messagingFee,proto3" json:"messaging_fee,omitempty"`
	// The timestamp of the last activity in this chat
	LastActivity *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	// The status as to whether the room is open or closed. This may be
	// omitted for chats where it doesn't apply. If not provided, it's
	// safe to assume the chat is open indefinitely until otherwise provided.
	OpenStatus *OpenStatus `protobuf:"bytes,12,opt,name=open_status,json=openStatus,proto3" json:"open_status,omitempty"`
	// Chat description
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{44}
}

func (x *Metadata) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *Metadata) GetType() Metadata_ChatType {
	if x != nil {
		return x.Type
	}
	return Metadata_UNKNOWN
}

func (x *Metadata) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Metadata) GetRoomNumber() uint64 {
	if x != nil {
		return x.RoomNumber
	}
	return 0
}

func (x *Metadata) GetIsPushEnabled() bool {
	if x != nil {
		return x.IsPushEnabled
	}
	return false
}

func (x *Metadata) GetCanDisablePush() bool {
	if x != nil {
		return x.CanDisablePush
	}
	return false
}

func (x *Metadata) GetNumUnread() uint32 {
	if x != nil {
		return x.NumUnread
	}
	return 0
}

func (x *Metadata) GetHasMoreUnread() bool {
	if x != nil {
		return x.HasMoreUnread
	}
	return false
}

func (x *Metadata) GetOwner() *v1.UserId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Metadata) GetMessagingFee() *v1.PaymentAmount {
	if x != nil {
		return x.MessagingFee
	}
	return nil
}

func (x *Metadata) GetLastActivity() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivity
	}
	return nil
}

func (x *Metadata) GetOpenStatus() *OpenStatus {
	if x != nil {
		return x.OpenStatus
	}
	return nil
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// todo: In the future, we may add additional fields like open/closed until a timestamp, etc.
//
//	For backwards compatibility, client can always refer to is_currently_open for whether
//	a room is open right now or not for the purposes of sending messages.
//
// todo: A better name for this
type OpenStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCurrentlyOpen bool `protobuf:"varint,1,opt,name=is_currently_open,json=isCurrentlyOpen,proto3" json:"is_currently_open,omitempty"`
}

func (x *OpenStatus) Reset() {
	*x = OpenStatus{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenStatus) ProtoMessage() {}

func (x *OpenStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenStatus.ProtoReflect.Descriptor instead.
func (*OpenStatus) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{45}
}

func (x *OpenStatus) GetIsCurrentlyOpen() bool {
	if x != nil {
		return x.IsCurrentlyOpen
	}
	return false
}

type MetadataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*MetadataUpdate_FullRefresh_
	//	*MetadataUpdate_UnreadCountChanged_
	//	*MetadataUpdate_DisplayNameChanged_
	//	*MetadataUpdate_MessagingFeeChanged_
	//	*MetadataUpdate_LastActivityChanged_
	//	*MetadataUpdate_OpenStatusChanged_
	//	*MetadataUpdate_DescriptionChanged_
	Kind isMetadataUpdate_Kind `protobuf_oneof:"kind"`
}

func (x *MetadataUpdate) Reset() {
	*x = MetadataUpdate{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdate) ProtoMessage() {}

func (x *MetadataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdate.ProtoReflect.Descriptor instead.
func (*MetadataUpdate) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{46}
}

func (m *MetadataUpdate) GetKind() isMetadataUpdate_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *MetadataUpdate) GetFullRefresh() *MetadataUpdate_FullRefresh {
	if x, ok := x.GetKind().(*MetadataUpdate_FullRefresh_); ok {
		return x.FullRefresh
	}
	return nil
}

func (x *MetadataUpdate) GetUnreadCountChanged() *MetadataUpdate_UnreadCountChanged {
	if x, ok := x.GetKind().(*MetadataUpdate_UnreadCountChanged_); ok {
		return x.UnreadCountChanged
	}
	return nil
}

func (x *MetadataUpdate) GetDisplayNameChanged() *MetadataUpdate_DisplayNameChanged {
	if x, ok := x.GetKind().(*MetadataUpdate_DisplayNameChanged_); ok {
		return x.DisplayNameChanged
	}
	return nil
}

func (x *MetadataUpdate) GetMessagingFeeChanged() *MetadataUpdate_MessagingFeeChanged {
	if x, ok := x.GetKind().(*MetadataUpdate_MessagingFeeChanged_); ok {
		return x.MessagingFeeChanged
	}
	return nil
}

func (x *MetadataUpdate) GetLastActivityChanged() *MetadataUpdate_LastActivityChanged {
	if x, ok := x.GetKind().(*MetadataUpdate_LastActivityChanged_); ok {
		return x.LastActivityChanged
	}
	return nil
}

func (x *MetadataUpdate) GetOpenStatusChanged() *MetadataUpdate_OpenStatusChanged {
	if x, ok := x.GetKind().(*MetadataUpdate_OpenStatusChanged_); ok {
		return x.OpenStatusChanged
	}
	return nil
}

func (x *MetadataUpdate) GetDescriptionChanged() *MetadataUpdate_DescriptionChanged {
	if x, ok := x.GetKind().(*MetadataUpdate_DescriptionChanged_); ok {
		return x.DescriptionChanged
	}
	return nil
}

type isMetadataUpdate_Kind interface {
	isMetadataUpdate_Kind()
}

type MetadataUpdate_FullRefresh_ struct {
	FullRefresh *MetadataUpdate_FullRefresh `protobuf:"bytes,1,opt,name=full_refresh,json=fullRefresh,proto3,oneof"`
}

type MetadataUpdate_UnreadCountChanged_ struct {
	UnreadCountChanged *MetadataUpdate_UnreadCountChanged `protobuf:"bytes,2,opt,name=unread_count_changed,json=unreadCountChanged,proto3,oneof"`
}

type MetadataUpdate_DisplayNameChanged_ struct {
	DisplayNameChanged *MetadataUpdate_DisplayNameChanged `protobuf:"bytes,3,opt,name=display_name_changed,json=displayNameChanged,proto3,oneof"`
}

type MetadataUpdate_MessagingFeeChanged_ struct {
	MessagingFeeChanged *MetadataUpdate_MessagingFeeChanged `protobuf:"bytes,4,opt,name=messaging_fee_changed,json=messagingFeeChanged,proto3,oneof"`
}

type MetadataUpdate_LastActivityChanged_ struct {
	LastActivityChanged *MetadataUpdate_LastActivityChanged `protobuf:"bytes,5,opt,name=last_activity_changed,json=lastActivityChanged,proto3,oneof"`
}

type MetadataUpdate_OpenStatusChanged_ struct {
	OpenStatusChanged *MetadataUpdate_OpenStatusChanged `protobuf:"bytes,6,opt,name=open_status_changed,json=openStatusChanged,proto3,oneof"`
}

type MetadataUpdate_DescriptionChanged_ struct {
	DescriptionChanged *MetadataUpdate_DescriptionChanged `protobuf:"bytes,7,opt,name=description_changed,json=descriptionChanged,proto3,oneof"`
}

func (*MetadataUpdate_FullRefresh_) isMetadataUpdate_Kind() {}

func (*MetadataUpdate_UnreadCountChanged_) isMetadataUpdate_Kind() {}

func (*MetadataUpdate_DisplayNameChanged_) isMetadataUpdate_Kind() {}

func (*MetadataUpdate_MessagingFeeChanged_) isMetadataUpdate_Kind() {}

func (*MetadataUpdate_LastActivityChanged_) isMetadataUpdate_Kind() {}

func (*MetadataUpdate_OpenStatusChanged_) isMetadataUpdate_Kind() {}

func (*MetadataUpdate_DescriptionChanged_) isMetadataUpdate_Kind() {}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The chat member's identity/profile information.
	//
	// It is a light weight version of the users full profile, which
	// can be retrieved from the Profile service.
	Identity *MemberIdentity `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// Chat message state for this member.
	//
	// If set, the list may contain DELIVERED and READ pointers. SENT pointers
	// are only shared between the sender and server, to indicate persistence.
	//
	// The server may wish to omit all pointers in various types of group chats
	// or as relief valves.
	Pointers []*v11.Pointer `protobuf:"bytes,3,rep,name=pointers,proto3" json:"pointers,omitempty"`
	// If the member is the caller (where applicable), will be set to true.
	IsSelf bool `protobuf:"varint,4,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"`
	// Does the chat member have permission to perform moderation actions in
	// the chat?
	HasModeratorPermission bool `protobuf:"varint,5,opt,name=has_moderator_permission,json=hasModeratorPermission,proto3" json:"has_moderator_permission,omitempty"`
	// Has the chat member been muted by a moderator? If so, they cannot send
	// messages, even if they paid for the permission.
	IsMuted bool `protobuf:"varint,6,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	// Does the chat member have permission to send messages in the chat? If
	// not, the user is considered to be a spectator or listener. Otherwise,
	// they are a speaker.
	HasSendPermission bool `protobuf:"varint,7,opt,name=has_send_permission,json=hasSendPermission,proto3" json:"has_send_permission,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{47}
}

func (x *Member) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *Member) GetIdentity() *MemberIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Member) GetPointers() []*v11.Pointer {
	if x != nil {
		return x.Pointers
	}
	return nil
}

func (x *Member) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

func (x *Member) GetHasModeratorPermission() bool {
	if x != nil {
		return x.HasModeratorPermission
	}
	return false
}

func (x *Member) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *Member) GetHasSendPermission() bool {
	if x != nil {
		return x.HasSendPermission
	}
	return false
}

type MemberIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If present, the display name of the user.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// If present, the URL of the users profile pic.
	ProfilePicUrl string `protobuf:"bytes,2,opt,name=profile_pic_url,json=profilePicUrl,proto3" json:"profile_pic_url,omitempty"`
	// The linked social profiles of the user
	SocialProfiles []*v12.SocialProfile `protobuf:"bytes,3,rep,name=social_profiles,json=socialProfiles,proto3" json:"social_profiles,omitempty"`
}

func (x *MemberIdentity) Reset() {
	*x = MemberIdentity{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberIdentity) ProtoMessage() {}

func (x *MemberIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberIdentity.ProtoReflect.Descriptor instead.
func (*MemberIdentity) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{48}
}

func (x *MemberIdentity) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MemberIdentity) GetProfilePicUrl() string {
	if x != nil {
		return x.ProfilePicUrl
	}
	return ""
}

func (x *MemberIdentity) GetSocialProfiles() []*v12.SocialProfile {
	if x != nil {
		return x.SocialProfiles
	}
	return nil
}

type MemberUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*MemberUpdate_FullRefresh_
	//	*MemberUpdate_IndividualRefresh_
	//	*MemberUpdate_Joined_
	//	*MemberUpdate_Left_
	//	*MemberUpdate_Removed_
	//	*MemberUpdate_Muted_
	//	*MemberUpdate_Promoted_
	//	*MemberUpdate_Demoted_
	//	*MemberUpdate_IdentityChanged_
	Kind        isMemberUpdate_Kind `protobuf_oneof:"kind"`
	PagingToken *v1.PagingToken     `protobuf:"bytes,1000,opt,name=paging_token,json=pagingToken,proto3" json:"paging_token,omitempty"`
}

func (x *MemberUpdate) Reset() {
	*x = MemberUpdate{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate) ProtoMessage() {}

func (x *MemberUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate.ProtoReflect.Descriptor instead.
func (*MemberUpdate) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49}
}

func (m *MemberUpdate) GetKind() isMemberUpdate_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *MemberUpdate) GetFullRefresh() *MemberUpdate_FullRefresh {
	if x, ok := x.GetKind().(*MemberUpdate_FullRefresh_); ok {
		return x.FullRefresh
	}
	return nil
}

func (x *MemberUpdate) GetIndividualRefresh() *MemberUpdate_IndividualRefresh {
	if x, ok := x.GetKind().(*MemberUpdate_IndividualRefresh_); ok {
		return x.IndividualRefresh
	}
	return nil
}

func (x *MemberUpdate) GetJoined() *MemberUpdate_Joined {
	if x, ok := x.GetKind().(*MemberUpdate_Joined_); ok {
		return x.Joined
	}
	return nil
}

func (x *MemberUpdate) GetLeft() *MemberUpdate_Left {
	if x, ok := x.GetKind().(*MemberUpdate_Left_); ok {
		return x.Left
	}
	return nil
}

func (x *MemberUpdate) GetRemoved() *MemberUpdate_Removed {
	if x, ok := x.GetKind().(*MemberUpdate_Removed_); ok {
		return x.Removed
	}
	return nil
}

func (x *MemberUpdate) GetMuted() *MemberUpdate_Muted {
	if x, ok := x.GetKind().(*MemberUpdate_Muted_); ok {
		return x.Muted
	}
	return nil
}

func (x *MemberUpdate) GetPromoted() *MemberUpdate_Promoted {
	if x, ok := x.GetKind().(*MemberUpdate_Promoted_); ok {
		return x.Promoted
	}
	return nil
}

func (x *MemberUpdate) GetDemoted() *MemberUpdate_Demoted {
	if x, ok := x.GetKind().(*MemberUpdate_Demoted_); ok {
		return x.Demoted
	}
	return nil
}

func (x *MemberUpdate) GetIdentityChanged() *MemberUpdate_IdentityChanged {
	if x, ok := x.GetKind().(*MemberUpdate_IdentityChanged_); ok {
		return x.IdentityChanged
	}
	return nil
}

func (x *MemberUpdate) GetPagingToken() *v1.PagingToken {
	if x != nil {
		return x.PagingToken
	}
	return nil
}

type isMemberUpdate_Kind interface {
	isMemberUpdate_Kind()
}

type MemberUpdate_FullRefresh_ struct {
	FullRefresh *MemberUpdate_FullRefresh `protobuf:"bytes,1,opt,name=full_refresh,json=fullRefresh,proto3,oneof"`
}

type MemberUpdate_IndividualRefresh_ struct {
	IndividualRefresh *MemberUpdate_IndividualRefresh `protobuf:"bytes,2,opt,name=individual_refresh,json=individualRefresh,proto3,oneof"`
}

type MemberUpdate_Joined_ struct {
	Joined *MemberUpdate_Joined `protobuf:"bytes,3,opt,name=joined,proto3,oneof"`
}

type MemberUpdate_Left_ struct {
	Left *MemberUpdate_Left `protobuf:"bytes,4,opt,name=left,proto3,oneof"`
}

type MemberUpdate_Removed_ struct {
	Removed *MemberUpdate_Removed `protobuf:"bytes,5,opt,name=removed,proto3,oneof"`
}

type MemberUpdate_Muted_ struct {
	Muted *MemberUpdate_Muted `protobuf:"bytes,6,opt,name=muted,proto3,oneof"`
}

type MemberUpdate_Promoted_ struct {
	Promoted *MemberUpdate_Promoted `protobuf:"bytes,7,opt,name=promoted,proto3,oneof"`
}

type MemberUpdate_Demoted_ struct {
	Demoted *MemberUpdate_Demoted `protobuf:"bytes,8,opt,name=demoted,proto3,oneof"`
}

type MemberUpdate_IdentityChanged_ struct {
	IdentityChanged *MemberUpdate_IdentityChanged `protobuf:"bytes,9,opt,name=identity_changed,json=identityChanged,proto3,oneof"`
}

func (*MemberUpdate_FullRefresh_) isMemberUpdate_Kind() {}

func (*MemberUpdate_IndividualRefresh_) isMemberUpdate_Kind() {}

func (*MemberUpdate_Joined_) isMemberUpdate_Kind() {}

func (*MemberUpdate_Left_) isMemberUpdate_Kind() {}

func (*MemberUpdate_Removed_) isMemberUpdate_Kind() {}

func (*MemberUpdate_Muted_) isMemberUpdate_Kind() {}

func (*MemberUpdate_Promoted_) isMemberUpdate_Kind() {}

func (*MemberUpdate_Demoted_) isMemberUpdate_Kind() {}

func (*MemberUpdate_IdentityChanged_) isMemberUpdate_Kind() {}

type StreamChatEventsRequest_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *v1.Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// ts contains the time for stream open.
	//
	// It is used primarily as a nonce for auth. Server may reject
	// timestamps that are too far in the future or past.
	Ts *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *StreamChatEventsRequest_Params) Reset() {
	*x = StreamChatEventsRequest_Params{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsRequest_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsRequest_Params) ProtoMessage() {}

func (x *StreamChatEventsRequest_Params) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsRequest_Params.ProtoReflect.Descriptor instead.
func (*StreamChatEventsRequest_Params) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StreamChatEventsRequest_Params) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *StreamChatEventsRequest_Params) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type StreamChatEventsResponse_StreamError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code StreamChatEventsResponse_StreamError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=flipchat.chat.v1.StreamChatEventsResponse_StreamError_Code" json:"code,omitempty"`
}

func (x *StreamChatEventsResponse_StreamError) Reset() {
	*x = StreamChatEventsResponse_StreamError{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_StreamError) ProtoMessage() {}

func (x *StreamChatEventsResponse_StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_StreamError.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_StreamError) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StreamChatEventsResponse_StreamError) GetCode() StreamChatEventsResponse_StreamError_Code {
	if x != nil {
		return x.Code
	}
	return StreamChatEventsResponse_StreamError_DENIED
}

type StreamChatEventsResponse_EventBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*StreamChatEventsResponse_ChatUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *StreamChatEventsResponse_EventBatch) Reset() {
	*x = StreamChatEventsResponse_EventBatch{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_EventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_EventBatch) ProtoMessage() {}

func (x *StreamChatEventsResponse_EventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_EventBatch.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_EventBatch) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StreamChatEventsResponse_EventBatch) GetUpdates() []*StreamChatEventsResponse_ChatUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// ChatUpdate contains a set of updates for a given chat id.
//
// Only the relevant fields will be set on update. On initial
// stream open, all fields will be set, however.
type StreamChatEventsResponse_ChatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Metadata contains the latest (full) chat metadata.
	//
	// Deprecated: Use metadata_updates instead. For backwards compatibility
	// this will only contain full metadata refreshes.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// MetadataUpdate contains updates to a chat metadata
	MetadataUpdates []*MetadataUpdate `protobuf:"bytes,7,rep,name=metadata_updates,json=metadataUpdates,proto3" json:"metadata_updates,omitempty"`
	// MemberUpdate contains an update to the membership set.
	//
	// Deprecated: Use member_updates instead. For backwards compatibility
	// this will only contain full member refreshes.
	MemberUpdate *MemberUpdate `protobuf:"bytes,3,opt,name=member_update,json=memberUpdate,proto3" json:"member_update,omitempty"`
	// MemberUpdate contains updates to the membership set.
	MemberUpdates []*MemberUpdate `protobuf:"bytes,8,rep,name=member_updates,json=memberUpdates,proto3" json:"member_updates,omitempty"`
	// Message contains the last known message of the chat.
	LastMessage *v11.Message `protobuf:"bytes,4,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	// Relevant update to a chat member's pointer state, where 'relevant' means
	// "relevant to UI updates". For example, when a user has read the latest
	// message.
	//
	// Note: Updates now go through the message stream, but may be rediverted here
	// in the future
	Pointer *v11.PointerUpdate `protobuf:"bytes,5,opt,name=pointer,proto3" json:"pointer,omitempty"`
	// IsTyping indicates whether or not someone is typing in the group.
	//
	// Note: Updates now go through the message stream, but may be rediverted here
	// in the future
	IsTyping *v11.IsTyping `protobuf:"bytes,6,opt,name=is_typing,json=isTyping,proto3" json:"is_typing,omitempty"`
}

func (x *StreamChatEventsResponse_ChatUpdate) Reset() {
	*x = StreamChatEventsResponse_ChatUpdate{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_ChatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_ChatUpdate) ProtoMessage() {}

func (x *StreamChatEventsResponse_ChatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_ChatUpdate.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_ChatUpdate) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *StreamChatEventsResponse_ChatUpdate) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetMetadataUpdates() []*MetadataUpdate {
	if x != nil {
		return x.MetadataUpdates
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetMemberUpdate() *MemberUpdate {
	if x != nil {
		return x.MemberUpdate
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetMemberUpdates() []*MemberUpdate {
	if x != nil {
		return x.MemberUpdates
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetLastMessage() *v11.Message {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetPointer() *v11.PointerUpdate {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetIsTyping() *v11.IsTyping {
	if x != nil {
		return x.IsTyping
	}
	return nil
}

// StartTwoWayChatParameters contains the parameters required to start
// or recover a two way chat between the caller and the specified 'other_user'.
//
// The 'other_user' is currently the 'tip_address', normally retrieved from
// user.Identity.GetTwitterUser(username).
type StartChatRequest_StartTwoWayChatParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account id of the user the caller wishes to chat with.
	OtherUserId *v1.UserId `protobuf:"bytes,1,opt,name=other_user_id,json=otherUserId,proto3" json:"other_user_id,omitempty"`
}

func (x *StartChatRequest_StartTwoWayChatParameters) Reset() {
	*x = StartChatRequest_StartTwoWayChatParameters{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatRequest_StartTwoWayChatParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatRequest_StartTwoWayChatParameters) ProtoMessage() {}

func (x *StartChatRequest_StartTwoWayChatParameters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatRequest_StartTwoWayChatParameters.ProtoReflect.Descriptor instead.
func (*StartChatRequest_StartTwoWayChatParameters) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *StartChatRequest_StartTwoWayChatParameters) GetOtherUserId() *v1.UserId {
	if x != nil {
		return x.OtherUserId
	}
	return nil
}

type StartChatRequest_StartGroupChatParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of users (not including self) to initially set in the group chat.
	Users []*v1.UserId `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// Optional display name for the group chat
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional payment for creating the group. It's up to server to decide
	// if the user is allowed to create a group without payment.
	PaymentIntent *v1.IntentId `protobuf:"bytes,3,opt,name=payment_intent,json=paymentIntent,proto3" json:"payment_intent,omitempty"`
}

func (x *StartChatRequest_StartGroupChatParameters) Reset() {
	*x = StartChatRequest_StartGroupChatParameters{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatRequest_StartGroupChatParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatRequest_StartGroupChatParameters) ProtoMessage() {}

func (x *StartChatRequest_StartGroupChatParameters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatRequest_StartGroupChatParameters.ProtoReflect.Descriptor instead.
func (*StartChatRequest_StartGroupChatParameters) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{6, 1}
}

func (x *StartChatRequest_StartGroupChatParameters) GetUsers() []*v1.UserId {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *StartChatRequest_StartGroupChatParameters) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *StartChatRequest_StartGroupChatParameters) GetPaymentIntent() *v1.IntentId {
	if x != nil {
		return x.PaymentIntent
	}
	return nil
}

// Refreshes the entire chat metadata
type MetadataUpdate_FullRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataUpdate_FullRefresh) Reset() {
	*x = MetadataUpdate_FullRefresh{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataUpdate_FullRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdate_FullRefresh) ProtoMessage() {}

func (x *MetadataUpdate_FullRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdate_FullRefresh.ProtoReflect.Descriptor instead.
func (*MetadataUpdate_FullRefresh) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{46, 0}
}

func (x *MetadataUpdate_FullRefresh) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// New message in the chat has generated a new unread count
type MetadataUpdate_UnreadCountChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of (estimated) unread message
	NumUnread uint32 `protobuf:"varint,1,opt,name=num_unread,json=numUnread,proto3" json:"num_unread,omitempty"`
	// If there are more unread messages than indicated by num_unread.
	// If this is true, client should show num_unread+ as the unread count.
	HasMoreUnread bool `protobuf:"varint,2,opt,name=has_more_unread,json=hasMoreUnread,proto3" json:"has_more_unread,omitempty"`
}

func (x *MetadataUpdate_UnreadCountChanged) Reset() {
	*x = MetadataUpdate_UnreadCountChanged{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataUpdate_UnreadCountChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdate_UnreadCountChanged) ProtoMessage() {}

func (x *MetadataUpdate_UnreadCountChanged) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdate_UnreadCountChanged.ProtoReflect.Descriptor instead.
func (*MetadataUpdate_UnreadCountChanged) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{46, 1}
}

func (x *MetadataUpdate_UnreadCountChanged) GetNumUnread() uint32 {
	if x != nil {
		return x.NumUnread
	}
	return 0
}

func (x *MetadataUpdate_UnreadCountChanged) GetHasMoreUnread() bool {
	if x != nil {
		return x.HasMoreUnread
	}
	return false
}

// The chat display name has been updated to a new value
type MetadataUpdate_DisplayNameChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDisplayName string `protobuf:"bytes,1,opt,name=new_display_name,json=newDisplayName,proto3" json:"new_display_name,omitempty"`
}

func (x *MetadataUpdate_DisplayNameChanged) Reset() {
	*x = MetadataUpdate_DisplayNameChanged{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataUpdate_DisplayNameChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdate_DisplayNameChanged) ProtoMessage() {}

func (x *MetadataUpdate_DisplayNameChanged) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdate_DisplayNameChanged.ProtoReflect.Descriptor instead.
func (*MetadataUpdate_DisplayNameChanged) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{46, 2}
}

func (x *MetadataUpdate_DisplayNameChanged) GetNewDisplayName() string {
	if x != nil {
		return x.NewDisplayName
	}
	return ""
}

// The chat messaging fee has been updated to a new value
type MetadataUpdate_MessagingFeeChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewMessagingFee *v1.PaymentAmount `protobuf:"bytes,1,opt,name=new_messaging_fee,json=newMessagingFee,proto3" json:"new_messaging_fee,omitempty"`
}

func (x *MetadataUpdate_MessagingFeeChanged) Reset() {
	*x = MetadataUpdate_MessagingFeeChanged{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataUpdate_MessagingFeeChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdate_MessagingFeeChanged) ProtoMessage() {}

func (x *MetadataUpdate_MessagingFeeChanged) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdate_MessagingFeeChanged.ProtoReflect.Descriptor instead.
func (*MetadataUpdate_MessagingFeeChanged) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{46, 3}
}

func (x *MetadataUpdate_MessagingFeeChanged) GetNewMessagingFee() *v1.PaymentAmount {
	if x != nil {
		return x.NewMessagingFee
	}
	return nil
}

// The last activity timestamp has changed to a newer value
type MetadataUpdate_LastActivityChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLastActivity *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=new_last_activity,json=newLastActivity,proto3" json:"new_last_activity,omitempty"`
}

func (x *MetadataUpdate_LastActivityChanged) Reset() {
	*x = MetadataUpdate_LastActivityChanged{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataUpdate_LastActivityChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdate_LastActivityChanged) ProtoMessage() {}

func (x *MetadataUpdate_LastActivityChanged) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdate_LastActivityChanged.ProtoReflect.Descriptor instead.
func (*MetadataUpdate_LastActivityChanged) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{46, 4}
}

func (x *MetadataUpdate_LastActivityChanged) GetNewLastActivity() *timestamppb.Timestamp {
	if x != nil {
		return x.NewLastActivity
	}
	return nil
}

// The open status has changed to a newer value
type MetadataUpdate_OpenStatusChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewOpenStatus *OpenStatus `protobuf:"bytes,1,opt,name=new_open_status,json=newOpenStatus,proto3" json:"new_open_status,omitempty"`
}

func (x *MetadataUpdate_OpenStatusChanged) Reset() {
	*x = MetadataUpdate_OpenStatusChanged{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataUpdate_OpenStatusChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdate_OpenStatusChanged) ProtoMessage() {}

func (x *MetadataUpdate_OpenStatusChanged) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdate_OpenStatusChanged.ProtoReflect.Descriptor instead.
func (*MetadataUpdate_OpenStatusChanged) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{46, 5}
}

func (x *MetadataUpdate_OpenStatusChanged) GetNewOpenStatus() *OpenStatus {
	if x != nil {
		return x.NewOpenStatus
	}
	return nil
}

type MetadataUpdate_DescriptionChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewDescription string `protobuf:"bytes,1,opt,name=new_description,json=newDescription,proto3" json:"new_description,omitempty"`
}

func (x *MetadataUpdate_DescriptionChanged) Reset() {
	*x = MetadataUpdate_DescriptionChanged{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataUpdate_DescriptionChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdate_DescriptionChanged) ProtoMessage() {}

func (x *MetadataUpdate_DescriptionChanged) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdate_DescriptionChanged.ProtoReflect.Descriptor instead.
func (*MetadataUpdate_DescriptionChanged) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{46, 6}
}

func (x *MetadataUpdate_DescriptionChanged) GetNewDescription() string {
	if x != nil {
		return x.NewDescription
	}
	return ""
}

// Refreshes the state of the entire chat membership
type MemberUpdate_FullRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *MemberUpdate_FullRefresh) Reset() {
	*x = MemberUpdate_FullRefresh{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_FullRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_FullRefresh) ProtoMessage() {}

func (x *MemberUpdate_FullRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_FullRefresh.ProtoReflect.Descriptor instead.
func (*MemberUpdate_FullRefresh) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 0}
}

func (x *MemberUpdate_FullRefresh) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

// Refreshes the state of an individual member in the chat
type MemberUpdate_IndividualRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *Member `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *MemberUpdate_IndividualRefresh) Reset() {
	*x = MemberUpdate_IndividualRefresh{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_IndividualRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_IndividualRefresh) ProtoMessage() {}

func (x *MemberUpdate_IndividualRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_IndividualRefresh.ProtoReflect.Descriptor instead.
func (*MemberUpdate_IndividualRefresh) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 1}
}

func (x *MemberUpdate_IndividualRefresh) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

// Member joined the chat via the JoinChat RPC
type MemberUpdate_Joined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *Member `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *MemberUpdate_Joined) Reset() {
	*x = MemberUpdate_Joined{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_Joined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_Joined) ProtoMessage() {}

func (x *MemberUpdate_Joined) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_Joined.ProtoReflect.Descriptor instead.
func (*MemberUpdate_Joined) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 2}
}

func (x *MemberUpdate_Joined) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

// Member left the chat via the LeaveChat RPC
type MemberUpdate_Left struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *v1.UserId `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *MemberUpdate_Left) Reset() {
	*x = MemberUpdate_Left{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_Left) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_Left) ProtoMessage() {}

func (x *MemberUpdate_Left) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_Left.ProtoReflect.Descriptor instead.
func (*MemberUpdate_Left) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 3}
}

func (x *MemberUpdate_Left) GetMember() *v1.UserId {
	if x != nil {
		return x.Member
	}
	return nil
}

// Member was removed from the chat via the RemoveUser RPC
type MemberUpdate_Removed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member    *v1.UserId `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	RemovedBy *v1.UserId `protobuf:"bytes,2,opt,name=removed_by,json=removedBy,proto3" json:"removed_by,omitempty"`
}

func (x *MemberUpdate_Removed) Reset() {
	*x = MemberUpdate_Removed{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_Removed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_Removed) ProtoMessage() {}

func (x *MemberUpdate_Removed) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_Removed.ProtoReflect.Descriptor instead.
func (*MemberUpdate_Removed) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 4}
}

func (x *MemberUpdate_Removed) GetMember() *v1.UserId {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberUpdate_Removed) GetRemovedBy() *v1.UserId {
	if x != nil {
		return x.RemovedBy
	}
	return nil
}

// Member was muted in the chat via the MuteUser RPC
type MemberUpdate_Muted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member  *v1.UserId `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	MutedBy *v1.UserId `protobuf:"bytes,2,opt,name=muted_by,json=mutedBy,proto3" json:"muted_by,omitempty"`
}

func (x *MemberUpdate_Muted) Reset() {
	*x = MemberUpdate_Muted{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_Muted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_Muted) ProtoMessage() {}

func (x *MemberUpdate_Muted) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_Muted.ProtoReflect.Descriptor instead.
func (*MemberUpdate_Muted) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 5}
}

func (x *MemberUpdate_Muted) GetMember() *v1.UserId {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberUpdate_Muted) GetMutedBy() *v1.UserId {
	if x != nil {
		return x.MutedBy
	}
	return nil
}

// Member was promoted in the chat via the PromoteUser RPC
type MemberUpdate_Promoted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member                *v1.UserId `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	PromotedBy            *v1.UserId `protobuf:"bytes,2,opt,name=promoted_by,json=promotedBy,proto3" json:"promoted_by,omitempty"`
	SendPermissionEnabled bool       `protobuf:"varint,3,opt,name=send_permission_enabled,json=sendPermissionEnabled,proto3" json:"send_permission_enabled,omitempty"`
}

func (x *MemberUpdate_Promoted) Reset() {
	*x = MemberUpdate_Promoted{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_Promoted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_Promoted) ProtoMessage() {}

func (x *MemberUpdate_Promoted) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_Promoted.ProtoReflect.Descriptor instead.
func (*MemberUpdate_Promoted) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 6}
}

func (x *MemberUpdate_Promoted) GetMember() *v1.UserId {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberUpdate_Promoted) GetPromotedBy() *v1.UserId {
	if x != nil {
		return x.PromotedBy
	}
	return nil
}

func (x *MemberUpdate_Promoted) GetSendPermissionEnabled() bool {
	if x != nil {
		return x.SendPermissionEnabled
	}
	return false
}

// Member was demoted in the chat via the DemoteUser RPC
type MemberUpdate_Demoted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member                 *v1.UserId `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	DemotedBy              *v1.UserId `protobuf:"bytes,2,opt,name=demoted_by,json=demotedBy,proto3" json:"demoted_by,omitempty"`
	SendPermissionDisabled bool       `protobuf:"varint,3,opt,name=send_permission_disabled,json=sendPermissionDisabled,proto3" json:"send_permission_disabled,omitempty"`
}

func (x *MemberUpdate_Demoted) Reset() {
	*x = MemberUpdate_Demoted{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_Demoted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_Demoted) ProtoMessage() {}

func (x *MemberUpdate_Demoted) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_Demoted.ProtoReflect.Descriptor instead.
func (*MemberUpdate_Demoted) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 7}
}

func (x *MemberUpdate_Demoted) GetMember() *v1.UserId {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberUpdate_Demoted) GetDemotedBy() *v1.UserId {
	if x != nil {
		return x.DemotedBy
	}
	return nil
}

func (x *MemberUpdate_Demoted) GetSendPermissionDisabled() bool {
	if x != nil {
		return x.SendPermissionDisabled
	}
	return false
}

// Member identity has changed
type MemberUpdate_IdentityChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member      *v1.UserId      `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	NewIdentity *MemberIdentity `protobuf:"bytes,2,opt,name=new_identity,json=newIdentity,proto3" json:"new_identity,omitempty"`
}

func (x *MemberUpdate_IdentityChanged) Reset() {
	*x = MemberUpdate_IdentityChanged{}
	mi := &file_chat_v1_chat_service_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberUpdate_IdentityChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberUpdate_IdentityChanged) ProtoMessage() {}

func (x *MemberUpdate_IdentityChanged) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_chat_service_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberUpdate_IdentityChanged.ProtoReflect.Descriptor instead.
func (*MemberUpdate_IdentityChanged) Descriptor() ([]byte, []int) {
	return file_chat_v1_chat_service_proto_rawDescGZIP(), []int{49, 8}
}

func (x *MemberUpdate_IdentityChanged) GetMember() *v1.UserId {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberUpdate_IdentityChanged) GetNewIdentity() *MemberIdentity {
	if x != nil {
		return x.NewIdentity
	}
	return nil
}

var File_chat_v1_chat_service_proto protoreflect.FileDescriptor

var file_chat_v1_chat_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x1a, 0x76, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x34, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x02, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xfe, 0x07, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x00, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x72, 0x0a, 0x0b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x6a, 0x0a,
	0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x5c, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x9d, 0x04, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x4b, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x69, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3c, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x64, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x22,
	0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10,
	0x00, 0x22, 0xd4, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0xd0, 0x04, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x60, 0x0a, 0x0c, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x5c, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x65, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0xc9, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x00, 0x10, 0x20, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xed,
	0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0x5e,
	0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xab,
	0x02, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xdf, 0x01, 0x0a,
	0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x97,
	0x01, 0x0a, 0x17, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x22, 0x69, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22,
	0x88, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x73, 0x0a, 0x10, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22,
	0x89, 0x01, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x75, 0x0a, 0x11, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44,
	0x10, 0x01, 0x22, 0x47, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x18,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x15, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x0a,
	0x52, 0x14, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x02, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xa0, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22,
	0x8d, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x22,
	0xd4, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2a, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x22, 0xe1, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x50, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x22, 0xca, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x92, 0x01, 0x03, 0x10, 0x80, 0x08, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x22, 0x81, 0x02, 0x0a, 0x11, 0x44,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x77,
	0x0a, 0x12, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x22, 0x77, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0xc7, 0x01, 0x0a,
	0x0f, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x73, 0x0a, 0x10, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x0f,
	0x4d, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x73, 0x0a, 0x10, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1c, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x11,
	0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x77, 0x0a, 0x12, 0x55, 0x6e, 0x6d, 0x75,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10,
	0x01, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x6b, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0xcb, 0x05, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x00, 0x18, 0x40, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x50, 0x75, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72,
	0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x30, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xa0, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x57, 0x4f, 0x5f, 0x57, 0x41, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x02, 0x22, 0x38, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xe6,
	0x0a, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x51, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x67, 0x0a, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x67, 0x0a,
	0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x6a, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x64,
	0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x1a, 0x4f, 0x0a, 0x0b,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5b, 0x0a,
	0x12, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73,
	0x4d, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x47, 0x0a, 0x12, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x40, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x6e, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x6e, 0x65,
	0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x1a, 0x67, 0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x6e, 0x65,
	0x77, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x77,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x63, 0x0a, 0x11,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x47, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xa0, 0x01, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xeb, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x46, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x02, 0x52, 0x08, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x65,
	0x6c, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66,
	0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x01,
	0x52, 0x0e, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0xf0, 0x0e, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x61, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x5b,
	0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x1a, 0x4b, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12,
	0x3c, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x4f, 0x0a,
	0x11, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x44,
	0x0a, 0x06, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x44, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x3c, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x8c, 0x01, 0x0a, 0x07, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x86, 0x01, 0x0a, 0x05, 0x4d, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6d, 0x75, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x1a, 0xc7, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xc6, 0x01, 0x0a,
	0x07, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73,
	0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x9e, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x32, 0x93, 0x0f, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x6d, 0x0a, 0x10,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x27, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x66, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x0a, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x55, 0x6e, 0x6d, 0x75, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x6d, 0x75, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7b, 0x0a, 0x20, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x5a, 0x4a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f,
	0x76, 0x31, 0x3b, 0x63, 0x68, 0x61, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x0a, 0x46, 0x43, 0x50, 0x42,
	0x43, 0x68, 0x61, 0x74, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_v1_chat_service_proto_rawDescOnce sync.Once
	file_chat_v1_chat_service_proto_rawDescData = file_chat_v1_chat_service_proto_rawDesc
)

func file_chat_v1_chat_service_proto_rawDescGZIP() []byte {
	file_chat_v1_chat_service_proto_rawDescOnce.Do(func() {
		file_chat_v1_chat_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_v1_chat_service_proto_rawDescData)
	})
	return file_chat_v1_chat_service_proto_rawDescData
}

var file_chat_v1_chat_service_proto_enumTypes = make([]protoimpl.EnumInfo, 22)
var file_chat_v1_chat_service_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_chat_v1_chat_service_proto_goTypes = []any{
	(StreamChatEventsResponse_StreamError_Code)(0),     // 0: flipchat.chat.v1.StreamChatEventsResponse.StreamError.Code
	(GetChatsResponse_Result)(0),                       // 1: flipchat.chat.v1.GetChatsResponse.Result
	(GetChatResponse_Result)(0),                        // 2: flipchat.chat.v1.GetChatResponse.Result
	(StartChatResponse_Result)(0),                      // 3: flipchat.chat.v1.StartChatResponse.Result
	(JoinChatResponse_Result)(0),                       // 4: flipchat.chat.v1.JoinChatResponse.Result
	(LeaveChatResponse_Result)(0),                      // 5: flipchat.chat.v1.LeaveChatResponse.Result
	(OpenChatResponse_Result)(0),                       // 6: flipchat.chat.v1.OpenChatResponse.Result
	(CloseChatResponse_Result)(0),                      // 7: flipchat.chat.v1.CloseChatResponse.Result
	(CheckDisplayNameResponse_Result)(0),               // 8: flipchat.chat.v1.CheckDisplayNameResponse.Result
	(SetDisplayNameResponse_Result)(0),                 // 9: flipchat.chat.v1.SetDisplayNameResponse.Result
	(SetDescriptionResponse_Result)(0),                 // 10: flipchat.chat.v1.SetDescriptionResponse.Result
	(SetCoverChargeResponse_Result)(0),                 // 11: flipchat.chat.v1.SetCoverChargeResponse.Result
	(SetMessagingFeeResponse_Result)(0),                // 12: flipchat.chat.v1.SetMessagingFeeResponse.Result
	(GetMemberUpdatesResponse_Result)(0),               // 13: flipchat.chat.v1.GetMemberUpdatesResponse.Result
	(PromoteUserResponse_Result)(0),                    // 14: flipchat.chat.v1.PromoteUserResponse.Result
	(DemoteUserResponse_Result)(0),                     // 15: flipchat.chat.v1.DemoteUserResponse.Result
	(RemoveUserResponse_Result)(0),                     // 16: flipchat.chat.v1.RemoveUserResponse.Result
	(MuteUserResponse_Result)(0),                       // 17: flipchat.chat.v1.MuteUserResponse.Result
	(MuteChatResponse_Result)(0),                       // 18: flipchat.chat.v1.MuteChatResponse.Result
	(UnmuteChatResponse_Result)(0),                     // 19: flipchat.chat.v1.UnmuteChatResponse.Result
	(ReportUserResponse_Result)(0),                     // 20: flipchat.chat.v1.ReportUserResponse.Result
	(Metadata_ChatType)(0),                             // 21: flipchat.chat.v1.Metadata.ChatType
	(*StreamChatEventsRequest)(nil),                    // 22: flipchat.chat.v1.StreamChatEventsRequest
	(*StreamChatEventsResponse)(nil),                   // 23: flipchat.chat.v1.StreamChatEventsResponse
	(*GetChatsRequest)(nil),                            // 24: flipchat.chat.v1.GetChatsRequest
	(*GetChatsResponse)(nil),                           // 25: flipchat.chat.v1.GetChatsResponse
	(*GetChatRequest)(nil),                             // 26: flipchat.chat.v1.GetChatRequest
	(*GetChatResponse)(nil),                            // 27: flipchat.chat.v1.GetChatResponse
	(*StartChatRequest)(nil),                           // 28: flipchat.chat.v1.StartChatRequest
	(*StartChatResponse)(nil),                          // 29: flipchat.chat.v1.StartChatResponse
	(*StartGroupChatPaymentMetadata)(nil),              // 30: flipchat.chat.v1.StartGroupChatPaymentMetadata
	(*JoinChatRequest)(nil),                            // 31: flipchat.chat.v1.JoinChatRequest
	(*JoinChatResponse)(nil),                           // 32: flipchat.chat.v1.JoinChatResponse
	(*JoinChatPaymentMetadata)(nil),                    // 33: flipchat.chat.v1.JoinChatPaymentMetadata
	(*LeaveChatRequest)(nil),                           // 34: flipchat.chat.v1.LeaveChatRequest
	(*LeaveChatResponse)(nil),                          // 35: flipchat.chat.v1.LeaveChatResponse
	(*OpenChatRequest)(nil),                            // 36: flipchat.chat.v1.OpenChatRequest
	(*OpenChatResponse)(nil),                           // 37: flipchat.chat.v1.OpenChatResponse
	(*CloseChatRequest)(nil),                           // 38: flipchat.chat.v1.CloseChatRequest
	(*CloseChatResponse)(nil),                          // 39: flipchat.chat.v1.CloseChatResponse
	(*CheckDisplayNameRequest)(nil),                    // 40: flipchat.chat.v1.CheckDisplayNameRequest
	(*CheckDisplayNameResponse)(nil),                   // 41: flipchat.chat.v1.CheckDisplayNameResponse
	(*SetDisplayNameRequest)(nil),                      // 42: flipchat.chat.v1.SetDisplayNameRequest
	(*SetDisplayNameResponse)(nil),                     // 43: flipchat.chat.v1.SetDisplayNameResponse
	(*SetDescriptionRequest)(nil),                      // 44: flipchat.chat.v1.SetDescriptionRequest
	(*SetDescriptionResponse)(nil),                     // 45: flipchat.chat.v1.SetDescriptionResponse
	(*SetCoverChargeRequest)(nil),                      // 46: flipchat.chat.v1.SetCoverChargeRequest
	(*SetCoverChargeResponse)(nil),                     // 47: flipchat.chat.v1.SetCoverChargeResponse
	(*SetMessagingFeeRequest)(nil),                     // 48: flipchat.chat.v1.SetMessagingFeeRequest
	(*SetMessagingFeeResponse)(nil),                    // 49: flipchat.chat.v1.SetMessagingFeeResponse
	(*GetMemberUpdatesRequest)(nil),                    // 50: flipchat.chat.v1.GetMemberUpdatesRequest
	(*GetMemberUpdatesResponse)(nil),                   // 51: flipchat.chat.v1.GetMemberUpdatesResponse
	(*PromoteUserRequest)(nil),                         // 52: flipchat.chat.v1.PromoteUserRequest
	(*PromoteUserResponse)(nil),                        // 53: flipchat.chat.v1.PromoteUserResponse
	(*DemoteUserRequest)(nil),                          // 54: flipchat.chat.v1.DemoteUserRequest
	(*DemoteUserResponse)(nil),                         // 55: flipchat.chat.v1.DemoteUserResponse
	(*RemoveUserRequest)(nil),                          // 56: flipchat.chat.v1.RemoveUserRequest
	(*RemoveUserResponse)(nil),                         // 57: flipchat.chat.v1.RemoveUserResponse
	(*MuteUserRequest)(nil),                            // 58: flipchat.chat.v1.MuteUserRequest
	(*MuteUserResponse)(nil),                           // 59: flipchat.chat.v1.MuteUserResponse
	(*MuteChatRequest)(nil),                            // 60: flipchat.chat.v1.MuteChatRequest
	(*MuteChatResponse)(nil),                           // 61: flipchat.chat.v1.MuteChatResponse
	(*UnmuteChatRequest)(nil),                          // 62: flipchat.chat.v1.UnmuteChatRequest
	(*UnmuteChatResponse)(nil),                         // 63: flipchat.chat.v1.UnmuteChatResponse
	(*ReportUserRequest)(nil),                          // 64: flipchat.chat.v1.ReportUserRequest
	(*ReportUserResponse)(nil),                         // 65: flipchat.chat.v1.ReportUserResponse
	(*Metadata)(nil),                                   // 66: flipchat.chat.v1.Metadata
	(*OpenStatus)(nil),                                 // 67: flipchat.chat.v1.OpenStatus
	(*MetadataUpdate)(nil),                             // 68: flipchat.chat.v1.MetadataUpdate
	(*Member)(nil),                                     // 69: flipchat.chat.v1.Member
	(*MemberIdentity)(nil),                             // 70: flipchat.chat.v1.MemberIdentity
	(*MemberUpdate)(nil),                               // 71: flipchat.chat.v1.MemberUpdate
	(*StreamChatEventsRequest_Params)(nil),             // 72: flipchat.chat.v1.StreamChatEventsRequest.Params
	(*StreamChatEventsResponse_StreamError)(nil),       // 73: flipchat.chat.v1.StreamChatEventsResponse.StreamError
	(*StreamChatEventsResponse_EventBatch)(nil),        // 74: flipchat.chat.v1.StreamChatEventsResponse.EventBatch
	(*StreamChatEventsResponse_ChatUpdate)(nil),        // 75: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate
	(*StartChatRequest_StartTwoWayChatParameters)(nil), // 76: flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters
	(*StartChatRequest_StartGroupChatParameters)(nil),  // 77: flipchat.chat.v1.StartChatRequest.StartGroupChatParameters
	(*MetadataUpdate_FullRefresh)(nil),                 // 78: flipchat.chat.v1.MetadataUpdate.FullRefresh
	(*MetadataUpdate_UnreadCountChanged)(nil),          // 79: flipchat.chat.v1.MetadataUpdate.UnreadCountChanged
	(*MetadataUpdate_DisplayNameChanged)(nil),          // 80: flipchat.chat.v1.MetadataUpdate.DisplayNameChanged
	(*MetadataUpdate_MessagingFeeChanged)(nil),         // 81: flipchat.chat.v1.MetadataUpdate.MessagingFeeChanged
	(*MetadataUpdate_LastActivityChanged)(nil),         // 82: flipchat.chat.v1.MetadataUpdate.LastActivityChanged
	(*MetadataUpdate_OpenStatusChanged)(nil),           // 83: flipchat.chat.v1.MetadataUpdate.OpenStatusChanged
	(*MetadataUpdate_DescriptionChanged)(nil),          // 84: flipchat.chat.v1.MetadataUpdate.DescriptionChanged
	(*MemberUpdate_FullRefresh)(nil),                   // 85: flipchat.chat.v1.MemberUpdate.FullRefresh
	(*MemberUpdate_IndividualRefresh)(nil),             // 86: flipchat.chat.v1.MemberUpdate.IndividualRefresh
	(*MemberUpdate_Joined)(nil),                        // 87: flipchat.chat.v1.MemberUpdate.Joined
	(*MemberUpdate_Left)(nil),                          // 88: flipchat.chat.v1.MemberUpdate.Left
	(*MemberUpdate_Removed)(nil),                       // 89: flipchat.chat.v1.MemberUpdate.Removed
	(*MemberUpdate_Muted)(nil),                         // 90: flipchat.chat.v1.MemberUpdate.Muted
	(*MemberUpdate_Promoted)(nil),                      // 91: flipchat.chat.v1.MemberUpdate.Promoted
	(*MemberUpdate_Demoted)(nil),                       // 92: flipchat.chat.v1.MemberUpdate.Demoted
	(*MemberUpdate_IdentityChanged)(nil),               // 93: flipchat.chat.v1.MemberUpdate.IdentityChanged
	(*v1.ClientPong)(nil),                              // 94: flipchat.common.v1.ClientPong
	(*v1.ServerPing)(nil),                              // 95: flipchat.common.v1.ServerPing
	(*v1.QueryOptions)(nil),                            // 96: flipchat.common.v1.QueryOptions
	(*v1.Auth)(nil),                                    // 97: flipchat.common.v1.Auth
	(*v1.ChatId)(nil),                                  // 98: flipchat.common.v1.ChatId
	(*v1.UserId)(nil),                                  // 99: flipchat.common.v1.UserId
	(*v1.IntentId)(nil),                                // 100: flipchat.common.v1.IntentId
	(*v1.PaymentAmount)(nil),                           // 101: flipchat.common.v1.PaymentAmount
	(*v1.PagingToken)(nil),                             // 102: flipchat.common.v1.PagingToken
	(*v11.MessageId)(nil),                              // 103: flipchat.messaging.v1.MessageId
	(*timestamppb.Timestamp)(nil),                      // 104: google.protobuf.Timestamp
	(*v11.Pointer)(nil),                                // 105: flipchat.messaging.v1.Pointer
	(*v12.SocialProfile)(nil),                          // 106: flipchat.profile.v1.SocialProfile
	(*v11.Message)(nil),                                // 107: flipchat.messaging.v1.Message
	(*v11.PointerUpdate)(nil),                          // 108: flipchat.messaging.v1.PointerUpdate
	(*v11.IsTyping)(nil),                               // 109: flipchat.messaging.v1.IsTyping
}
var file_chat_v1_chat_service_proto_depIdxs = []int32{
	72,  // 0: flipchat.chat.v1.StreamChatEventsRequest.params:type_name -> flipchat.chat.v1.StreamChatEventsRequest.Params
	94,  // 1: flipchat.chat.v1.StreamChatEventsRequest.pong:type_name -> flipchat.common.v1.ClientPong
	95,  // 2: flipchat.chat.v1.StreamChatEventsResponse.ping:type_name -> flipchat.common.v1.ServerPing
	73,  // 3: flipchat.chat.v1.StreamChatEventsResponse.error:type_name -> flipchat.chat.v1.StreamChatEventsResponse.StreamError
	74,  // 4: flipchat.chat.v1.StreamChatEventsResponse.events:type_name -> flipchat.chat.v1.StreamChatEventsResponse.EventBatch
	96,  // 5: flipchat.chat.v1.GetChatsRequest.query_options:type_name -> flipchat.common.v1.QueryOptions
	97,  // 6: flipchat.chat.v1.GetChatsRequest.auth:type_name -> flipchat.common.v1.Auth
	1,   // 7: flipchat.chat.v1.GetChatsResponse.result:type_name -> flipchat.chat.v1.GetChatsResponse.Result
	66,  // 8: flipchat.chat.v1.GetChatsResponse.chats:type_name -> flipchat.chat.v1.Metadata
	98,  // 9: flipchat.chat.v1.GetChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	97,  // 10: flipchat.chat.v1.GetChatRequest.auth:type_name -> flipchat.common.v1.Auth
	2,   // 11: flipchat.chat.v1.GetChatResponse.result:type_name -> flipchat.chat.v1.GetChatResponse.Result
	66,  // 12: flipchat.chat.v1.GetChatResponse.metadata:type_name -> flipchat.chat.v1.Metadata
	69,  // 13: flipchat.chat.v1.GetChatResponse.members:type_name -> flipchat.chat.v1.Member
	76,  // 14: flipchat.chat.v1.StartChatRequest.two_way_chat:type_name -> flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters
	77,  // 15: flipchat.chat.v1.StartChatRequest.group_chat:type_name -> flipchat.chat.v1.StartChatRequest.StartGroupChatParameters
	97,  // 16: flipchat.chat.v1.StartChatRequest.auth:type_name -> flipchat.common.v1.Auth
	3,   // 17: flipchat.chat.v1.StartChatResponse.result:type_name -> flipchat.chat.v1.StartChatResponse.Result
	66,  // 18: flipchat.chat.v1.StartChatResponse.chat:type_name -> flipchat.chat.v1.Metadata
	69,  // 19: flipchat.chat.v1.StartChatResponse.members:type_name -> flipchat.chat.v1.Member
	99,  // 20: flipchat.chat.v1.StartGroupChatPaymentMetadata.user_id:type_name -> flipchat.common.v1.UserId
	98,  // 21: flipchat.chat.v1.JoinChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	100, // 22: flipchat.chat.v1.JoinChatRequest.payment_intent:type_name -> flipchat.common.v1.IntentId
	97,  // 23: flipchat.chat.v1.JoinChatRequest.auth:type_name -> flipchat.common.v1.Auth
	4,   // 24: flipchat.chat.v1.JoinChatResponse.result:type_name -> flipchat.chat.v1.JoinChatResponse.Result
	66,  // 25: flipchat.chat.v1.JoinChatResponse.metadata:type_name -> flipchat.chat.v1.Metadata
	69,  // 26: flipchat.chat.v1.JoinChatResponse.members:type_name -> flipchat.chat.v1.Member
	99,  // 27: flipchat.chat.v1.JoinChatPaymentMetadata.user_id:type_name -> flipchat.common.v1.UserId
	98,  // 28: flipchat.chat.v1.JoinChatPaymentMetadata.chat_id:type_name -> flipchat.common.v1.ChatId
	98,  // 29: flipchat.chat.v1.LeaveChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	97,  // 30: flipchat.chat.v1.LeaveChatRequest.auth:type_name -> flipchat.common.v1.Auth
	5,   // 31: flipchat.chat.v1.LeaveChatResponse.result:type_name -> flipchat.chat.v1.LeaveChatResponse.Result
	98,  // 32: flipchat.chat.v1.OpenChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	97,  // 33: flipchat.chat.v1.OpenChatRequest.auth:type_name -> flipchat.common.v1.Auth
	6,   // 34: flipchat.chat.v1.OpenChatResponse.result:type_name -> flipchat.chat.v1.OpenChatResponse.Result
	98,  // 35: flipchat.chat.v1.CloseChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	97,  // 36: flipchat.chat.v1.CloseChatRequest.auth:type_name -> flipchat.common.v1.Auth
	7,   // 37: flipchat.chat.v1.CloseChatResponse.result:type_name -> flipchat.chat.v1.CloseChatResponse.Result
	8,   // 38: flipchat.chat.v1.CheckDisplayNameResponse.result:type_name -> flipchat.chat.v1.CheckDisplayNameResponse.Result
	98,  // 39: flipchat.chat.v1.SetDisplayNameRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	97,  // 40: flipchat.chat.v1.SetDisplayNameRequest.auth:type_name -> flipchat.common.v1.Auth
	9,   // 41: flipchat.chat.v1.SetDisplayNameResponse.result:type_name -> flipchat.chat.v1.SetDisplayNameResponse.Result
	98,  // 42: flipchat.chat.v1.SetDescriptionRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	97,  // 43: flipchat.chat.v1.SetDescriptionRequest.auth:type_name -> flipchat.common.v1.Auth
	10,  // 44: flipchat.chat.v1.SetDescriptionResponse.result:type_name -> flipchat.chat.v1.SetDescriptionResponse.Result
	98,  // 45: flipchat.chat.v1.SetCoverChargeRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	101, // 46: flipchat.chat.v1.SetCoverChargeRequest.cover_charge:type_name -> flipchat.common.v1.PaymentAmount
	97,  // 47: flipchat.chat.v1.SetCoverChargeRequest.auth:type_name -> flipchat.common.v1.Auth
	11,  // 48: flipchat.chat.v1.SetCoverChargeResponse.result:type_name -> flipchat.chat.v1.SetCoverChargeResponse.Result
	98,  // 49: flipchat.chat.v1.SetMessagingFeeRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	101, // 50: flipchat.chat.v1.SetMessagingFeeRequest.messaging_fee:type_name -> flipchat.common.v1.PaymentAmount
	97,  // 51: flipchat.chat.v1.SetMessagingFeeRequest.auth:type_name -> flipchat.common.v1.Auth
	12,  // 52: flipchat.chat.v1.SetMessagingFeeResponse.result:type_name -> flipchat.chat.v1.SetMessagingFeeResponse.Result
	98,  // 53: flipchat.chat.v1.GetMemberUpdatesRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	102, // 54: flipchat.chat.v1.GetMemberUpdatesRequest.paging_token:type_name -> flipchat.common.v1.PagingToken
	97,  // 55: flipchat.chat.v1.GetMemberUpdatesRequest.auth:type_name -> flipchat.common.v1.Auth
	13,  // 56: flipchat.chat.v1.GetMemberUpdatesResponse.result:type_name -> flipchat.chat.v1.GetMemberUpdatesResponse.Result
	71,  // 57: flipchat.chat.v1.GetMemberUpdatesResponse.updates:type_name -> flipchat.chat.v1.MemberUpdate
	98,  // 58: flipchat.chat.v1.PromoteUserRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	99,  // 59: flipchat.chat.v1.PromoteUserRequest.user_id:type_name -> flipchat.common.v1.UserId
	97,  // 60: flipchat.chat.v1.PromoteUserRequest.auth:type_name -> flipchat.common.v1.Auth
	14,  // 61: flipchat.chat.v1.PromoteUserResponse.result:type_name -> flipchat.chat.v1.PromoteUserResponse.Result
	98,  // 62: flipchat.chat.v1.DemoteUserRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	99,  // 63: flipchat.chat.v1.DemoteUserRequest.user_id:type_name -> flipchat.common.v1.UserId
	97,  // 64: flipchat.chat.v1.DemoteUserRequest.auth:type_name -> flipchat.common.v1.Auth
	15,  // 65: flipchat.chat.v1.DemoteUserResponse.result:type_name -> flipchat.chat.v1.DemoteUserResponse.Result
	98,  // 66: flipchat.chat.v1.RemoveUserRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	99,  // 67: flipchat.chat.v1.RemoveUserRequest.user_id:type_name -> flipchat.common.v1.UserId
	97,  // 68: flipchat.chat.v1.RemoveUserRequest.auth:type_name -> flipchat.common.v1.Auth
	16,  // 69: flipchat.chat.v1.RemoveUserResponse.result:type_name -> flipchat.chat.v1.RemoveUserResponse.Result
	98,  // 70: flipchat.chat.v1.MuteUserRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	99,  // 71: flipchat.chat.v1.MuteUserRequest.user_id:type_name -> flipchat.common.v1.UserId
	97,  // 72: flipchat.chat.v1.MuteUserRequest.auth:type_name -> flipchat.common.v1.Auth
	17,  // 73: flipchat.chat.v1.MuteUserResponse.result:type_name -> flipchat.chat.v1.MuteUserResponse.Result
	98,  // 74: flipchat.chat.v1.MuteChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	97,  // 75: flipchat.chat.v1.MuteChatRequest.auth:type_name -> flipchat.common.v1.Auth
	18,  // 76: flipchat.chat.v1.MuteChatResponse.result:type_name -> flipchat.chat.v1.MuteChatResponse.Result
	98,  // 77: flipchat.chat.v1.UnmuteChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	97,  // 78: flipchat.chat.v1.UnmuteChatRequest.auth:type_name -> flipchat.common.v1.Auth
	19,  // 79: flipchat.chat.v1.UnmuteChatResponse.result:type_name -> flipchat.chat.v1.UnmuteChatResponse.Result
	99,  // 80: flipchat.chat.v1.ReportUserRequest.user_id:type_name -> flipchat.common.v1.UserId
	103, // 81: flipchat.chat.v1.ReportUserRequest.message_id:type_name -> flipchat.messaging.v1.MessageId
	97,  // 82: flipchat.chat.v1.ReportUserRequest.auth:type_name -> flipchat.common.v1.Auth
	20,  // 83: flipchat.chat.v1.ReportUserResponse.result:type_name -> flipchat.chat.v1.ReportUserResponse.Result
	98,  // 84: flipchat.chat.v1.Metadata.chat_id:type_name -> flipchat.common.v1.ChatId
	21,  // 85: flipchat.chat.v1.Metadata.type:type_name -> flipchat.chat.v1.Metadata.ChatType
	99,  // 86: flipchat.chat.v1.Metadata.owner:type_name -> flipchat.common.v1.UserId
	101, // 87: flipchat.chat.v1.Metadata.messaging_fee:type_name -> flipchat.common.v1.PaymentAmount
	104, // 88: flipchat.chat.v1.Metadata.last_activity:type_name -> google.protobuf.Timestamp
	67,  // 89: flipchat.chat.v1.Metadata.open_status:type_name -> flipchat.chat.v1.OpenStatus
	78,  // 90: flipchat.chat.v1.MetadataUpdate.full_refresh:type_name -> flipchat.chat.v1.MetadataUpdate.FullRefresh
	79,  // 91: flipchat.chat.v1.MetadataUpdate.unread_count_changed:type_name -> flipchat.chat.v1.MetadataUpdate.UnreadCountChanged
	80,  // 92: flipchat.chat.v1.MetadataUpdate.display_name_changed:type_name -> flipchat.chat.v1.MetadataUpdate.DisplayNameChanged
	81,  // 93: flipchat.chat.v1.MetadataUpdate.messaging_fee_changed:type_name -> flipchat.chat.v1.MetadataUpdate.MessagingFeeChanged
	82,  // 94: flipchat.chat.v1.MetadataUpdate.last_activity_changed:type_name -> flipchat.chat.v1.MetadataUpdate.LastActivityChanged
	83,  // 95: flipchat.chat.v1.MetadataUpdate.open_status_changed:type_name -> flipchat.chat.v1.MetadataUpdate.OpenStatusChanged
	84,  // 96: flipchat.chat.v1.MetadataUpdate.description_changed:type_name -> flipchat.chat.v1.MetadataUpdate.DescriptionChanged
	99,  // 97: flipchat.chat.v1.Member.user_id:type_name -> flipchat.common.v1.UserId
	70,  // 98: flipchat.chat.v1.Member.identity:type_name -> flipchat.chat.v1.MemberIdentity
	105, // 99: flipchat.chat.v1.Member.pointers:type_name -> flipchat.messaging.v1.Pointer
	106, // 100: flipchat.chat.v1.MemberIdentity.social_profiles:type_name -> flipchat.profile.v1.SocialProfile
	85,  // 101: flipchat.chat.v1.MemberUpdate.full_refresh:type_name -> flipchat.chat.v1.MemberUpdate.FullRefresh
	86,  // 102: flipchat.chat.v1.MemberUpdate.individual_refresh:type_name -> flipchat.chat.v1.MemberUpdate.IndividualRefresh
	87,  // 103: flipchat.chat.v1.MemberUpdate.joined:type_name -> flipchat.chat.v1.MemberUpdate.Joined
	88,  // 104: flipchat.chat.v1.MemberUpdate.left:type_name -> flipchat.chat.v1.MemberUpdate.Left
	89,  // 105: flipchat.chat.v1.MemberUpdate.removed:type_name -> flipchat.chat.v1.MemberUpdate.Removed
	90,  // 106: flipchat.chat.v1.MemberUpdate.muted:type_name -> flipchat.chat.v1.MemberUpdate.Muted
	91,  // 107: flipchat.chat.v1.MemberUpdate.promoted:type_name -> flipchat.chat.v1.MemberUpdate.Promoted
	92,  // 108: flipchat.chat.v1.MemberUpdate.demoted:type_name -> flipchat.chat.v1.MemberUpdate.Demoted
	93,  // 109: flipchat.chat.v1.MemberUpdate.identity_changed:type_name -> flipchat.chat.v1.MemberUpdate.IdentityChanged
	102, // 110: flipchat.chat.v1.MemberUpdate.paging_token:type_name -> flipchat.common.v1.PagingToken
	97,  // 111: flipchat.chat.v1.StreamChatEventsRequest.Params.auth:type_name -> flipchat.common.v1.Auth
	104, // 112: flipchat.chat.v1.StreamChatEventsRequest.Params.ts:type_name -> google.protobuf.Timestamp
	0,   // 113: flipchat.chat.v1.StreamChatEventsResponse.StreamError.code:type_name -> flipchat.chat.v1.StreamChatEventsResponse.StreamError.Code
	75,  // 114: flipchat.chat.v1.StreamChatEventsResponse.EventBatch.updates:type_name -> flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate
	98,  // 115: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.chat_id:type_name -> flipchat.common.v1.ChatId
	66,  // 116: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.metadata:type_name -> flipchat.chat.v1.Metadata
	68,  // 117: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.metadata_updates:type_name -> flipchat.chat.v1.MetadataUpdate
	71,  // 118: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.member_update:type_name -> flipchat.chat.v1.MemberUpdate
	71,  // 119: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.member_updates:type_name -> flipchat.chat.v1.MemberUpdate
	107, // 120: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.last_message:type_name -> flipchat.messaging.v1.Message
	108, // 121: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.pointer:type_name -> flipchat.messaging.v1.PointerUpdate
	109, // 122: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.is_typing:type_name -> flipchat.messaging.v1.IsTyping
	99,  // 123: flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters.other_user_id:type_name -> flipchat.common.v1.UserId
	99,  // 124: flipchat.chat.v1.StartChatRequest.StartGroupChatParameters.users:type_name -> flipchat.common.v1.UserId
	100, // 125: flipchat.chat.v1.StartChatRequest.StartGroupChatParameters.payment_intent:type_name -> flipchat.common.v1.IntentId
	66,  // 126: flipchat.chat.v1.MetadataUpdate.FullRefresh.metadata:type_name -> flipchat.chat.v1.Metadata
	101, // 127: flipchat.chat.v1.MetadataUpdate.MessagingFeeChanged.new_messaging_fee:type_name -> flipchat.common.v1.PaymentAmount
	104, // 128: flipchat.chat.v1.MetadataUpdate.LastActivityChanged.new_last_activity:type_name -> google.protobuf.Timestamp
	67,  // 129: flipchat.chat.v1.MetadataUpdate.OpenStatusChanged.new_open_status:type_name -> flipchat.chat.v1.OpenStatus
	69,  // 130: flipchat.chat.v1.MemberUpdate.FullRefresh.members:type_name -> flipchat.chat.v1.Member
	69,  // 131: flipchat.chat.v1.MemberUpdate.IndividualRefresh.member:type_name -> flipchat.chat.v1.Member
	69,  // 132: flipchat.chat.v1.MemberUpdate.Joined.member:type_name -> flipchat.chat.v1.Member
	99,  // 133: flipchat.chat.v1.MemberUpdate.Left.member:type_name -> flipchat.common.v1.UserId
	99,  // 134: flipchat.chat.v1.MemberUpdate.Removed.member:type_name -> flipchat.common.v1.UserId
	99,  // 135: flipchat.chat.v1.MemberUpdate.Removed.removed_by:type_name -> flipchat.common.v1.UserId
	99,  // 136: flipchat.chat.v1.MemberUpdate.Muted.member:type_name -> flipchat.common.v1.UserId
	99,  // 137: flipchat.chat.v1.MemberUpdate.Muted.muted_by:type_name -> flipchat.common.v1.UserId
	99,  // 138: flipchat.chat.v1.MemberUpdate.Promoted.member:type_name -> flipchat.common.v1.UserId
	99,  // 139: flipchat.chat.v1.MemberUpdate.Promoted.promoted_by:type_name -> flipchat.common.v1.UserId
	99,  // 140: flipchat.chat.v1.MemberUpdate.Demoted.member:type_name -> flipchat.common.v1.UserId
	99,  // 141: flipchat.chat.v1.MemberUpdate.Demoted.demoted_by:type_name -> flipchat.common.v1.UserId
	99,  // 142: flipchat.chat.v1.MemberUpdate.IdentityChanged.member:type_name -> flipchat.common.v1.UserId
	70,  // 143: flipchat.chat.v1.MemberUpdate.IdentityChanged.new_identity:type_name -> flipchat.chat.v1.MemberIdentity
	22,  // 144: flipchat.chat.v1.Chat.StreamChatEvents:input_type -> flipchat.chat.v1.StreamChatEventsRequest
	24,  // 145: flipchat.chat.v1.Chat.GetChats:input_type -> flipchat.chat.v1.GetChatsRequest
	26,  // 146: flipchat.chat.v1.Chat.GetChat:input_type -> flipchat.chat.v1.GetChatRequest
	28,  // 147: flipchat.chat.v1.Chat.StartChat:input_type -> flipchat.chat.v1.StartChatRequest
	31,  // 148: flipchat.chat.v1.Chat.JoinChat:input_type -> flipchat.chat.v1.JoinChatRequest
	34,  // 149: flipchat.chat.v1.Chat.LeaveChat:input_type -> flipchat.chat.v1.LeaveChatRequest
	36,  // 150: flipchat.chat.v1.Chat.OpenChat:input_type -> flipchat.chat.v1.OpenChatRequest
	38,  // 151: flipchat.chat.v1.Chat.CloseChat:input_type -> flipchat.chat.v1.CloseChatRequest
	40,  // 152: flipchat.chat.v1.Chat.CheckDisplayName:input_type -> flipchat.chat.v1.CheckDisplayNameRequest
	42,  // 153: flipchat.chat.v1.Chat.SetDisplayName:input_type -> flipchat.chat.v1.SetDisplayNameRequest
	44,  // 154: flipchat.chat.v1.Chat.SetDescription:input_type -> flipchat.chat.v1.SetDescriptionRequest
	46,  // 155: flipchat.chat.v1.Chat.SetCoverCharge:input_type -> flipchat.chat.v1.SetCoverChargeRequest
	48,  // 156: flipchat.chat.v1.Chat.SetMessagingFee:input_type -> flipchat.chat.v1.SetMessagingFeeRequest
	50,  // 157: flipchat.chat.v1.Chat.GetMemberUpdates:input_type -> flipchat.chat.v1.GetMemberUpdatesRequest
	52,  // 158: flipchat.chat.v1.Chat.PromoteUser:input_type -> flipchat.chat.v1.PromoteUserRequest
	54,  // 159: flipchat.chat.v1.Chat.DemoteUser:input_type -> flipchat.chat.v1.DemoteUserRequest
	56,  // 160: flipchat.chat.v1.Chat.RemoveUser:input_type -> flipchat.chat.v1.RemoveUserRequest
	58,  // 161: flipchat.chat.v1.Chat.MuteUser:input_type -> flipchat.chat.v1.MuteUserRequest
	60,  // 162: flipchat.chat.v1.Chat.MuteChat:input_type -> flipchat.chat.v1.MuteChatRequest
	62,  // 163: flipchat.chat.v1.Chat.UnmuteChat:input_type -> flipchat.chat.v1.UnmuteChatRequest
	64,  // 164: flipchat.chat.v1.Chat.ReportUser:input_type -> flipchat.chat.v1.ReportUserRequest
	23,  // 165: flipchat.chat.v1.Chat.StreamChatEvents:output_type -> flipchat.chat.v1.StreamChatEventsResponse
	25,  // 166: flipchat.chat.v1.Chat.GetChats:output_type -> flipchat.chat.v1.GetChatsResponse
	27,  // 167: flipchat.chat.v1.Chat.GetChat:output_type -> flipchat.chat.v1.GetChatResponse
	29,  // 168: flipchat.chat.v1.Chat.StartChat:output_type -> flipchat.chat.v1.StartChatResponse
	32,  // 169: flipchat.chat.v1.Chat.JoinChat:output_type -> flipchat.chat.v1.JoinChatResponse
	35,  // 170: flipchat.chat.v1.Chat.LeaveChat:output_type -> flipchat.chat.v1.LeaveChatResponse
	37,  // 171: flipchat.chat.v1.Chat.OpenChat:output_type -> flipchat.chat.v1.OpenChatResponse
	39,  // 172: flipchat.chat.v1.Chat.CloseChat:output_type -> flipchat.chat.v1.CloseChatResponse
	41,  // 173: flipchat.chat.v1.Chat.CheckDisplayName:output_type -> flipchat.chat.v1.CheckDisplayNameResponse
	43,  // 174: flipchat.chat.v1.Chat.SetDisplayName:output_type -> flipchat.chat.v1.SetDisplayNameResponse
	45,  // 175: flipchat.chat.v1.Chat.SetDescription:output_type -> flipchat.chat.v1.SetDescriptionResponse
	47,  // 176: flipchat.chat.v1.Chat.SetCoverCharge:output_type -> flipchat.chat.v1.SetCoverChargeResponse
	49,  // 177: flipchat.chat.v1.Chat.SetMessagingFee:output_type -> flipchat.chat.v1.SetMessagingFeeResponse
	51,  // 178: flipchat.chat.v1.Chat.GetMemberUpdates:output_type -> flipchat.chat.v1.GetMemberUpdatesResponse
	53,  // 179: flipchat.chat.v1.Chat.PromoteUser:output_type -> flipchat.chat.v1.PromoteUserResponse
	55,  // 180: flipchat.chat.v1.Chat.DemoteUser:output_type -> flipchat.chat.v1.DemoteUserResponse
	57,  // 181: flipchat.chat.v1.Chat.RemoveUser:output_type -> flipchat.chat.v1.RemoveUserResponse
	59,  // 182: flipchat.chat.v1.Chat.MuteUser:output_type -> flipchat.chat.v1.MuteUserResponse
	61,  // 183: flipchat.chat.v1.Chat.MuteChat:output_type -> flipchat.chat.v1.MuteChatResponse
	63,  // 184: flipchat.chat.v1.Chat.UnmuteChat:output_type -> flipchat.chat.v1.UnmuteChatResponse
	65,  // 185: flipchat.chat.v1.Chat.ReportUser:output_type -> flipchat.chat.v1.ReportUserResponse
	165, // [165:186] is the sub-list for method output_type
	144, // [144:165] is the sub-list for method input_type
	144, // [144:144] is the sub-list for extension type_name
	144, // [144:144] is the sub-list for extension extendee
	0,   // [0:144] is the sub-list for field type_name
}

func init() { file_chat_v1_chat_service_proto_init() }
func file_chat_v1_chat_service_proto_init() {
	if File_chat_v1_chat_service_proto != nil {
		return
	}
	file_chat_v1_chat_service_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamChatEventsRequest_Params_)(nil),
		(*StreamChatEventsRequest_Pong)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[1].OneofWrappers = []any{
		(*StreamChatEventsResponse_Ping)(nil),
		(*StreamChatEventsResponse_Error)(nil),
		(*StreamChatEventsResponse_Events)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[4].OneofWrappers = []any{
		(*GetChatRequest_ChatId)(nil),
		(*GetChatRequest_RoomNumber)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[6].OneofWrappers = []any{
		(*StartChatRequest_TwoWayChat)(nil),
		(*StartChatRequest_GroupChat)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[9].OneofWrappers = []any{
		(*JoinChatRequest_ChatId)(nil),
		(*JoinChatRequest_RoomId)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[46].OneofWrappers = []any{
		(*MetadataUpdate_FullRefresh_)(nil),
		(*MetadataUpdate_UnreadCountChanged_)(nil),
		(*MetadataUpdate_DisplayNameChanged_)(nil),
		(*MetadataUpdate_MessagingFeeChanged_)(nil),
		(*MetadataUpdate_LastActivityChanged_)(nil),
		(*MetadataUpdate_OpenStatusChanged_)(nil),
		(*MetadataUpdate_DescriptionChanged_)(nil),
	}
	file_chat_v1_chat_service_proto_msgTypes[49].OneofWrappers = []any{
		(*MemberUpdate_FullRefresh_)(nil),
		(*MemberUpdate_IndividualRefresh_)(nil),
		(*MemberUpdate_Joined_)(nil),
		(*MemberUpdate_Left_)(nil),
		(*MemberUpdate_Removed_)(nil),
		(*MemberUpdate_Muted_)(nil),
		(*MemberUpdate_Promoted_)(nil),
		(*MemberUpdate_Demoted_)(nil),
		(*MemberUpdate_IdentityChanged_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_v1_chat_service_proto_rawDesc,
			NumEnums:      22,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_v1_chat_service_proto_goTypes,
		DependencyIndexes: file_chat_v1_chat_service_proto_depIdxs,
		EnumInfos:         file_chat_v1_chat_service_proto_enumTypes,
		MessageInfos:      file_chat_v1_chat_service_proto_msgTypes,
	}.Build()
	File_chat_v1_chat_service_proto = out.File
	file_chat_v1_chat_service_proto_rawDesc = nil
	file_chat_v1_chat_service_proto_goTypes = nil
	file_chat_v1_chat_service_proto_depIdxs = nil
}
