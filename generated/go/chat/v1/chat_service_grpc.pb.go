// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: chat/v1/chat_service.proto

package chatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chat_StreamChatEvents_FullMethodName = "/flipchat.chat.v1.Chat/StreamChatEvents"
	Chat_GetChats_FullMethodName         = "/flipchat.chat.v1.Chat/GetChats"
	Chat_GetChat_FullMethodName          = "/flipchat.chat.v1.Chat/GetChat"
	Chat_StartChat_FullMethodName        = "/flipchat.chat.v1.Chat/StartChat"
	Chat_JoinChat_FullMethodName         = "/flipchat.chat.v1.Chat/JoinChat"
	Chat_LeaveChat_FullMethodName        = "/flipchat.chat.v1.Chat/LeaveChat"
	Chat_OpenChat_FullMethodName         = "/flipchat.chat.v1.Chat/OpenChat"
	Chat_CloseChat_FullMethodName        = "/flipchat.chat.v1.Chat/CloseChat"
	Chat_SetDisplayName_FullMethodName   = "/flipchat.chat.v1.Chat/SetDisplayName"
	Chat_SetCoverCharge_FullMethodName   = "/flipchat.chat.v1.Chat/SetCoverCharge"
	Chat_GetMemberUpdates_FullMethodName = "/flipchat.chat.v1.Chat/GetMemberUpdates"
	Chat_RemoveUser_FullMethodName       = "/flipchat.chat.v1.Chat/RemoveUser"
	Chat_MuteUser_FullMethodName         = "/flipchat.chat.v1.Chat/MuteUser"
	Chat_MuteChat_FullMethodName         = "/flipchat.chat.v1.Chat/MuteChat"
	Chat_UnmuteChat_FullMethodName       = "/flipchat.chat.v1.Chat/UnmuteChat"
	Chat_ReportUser_FullMethodName       = "/flipchat.chat.v1.Chat/ReportUser"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// StreamChatEvents streams all chat events for the requesting user.
	//
	// Chat events will include any update to a chat, including:
	//  1. Metadata changes.
	//  2. Membership changes.
	//  3. Latest messages.
	//
	// The server will optionally filter out some events depending on load
	// and chat type. For example, Broadcast chats may not receive latest
	// messages.
	//
	// Clients should use GetMessages to backfill in any historical messages
	// for a chat. It should be sufficient to rely on ChatEvents for some types
	// of chats, but using StreamMessages provides a guarentee of message events
	// for all chats.
	StreamChatEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamChatEventsRequest, StreamChatEventsResponse], error)
	// GetChats gets the set of chats for an owner account using a paged API.
	// This RPC is aware of all identities tied to the owner account.
	GetChats(ctx context.Context, in *GetChatsRequest, opts ...grpc.CallOption) (*GetChatsResponse, error)
	// GetChat returns the metadata for a specific chat.
	GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error)
	// StartChat starts a chat. The RPC call is idempotent and will use existing
	// chats whenever applicable within the context of message routing.
	StartChat(ctx context.Context, in *StartChatRequest, opts ...grpc.CallOption) (*StartChatResponse, error)
	// JoinChat joins a given chat.
	JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatResponse, error)
	// LeaveChat leaves a given chat.
	LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*LeaveChatResponse, error)
	// OpenChat opens a chat up for messaging across all members
	OpenChat(ctx context.Context, in *OpenChatRequest, opts ...grpc.CallOption) (*OpenChatResponse, error)
	// CloseChat closes a chat up for messaging to just the chat owner
	CloseChat(ctx context.Context, in *CloseChatRequest, opts ...grpc.CallOption) (*CloseChatResponse, error)
	// SetDisplayName sets a chat's display name. If the display name isn't allowed,
	// then a set of alternate suggestions may be provided
	SetDisplayName(ctx context.Context, in *SetDisplayNameRequest, opts ...grpc.CallOption) (*SetDisplayNameResponse, error)
	// SetCoverCharge sets a chat's cover charge
	SetCoverCharge(ctx context.Context, in *SetCoverChargeRequest, opts ...grpc.CallOption) (*SetCoverChargeResponse, error)
	// GetMemberUpdates gets member updates for a given chat
	GetMemberUpdates(ctx context.Context, in *GetMemberUpdatesRequest, opts ...grpc.CallOption) (*GetMemberUpdatesResponse, error)
	// RemoveUser removes a user from a chat
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	// MuteUser mutes a user in the chat and removes their ability to send messages
	MuteUser(ctx context.Context, in *MuteUserRequest, opts ...grpc.CallOption) (*MuteUserResponse, error)
	// MuteChat mutes a chat and disables push notifications
	MuteChat(ctx context.Context, in *MuteChatRequest, opts ...grpc.CallOption) (*MuteChatResponse, error)
	// UnmuteChat unmutes a chat and enables push notifications
	UnmuteChat(ctx context.Context, in *UnmuteChatRequest, opts ...grpc.CallOption) (*UnmuteChatResponse, error)
	// ReportUser reports a user for a given message
	//
	// todo: might belong in a different service long-term
	ReportUser(ctx context.Context, in *ReportUserRequest, opts ...grpc.CallOption) (*ReportUserResponse, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) StreamChatEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamChatEventsRequest, StreamChatEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], Chat_StreamChatEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamChatEventsRequest, StreamChatEventsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_StreamChatEventsClient = grpc.BidiStreamingClient[StreamChatEventsRequest, StreamChatEventsResponse]

func (c *chatClient) GetChats(ctx context.Context, in *GetChatsRequest, opts ...grpc.CallOption) (*GetChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatsResponse)
	err := c.cc.Invoke(ctx, Chat_GetChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatResponse)
	err := c.cc.Invoke(ctx, Chat_GetChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) StartChat(ctx context.Context, in *StartChatRequest, opts ...grpc.CallOption) (*StartChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartChatResponse)
	err := c.cc.Invoke(ctx, Chat_StartChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinChatResponse)
	err := c.cc.Invoke(ctx, Chat_JoinChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*LeaveChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveChatResponse)
	err := c.cc.Invoke(ctx, Chat_LeaveChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) OpenChat(ctx context.Context, in *OpenChatRequest, opts ...grpc.CallOption) (*OpenChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenChatResponse)
	err := c.cc.Invoke(ctx, Chat_OpenChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CloseChat(ctx context.Context, in *CloseChatRequest, opts ...grpc.CallOption) (*CloseChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseChatResponse)
	err := c.cc.Invoke(ctx, Chat_CloseChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SetDisplayName(ctx context.Context, in *SetDisplayNameRequest, opts ...grpc.CallOption) (*SetDisplayNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDisplayNameResponse)
	err := c.cc.Invoke(ctx, Chat_SetDisplayName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SetCoverCharge(ctx context.Context, in *SetCoverChargeRequest, opts ...grpc.CallOption) (*SetCoverChargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCoverChargeResponse)
	err := c.cc.Invoke(ctx, Chat_SetCoverCharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetMemberUpdates(ctx context.Context, in *GetMemberUpdatesRequest, opts ...grpc.CallOption) (*GetMemberUpdatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemberUpdatesResponse)
	err := c.cc.Invoke(ctx, Chat_GetMemberUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, Chat_RemoveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) MuteUser(ctx context.Context, in *MuteUserRequest, opts ...grpc.CallOption) (*MuteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MuteUserResponse)
	err := c.cc.Invoke(ctx, Chat_MuteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) MuteChat(ctx context.Context, in *MuteChatRequest, opts ...grpc.CallOption) (*MuteChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MuteChatResponse)
	err := c.cc.Invoke(ctx, Chat_MuteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UnmuteChat(ctx context.Context, in *UnmuteChatRequest, opts ...grpc.CallOption) (*UnmuteChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnmuteChatResponse)
	err := c.cc.Invoke(ctx, Chat_UnmuteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ReportUser(ctx context.Context, in *ReportUserRequest, opts ...grpc.CallOption) (*ReportUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportUserResponse)
	err := c.cc.Invoke(ctx, Chat_ReportUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility.
type ChatServer interface {
	// StreamChatEvents streams all chat events for the requesting user.
	//
	// Chat events will include any update to a chat, including:
	//  1. Metadata changes.
	//  2. Membership changes.
	//  3. Latest messages.
	//
	// The server will optionally filter out some events depending on load
	// and chat type. For example, Broadcast chats may not receive latest
	// messages.
	//
	// Clients should use GetMessages to backfill in any historical messages
	// for a chat. It should be sufficient to rely on ChatEvents for some types
	// of chats, but using StreamMessages provides a guarentee of message events
	// for all chats.
	StreamChatEvents(grpc.BidiStreamingServer[StreamChatEventsRequest, StreamChatEventsResponse]) error
	// GetChats gets the set of chats for an owner account using a paged API.
	// This RPC is aware of all identities tied to the owner account.
	GetChats(context.Context, *GetChatsRequest) (*GetChatsResponse, error)
	// GetChat returns the metadata for a specific chat.
	GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error)
	// StartChat starts a chat. The RPC call is idempotent and will use existing
	// chats whenever applicable within the context of message routing.
	StartChat(context.Context, *StartChatRequest) (*StartChatResponse, error)
	// JoinChat joins a given chat.
	JoinChat(context.Context, *JoinChatRequest) (*JoinChatResponse, error)
	// LeaveChat leaves a given chat.
	LeaveChat(context.Context, *LeaveChatRequest) (*LeaveChatResponse, error)
	// OpenChat opens a chat up for messaging across all members
	OpenChat(context.Context, *OpenChatRequest) (*OpenChatResponse, error)
	// CloseChat closes a chat up for messaging to just the chat owner
	CloseChat(context.Context, *CloseChatRequest) (*CloseChatResponse, error)
	// SetDisplayName sets a chat's display name. If the display name isn't allowed,
	// then a set of alternate suggestions may be provided
	SetDisplayName(context.Context, *SetDisplayNameRequest) (*SetDisplayNameResponse, error)
	// SetCoverCharge sets a chat's cover charge
	SetCoverCharge(context.Context, *SetCoverChargeRequest) (*SetCoverChargeResponse, error)
	// GetMemberUpdates gets member updates for a given chat
	GetMemberUpdates(context.Context, *GetMemberUpdatesRequest) (*GetMemberUpdatesResponse, error)
	// RemoveUser removes a user from a chat
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	// MuteUser mutes a user in the chat and removes their ability to send messages
	MuteUser(context.Context, *MuteUserRequest) (*MuteUserResponse, error)
	// MuteChat mutes a chat and disables push notifications
	MuteChat(context.Context, *MuteChatRequest) (*MuteChatResponse, error)
	// UnmuteChat unmutes a chat and enables push notifications
	UnmuteChat(context.Context, *UnmuteChatRequest) (*UnmuteChatResponse, error)
	// ReportUser reports a user for a given message
	//
	// todo: might belong in a different service long-term
	ReportUser(context.Context, *ReportUserRequest) (*ReportUserResponse, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServer struct{}

func (UnimplementedChatServer) StreamChatEvents(grpc.BidiStreamingServer[StreamChatEventsRequest, StreamChatEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamChatEvents not implemented")
}
func (UnimplementedChatServer) GetChats(context.Context, *GetChatsRequest) (*GetChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChats not implemented")
}
func (UnimplementedChatServer) GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedChatServer) StartChat(context.Context, *StartChatRequest) (*StartChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChat not implemented")
}
func (UnimplementedChatServer) JoinChat(context.Context, *JoinChatRequest) (*JoinChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedChatServer) LeaveChat(context.Context, *LeaveChatRequest) (*LeaveChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedChatServer) OpenChat(context.Context, *OpenChatRequest) (*OpenChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChat not implemented")
}
func (UnimplementedChatServer) CloseChat(context.Context, *CloseChatRequest) (*CloseChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseChat not implemented")
}
func (UnimplementedChatServer) SetDisplayName(context.Context, *SetDisplayNameRequest) (*SetDisplayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDisplayName not implemented")
}
func (UnimplementedChatServer) SetCoverCharge(context.Context, *SetCoverChargeRequest) (*SetCoverChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCoverCharge not implemented")
}
func (UnimplementedChatServer) GetMemberUpdates(context.Context, *GetMemberUpdatesRequest) (*GetMemberUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberUpdates not implemented")
}
func (UnimplementedChatServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedChatServer) MuteUser(context.Context, *MuteUserRequest) (*MuteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteUser not implemented")
}
func (UnimplementedChatServer) MuteChat(context.Context, *MuteChatRequest) (*MuteChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteChat not implemented")
}
func (UnimplementedChatServer) UnmuteChat(context.Context, *UnmuteChatRequest) (*UnmuteChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmuteChat not implemented")
}
func (UnimplementedChatServer) ReportUser(context.Context, *ReportUserRequest) (*ReportUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUser not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}
func (UnimplementedChatServer) testEmbeddedByValue()              {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	// If the following call pancis, it indicates UnimplementedChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_StreamChatEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).StreamChatEvents(&grpc.GenericServerStream[StreamChatEventsRequest, StreamChatEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chat_StreamChatEventsServer = grpc.BidiStreamingServer[StreamChatEventsRequest, StreamChatEventsResponse]

func _Chat_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetChats(ctx, req.(*GetChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetChat(ctx, req.(*GetChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_StartChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).StartChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_StartChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).StartChat(ctx, req.(*StartChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_JoinChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).JoinChat(ctx, req.(*JoinChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_LeaveChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).LeaveChat(ctx, req.(*LeaveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_OpenChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).OpenChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_OpenChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).OpenChat(ctx, req.(*OpenChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CloseChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CloseChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CloseChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CloseChat(ctx, req.(*CloseChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SetDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDisplayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SetDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SetDisplayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SetDisplayName(ctx, req.(*SetDisplayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SetCoverCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCoverChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SetCoverCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SetCoverCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SetCoverCharge(ctx, req.(*SetCoverChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetMemberUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetMemberUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetMemberUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetMemberUpdates(ctx, req.(*GetMemberUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_MuteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).MuteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_MuteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).MuteUser(ctx, req.(*MuteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_MuteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).MuteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_MuteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).MuteChat(ctx, req.(*MuteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UnmuteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmuteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UnmuteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UnmuteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UnmuteChat(ctx, req.(*UnmuteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ReportUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ReportUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_ReportUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ReportUser(ctx, req.(*ReportUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flipchat.chat.v1.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChats",
			Handler:    _Chat_GetChats_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _Chat_GetChat_Handler,
		},
		{
			MethodName: "StartChat",
			Handler:    _Chat_StartChat_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _Chat_JoinChat_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _Chat_LeaveChat_Handler,
		},
		{
			MethodName: "OpenChat",
			Handler:    _Chat_OpenChat_Handler,
		},
		{
			MethodName: "CloseChat",
			Handler:    _Chat_CloseChat_Handler,
		},
		{
			MethodName: "SetDisplayName",
			Handler:    _Chat_SetDisplayName_Handler,
		},
		{
			MethodName: "SetCoverCharge",
			Handler:    _Chat_SetCoverCharge_Handler,
		},
		{
			MethodName: "GetMemberUpdates",
			Handler:    _Chat_GetMemberUpdates_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Chat_RemoveUser_Handler,
		},
		{
			MethodName: "MuteUser",
			Handler:    _Chat_MuteUser_Handler,
		},
		{
			MethodName: "MuteChat",
			Handler:    _Chat_MuteChat_Handler,
		},
		{
			MethodName: "UnmuteChat",
			Handler:    _Chat_UnmuteChat_Handler,
		},
		{
			MethodName: "ReportUser",
			Handler:    _Chat_ReportUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChatEvents",
			Handler:       _Chat_StreamChatEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat/v1/chat_service.proto",
}
