// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: chat/v1/flipchat_service.proto

package chatpb

import (
	v1 "github.com/code-payments/flipchat-protobuf-api/generated/go/common/v1"
	v11 "github.com/code-payments/flipchat-protobuf-api/generated/go/messaging/v1"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamChatEventsResponse_StreamError_Code int32

const (
	StreamChatEventsResponse_StreamError_DENIED StreamChatEventsResponse_StreamError_Code = 0
)

// Enum value maps for StreamChatEventsResponse_StreamError_Code.
var (
	StreamChatEventsResponse_StreamError_Code_name = map[int32]string{
		0: "DENIED",
	}
	StreamChatEventsResponse_StreamError_Code_value = map[string]int32{
		"DENIED": 0,
	}
)

func (x StreamChatEventsResponse_StreamError_Code) Enum() *StreamChatEventsResponse_StreamError_Code {
	p := new(StreamChatEventsResponse_StreamError_Code)
	*p = x
	return p
}

func (x StreamChatEventsResponse_StreamError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamChatEventsResponse_StreamError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[0].Descriptor()
}

func (StreamChatEventsResponse_StreamError_Code) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[0]
}

func (x StreamChatEventsResponse_StreamError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamChatEventsResponse_StreamError_Code.Descriptor instead.
func (StreamChatEventsResponse_StreamError_Code) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{1, 0, 0}
}

type GetChatsResponse_Result int32

const (
	GetChatsResponse_OK GetChatsResponse_Result = 0
)

// Enum value maps for GetChatsResponse_Result.
var (
	GetChatsResponse_Result_name = map[int32]string{
		0: "OK",
	}
	GetChatsResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x GetChatsResponse_Result) Enum() *GetChatsResponse_Result {
	p := new(GetChatsResponse_Result)
	*p = x
	return p
}

func (x GetChatsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[1].Descriptor()
}

func (GetChatsResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[1]
}

func (x GetChatsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatsResponse_Result.Descriptor instead.
func (GetChatsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{3, 0}
}

type GetChatResponse_Result int32

const (
	GetChatResponse_OK        GetChatResponse_Result = 0
	GetChatResponse_NOT_FOUND GetChatResponse_Result = 1
)

// Enum value maps for GetChatResponse_Result.
var (
	GetChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "NOT_FOUND",
	}
	GetChatResponse_Result_value = map[string]int32{
		"OK":        0,
		"NOT_FOUND": 1,
	}
)

func (x GetChatResponse_Result) Enum() *GetChatResponse_Result {
	p := new(GetChatResponse_Result)
	*p = x
	return p
}

func (x GetChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[2].Descriptor()
}

func (GetChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[2]
}

func (x GetChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChatResponse_Result.Descriptor instead.
func (GetChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{5, 0}
}

type StartChatResponse_Result int32

const (
	StartChatResponse_OK StartChatResponse_Result = 0
	// DENIED indicates the caller is not allowed to start/join the chat.
	StartChatResponse_DENIED StartChatResponse_Result = 1
	// USER_NOT_FOUND indicates that (one of) the target user's was not found.
	StartChatResponse_USER_NOT_FOUND StartChatResponse_Result = 2
)

// Enum value maps for StartChatResponse_Result.
var (
	StartChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "USER_NOT_FOUND",
	}
	StartChatResponse_Result_value = map[string]int32{
		"OK":             0,
		"DENIED":         1,
		"USER_NOT_FOUND": 2,
	}
)

func (x StartChatResponse_Result) Enum() *StartChatResponse_Result {
	p := new(StartChatResponse_Result)
	*p = x
	return p
}

func (x StartChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[3].Descriptor()
}

func (StartChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[3]
}

func (x StartChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartChatResponse_Result.Descriptor instead.
func (StartChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{7, 0}
}

type JoinChatResponse_Result int32

const (
	JoinChatResponse_OK     JoinChatResponse_Result = 0
	JoinChatResponse_DENIED JoinChatResponse_Result = 1
)

// Enum value maps for JoinChatResponse_Result.
var (
	JoinChatResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
	}
	JoinChatResponse_Result_value = map[string]int32{
		"OK":     0,
		"DENIED": 1,
	}
)

func (x JoinChatResponse_Result) Enum() *JoinChatResponse_Result {
	p := new(JoinChatResponse_Result)
	*p = x
	return p
}

func (x JoinChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[4].Descriptor()
}

func (JoinChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[4]
}

func (x JoinChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinChatResponse_Result.Descriptor instead.
func (JoinChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{10, 0}
}

type LeaveChatResponse_Result int32

const (
	LeaveChatResponse_OK LeaveChatResponse_Result = 0
)

// Enum value maps for LeaveChatResponse_Result.
var (
	LeaveChatResponse_Result_name = map[int32]string{
		0: "OK",
	}
	LeaveChatResponse_Result_value = map[string]int32{
		"OK": 0,
	}
)

func (x LeaveChatResponse_Result) Enum() *LeaveChatResponse_Result {
	p := new(LeaveChatResponse_Result)
	*p = x
	return p
}

func (x LeaveChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaveChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[5].Descriptor()
}

func (LeaveChatResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[5]
}

func (x LeaveChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaveChatResponse_Result.Descriptor instead.
func (LeaveChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{13, 0}
}

type SetMuteStateResponse_Result int32

const (
	SetMuteStateResponse_OK        SetMuteStateResponse_Result = 0
	SetMuteStateResponse_DENIED    SetMuteStateResponse_Result = 1
	SetMuteStateResponse_CANT_MUTE SetMuteStateResponse_Result = 2
)

// Enum value maps for SetMuteStateResponse_Result.
var (
	SetMuteStateResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CANT_MUTE",
	}
	SetMuteStateResponse_Result_value = map[string]int32{
		"OK":        0,
		"DENIED":    1,
		"CANT_MUTE": 2,
	}
)

func (x SetMuteStateResponse_Result) Enum() *SetMuteStateResponse_Result {
	p := new(SetMuteStateResponse_Result)
	*p = x
	return p
}

func (x SetMuteStateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetMuteStateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[6].Descriptor()
}

func (SetMuteStateResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[6]
}

func (x SetMuteStateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetMuteStateResponse_Result.Descriptor instead.
func (SetMuteStateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{15, 0}
}

type SetCoverChargeResponse_Result int32

const (
	SetCoverChargeResponse_OK       SetCoverChargeResponse_Result = 0
	SetCoverChargeResponse_DENIED   SetCoverChargeResponse_Result = 1
	SetCoverChargeResponse_CANT_SET SetCoverChargeResponse_Result = 2
)

// Enum value maps for SetCoverChargeResponse_Result.
var (
	SetCoverChargeResponse_Result_name = map[int32]string{
		0: "OK",
		1: "DENIED",
		2: "CANT_SET",
	}
	SetCoverChargeResponse_Result_value = map[string]int32{
		"OK":       0,
		"DENIED":   1,
		"CANT_SET": 2,
	}
)

func (x SetCoverChargeResponse_Result) Enum() *SetCoverChargeResponse_Result {
	p := new(SetCoverChargeResponse_Result)
	*p = x
	return p
}

func (x SetCoverChargeResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetCoverChargeResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[7].Descriptor()
}

func (SetCoverChargeResponse_Result) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[7]
}

func (x SetCoverChargeResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetCoverChargeResponse_Result.Descriptor instead.
func (SetCoverChargeResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{17, 0}
}

type Metadata_ChatType int32

const (
	Metadata_UNKNOWN Metadata_ChatType = 0
	Metadata_TWO_WAY Metadata_ChatType = 1
	Metadata_GROUP   Metadata_ChatType = 2
)

// Enum value maps for Metadata_ChatType.
var (
	Metadata_ChatType_name = map[int32]string{
		0: "UNKNOWN",
		1: "TWO_WAY",
		2: "GROUP",
	}
	Metadata_ChatType_value = map[string]int32{
		"UNKNOWN": 0,
		"TWO_WAY": 1,
		"GROUP":   2,
	}
)

func (x Metadata_ChatType) Enum() *Metadata_ChatType {
	p := new(Metadata_ChatType)
	*p = x
	return p
}

func (x Metadata_ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_flipchat_service_proto_enumTypes[8].Descriptor()
}

func (Metadata_ChatType) Type() protoreflect.EnumType {
	return &file_chat_v1_flipchat_service_proto_enumTypes[8]
}

func (x Metadata_ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_ChatType.Descriptor instead.
func (Metadata_ChatType) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{18, 0}
}

type StreamChatEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamChatEventsRequest_Params_
	//	*StreamChatEventsRequest_Pong
	Type isStreamChatEventsRequest_Type `protobuf_oneof:"type"`
}

func (x *StreamChatEventsRequest) Reset() {
	*x = StreamChatEventsRequest{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsRequest) ProtoMessage() {}

func (x *StreamChatEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamChatEventsRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{0}
}

func (m *StreamChatEventsRequest) GetType() isStreamChatEventsRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamChatEventsRequest) GetParams() *StreamChatEventsRequest_Params {
	if x, ok := x.GetType().(*StreamChatEventsRequest_Params_); ok {
		return x.Params
	}
	return nil
}

func (x *StreamChatEventsRequest) GetPong() *v1.ClientPong {
	if x, ok := x.GetType().(*StreamChatEventsRequest_Pong); ok {
		return x.Pong
	}
	return nil
}

type isStreamChatEventsRequest_Type interface {
	isStreamChatEventsRequest_Type()
}

type StreamChatEventsRequest_Params_ struct {
	Params *StreamChatEventsRequest_Params `protobuf:"bytes,1,opt,name=params,proto3,oneof"`
}

type StreamChatEventsRequest_Pong struct {
	Pong *v1.ClientPong `protobuf:"bytes,2,opt,name=pong,proto3,oneof"`
}

func (*StreamChatEventsRequest_Params_) isStreamChatEventsRequest_Type() {}

func (*StreamChatEventsRequest_Pong) isStreamChatEventsRequest_Type() {}

type StreamChatEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*StreamChatEventsResponse_Ping
	//	*StreamChatEventsResponse_Error
	//	*StreamChatEventsResponse_Events
	Type isStreamChatEventsResponse_Type `protobuf_oneof:"type"`
}

func (x *StreamChatEventsResponse) Reset() {
	*x = StreamChatEventsResponse{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse) ProtoMessage() {}

func (x *StreamChatEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{1}
}

func (m *StreamChatEventsResponse) GetType() isStreamChatEventsResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamChatEventsResponse) GetPing() *v1.ServerPing {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *StreamChatEventsResponse) GetError() *StreamChatEventsResponse_StreamError {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StreamChatEventsResponse) GetEvents() *StreamChatEventsResponse_EventBatch {
	if x, ok := x.GetType().(*StreamChatEventsResponse_Events); ok {
		return x.Events
	}
	return nil
}

type isStreamChatEventsResponse_Type interface {
	isStreamChatEventsResponse_Type()
}

type StreamChatEventsResponse_Ping struct {
	Ping *v1.ServerPing `protobuf:"bytes,1,opt,name=ping,proto3,oneof"`
}

type StreamChatEventsResponse_Error struct {
	Error *StreamChatEventsResponse_StreamError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type StreamChatEventsResponse_Events struct {
	Events *StreamChatEventsResponse_EventBatch `protobuf:"bytes,3,opt,name=events,proto3,oneof"`
}

func (*StreamChatEventsResponse_Ping) isStreamChatEventsResponse_Type() {}

func (*StreamChatEventsResponse_Error) isStreamChatEventsResponse_Type() {}

func (*StreamChatEventsResponse_Events) isStreamChatEventsResponse_Type() {}

type GetChatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryOptions *v1.QueryOptions `protobuf:"bytes,1,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
	Auth         *v1.Auth         `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetChatsRequest) Reset() {
	*x = GetChatsRequest{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsRequest) ProtoMessage() {}

func (x *GetChatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsRequest.ProtoReflect.Descriptor instead.
func (*GetChatsRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetChatsRequest) GetQueryOptions() *v1.QueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

func (x *GetChatsRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type GetChatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetChatsResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.GetChatsResponse_Result" json:"result,omitempty"`
	Chats  []*Metadata             `protobuf:"bytes,2,rep,name=chats,proto3" json:"chats,omitempty"`
}

func (x *GetChatsResponse) Reset() {
	*x = GetChatsResponse{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatsResponse) ProtoMessage() {}

func (x *GetChatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatsResponse.ProtoReflect.Descriptor instead.
func (*GetChatsResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetChatsResponse) GetResult() GetChatsResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetChatsResponse_OK
}

func (x *GetChatsResponse) GetChats() []*Metadata {
	if x != nil {
		return x.Chats
	}
	return nil
}

type GetChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*GetChatRequest_ChatId
	//	*GetChatRequest_RoomNumber
	Identifier isGetChatRequest_Identifier `protobuf_oneof:"identifier"`
	// Auth is an optional field that authenticates the call, which
	// can be used to fill out extra information in the Metadata.
	Auth *v1.Auth `protobuf:"bytes,10,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GetChatRequest) Reset() {
	*x = GetChatRequest{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRequest) ProtoMessage() {}

func (x *GetChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRequest.ProtoReflect.Descriptor instead.
func (*GetChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{4}
}

func (m *GetChatRequest) GetIdentifier() isGetChatRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetChatRequest) GetChatId() *v1.ChatId {
	if x, ok := x.GetIdentifier().(*GetChatRequest_ChatId); ok {
		return x.ChatId
	}
	return nil
}

func (x *GetChatRequest) GetRoomNumber() uint64 {
	if x, ok := x.GetIdentifier().(*GetChatRequest_RoomNumber); ok {
		return x.RoomNumber
	}
	return 0
}

func (x *GetChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type isGetChatRequest_Identifier interface {
	isGetChatRequest_Identifier()
}

type GetChatRequest_ChatId struct {
	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3,oneof"`
}

type GetChatRequest_RoomNumber struct {
	RoomNumber uint64 `protobuf:"varint,2,opt,name=room_number,json=roomNumber,proto3,oneof"`
}

func (*GetChatRequest_ChatId) isGetChatRequest_Identifier() {}

func (*GetChatRequest_RoomNumber) isGetChatRequest_Identifier() {}

type GetChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result GetChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.GetChatResponse_Result" json:"result,omitempty"`
	// Metadata is the chat metadata, if result == OK.
	//
	// The contents of the metadata may change whether or not the
	// call was authenticated.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Members contains the chat members, if result == OK.
	Members []*Member `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetChatResponse) Reset() {
	*x = GetChatResponse{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatResponse) ProtoMessage() {}

func (x *GetChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatResponse.ProtoReflect.Descriptor instead.
func (*GetChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetChatResponse) GetResult() GetChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return GetChatResponse_OK
}

func (x *GetChatResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetChatResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type StartChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameters:
	//
	//	*StartChatRequest_TwoWayChat
	//	*StartChatRequest_GroupChat
	Parameters isStartChatRequest_Parameters `protobuf_oneof:"parameters"`
	Auth       *v1.Auth                      `protobuf:"bytes,10,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *StartChatRequest) Reset() {
	*x = StartChatRequest{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatRequest) ProtoMessage() {}

func (x *StartChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatRequest.ProtoReflect.Descriptor instead.
func (*StartChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{6}
}

func (m *StartChatRequest) GetParameters() isStartChatRequest_Parameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (x *StartChatRequest) GetTwoWayChat() *StartChatRequest_StartTwoWayChatParameters {
	if x, ok := x.GetParameters().(*StartChatRequest_TwoWayChat); ok {
		return x.TwoWayChat
	}
	return nil
}

func (x *StartChatRequest) GetGroupChat() *StartChatRequest_StartGroupChatParameters {
	if x, ok := x.GetParameters().(*StartChatRequest_GroupChat); ok {
		return x.GroupChat
	}
	return nil
}

func (x *StartChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type isStartChatRequest_Parameters interface {
	isStartChatRequest_Parameters()
}

type StartChatRequest_TwoWayChat struct {
	TwoWayChat *StartChatRequest_StartTwoWayChatParameters `protobuf:"bytes,1,opt,name=two_way_chat,json=twoWayChat,proto3,oneof"`
}

type StartChatRequest_GroupChat struct {
	GroupChat *StartChatRequest_StartGroupChatParameters `protobuf:"bytes,2,opt,name=group_chat,json=groupChat,proto3,oneof"`
}

func (*StartChatRequest_TwoWayChat) isStartChatRequest_Parameters() {}

func (*StartChatRequest_GroupChat) isStartChatRequest_Parameters() {}

type StartChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result StartChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.StartChatResponse_Result" json:"result,omitempty"`
	// The chat to use if the RPC was successful.
	Chat *Metadata `protobuf:"bytes,2,opt,name=chat,proto3" json:"chat,omitempty"`
}

func (x *StartChatResponse) Reset() {
	*x = StartChatResponse{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatResponse) ProtoMessage() {}

func (x *StartChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatResponse.ProtoReflect.Descriptor instead.
func (*StartChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{7}
}

func (x *StartChatResponse) GetResult() StartChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return StartChatResponse_OK
}

func (x *StartChatResponse) GetChat() *Metadata {
	if x != nil {
		return x.Chat
	}
	return nil
}

type StartGroupChatPaymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user creating the group chat, who will be the initial owner
	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StartGroupChatPaymentMetadata) Reset() {
	*x = StartGroupChatPaymentMetadata{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartGroupChatPaymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGroupChatPaymentMetadata) ProtoMessage() {}

func (x *StartGroupChatPaymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGroupChatPaymentMetadata.ProtoReflect.Descriptor instead.
func (*StartGroupChatPaymentMetadata) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{8}
}

func (x *StartGroupChatPaymentMetadata) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

type JoinChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*JoinChatRequest_ChatId
	//	*JoinChatRequest_RoomId
	Identifier isJoinChatRequest_Identifier `protobuf_oneof:"identifier"`
	// The payment for joining a chat, which is required when the user isn't
	// the chat owner
	PaymentIntent *v1.IntentId `protobuf:"bytes,9,opt,name=payment_intent,json=paymentIntent,proto3" json:"payment_intent,omitempty"`
	Auth          *v1.Auth     `protobuf:"bytes,10,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *JoinChatRequest) Reset() {
	*x = JoinChatRequest{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChatRequest) ProtoMessage() {}

func (x *JoinChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChatRequest.ProtoReflect.Descriptor instead.
func (*JoinChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{9}
}

func (m *JoinChatRequest) GetIdentifier() isJoinChatRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *JoinChatRequest) GetChatId() *v1.ChatId {
	if x, ok := x.GetIdentifier().(*JoinChatRequest_ChatId); ok {
		return x.ChatId
	}
	return nil
}

func (x *JoinChatRequest) GetRoomId() uint64 {
	if x, ok := x.GetIdentifier().(*JoinChatRequest_RoomId); ok {
		return x.RoomId
	}
	return 0
}

func (x *JoinChatRequest) GetPaymentIntent() *v1.IntentId {
	if x != nil {
		return x.PaymentIntent
	}
	return nil
}

func (x *JoinChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type isJoinChatRequest_Identifier interface {
	isJoinChatRequest_Identifier()
}

type JoinChatRequest_ChatId struct {
	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3,oneof"`
}

type JoinChatRequest_RoomId struct {
	RoomId uint64 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3,oneof"`
}

func (*JoinChatRequest_ChatId) isJoinChatRequest_Identifier() {}

func (*JoinChatRequest_RoomId) isJoinChatRequest_Identifier() {}

type JoinChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result JoinChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.JoinChatResponse_Result" json:"result,omitempty"`
	// The chat metadata, if join was successful.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The members of the chat, if join was successful.
	Members []*Member `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *JoinChatResponse) Reset() {
	*x = JoinChatResponse{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChatResponse) ProtoMessage() {}

func (x *JoinChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChatResponse.ProtoReflect.Descriptor instead.
func (*JoinChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{10}
}

func (x *JoinChatResponse) GetResult() JoinChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return JoinChatResponse_OK
}

func (x *JoinChatResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JoinChatResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type JoinChatPaymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user joining the chat
	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The chat that the user is joining
	ChatId *v1.ChatId `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *JoinChatPaymentMetadata) Reset() {
	*x = JoinChatPaymentMetadata{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinChatPaymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChatPaymentMetadata) ProtoMessage() {}

func (x *JoinChatPaymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChatPaymentMetadata.ProtoReflect.Descriptor instead.
func (*JoinChatPaymentMetadata) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{11}
}

func (x *JoinChatPaymentMetadata) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *JoinChatPaymentMetadata) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

type LeaveChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Auth   *v1.Auth   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *LeaveChatRequest) Reset() {
	*x = LeaveChatRequest{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChatRequest) ProtoMessage() {}

func (x *LeaveChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChatRequest.ProtoReflect.Descriptor instead.
func (*LeaveChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{12}
}

func (x *LeaveChatRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *LeaveChatRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type LeaveChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result LeaveChatResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.LeaveChatResponse_Result" json:"result,omitempty"`
}

func (x *LeaveChatResponse) Reset() {
	*x = LeaveChatResponse{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChatResponse) ProtoMessage() {}

func (x *LeaveChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChatResponse.ProtoReflect.Descriptor instead.
func (*LeaveChatResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{13}
}

func (x *LeaveChatResponse) GetResult() LeaveChatResponse_Result {
	if x != nil {
		return x.Result
	}
	return LeaveChatResponse_OK
}

type SetMuteStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId  *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	IsMuted bool       `protobuf:"varint,2,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	Auth    *v1.Auth   `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *SetMuteStateRequest) Reset() {
	*x = SetMuteStateRequest{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMuteStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMuteStateRequest) ProtoMessage() {}

func (x *SetMuteStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMuteStateRequest.ProtoReflect.Descriptor instead.
func (*SetMuteStateRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{14}
}

func (x *SetMuteStateRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetMuteStateRequest) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *SetMuteStateRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type SetMuteStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetMuteStateResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.SetMuteStateResponse_Result" json:"result,omitempty"`
}

func (x *SetMuteStateResponse) Reset() {
	*x = SetMuteStateResponse{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMuteStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMuteStateResponse) ProtoMessage() {}

func (x *SetMuteStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMuteStateResponse.ProtoReflect.Descriptor instead.
func (*SetMuteStateResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{15}
}

func (x *SetMuteStateResponse) GetResult() SetMuteStateResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetMuteStateResponse_OK
}

type SetCoverChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      *v1.ChatId        `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	CoverCharge *v1.PaymentAmount `protobuf:"bytes,2,opt,name=cover_charge,json=coverCharge,proto3" json:"cover_charge,omitempty"`
	Auth        *v1.Auth          `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *SetCoverChargeRequest) Reset() {
	*x = SetCoverChargeRequest{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCoverChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoverChargeRequest) ProtoMessage() {}

func (x *SetCoverChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoverChargeRequest.ProtoReflect.Descriptor instead.
func (*SetCoverChargeRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{16}
}

func (x *SetCoverChargeRequest) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *SetCoverChargeRequest) GetCoverCharge() *v1.PaymentAmount {
	if x != nil {
		return x.CoverCharge
	}
	return nil
}

func (x *SetCoverChargeRequest) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type SetCoverChargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result SetCoverChargeResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=flipchat.chat.v1.SetCoverChargeResponse_Result" json:"result,omitempty"`
}

func (x *SetCoverChargeResponse) Reset() {
	*x = SetCoverChargeResponse{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCoverChargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoverChargeResponse) ProtoMessage() {}

func (x *SetCoverChargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoverChargeResponse.ProtoReflect.Descriptor instead.
func (*SetCoverChargeResponse) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{17}
}

func (x *SetCoverChargeResponse) GetResult() SetCoverChargeResponse_Result {
	if x != nil {
		return x.Result
	}
	return SetCoverChargeResponse_OK
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// The type of chat
	Type Metadata_ChatType `protobuf:"varint,2,opt,name=type,proto3,enum=flipchat.chat.v1.Metadata_ChatType" json:"type,omitempty"`
	// The chat title, which is _only_ set by server if an explicit title
	// was set. Otherwise, clients should fill in an appropriate chat title.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// If non-zero, the room number associated with the chat.
	RoomNumber uint64 `protobuf:"varint,4,opt,name=room_number,json=roomNumber,proto3" json:"room_number,omitempty"`
	// Whether or not the chat is muted (from the perspective of the caller).
	IsMuted bool `protobuf:"varint,5,opt,name=is_muted,json=isMuted,proto3" json:"is_muted,omitempty"`
	// Whether or not the chat is mutable (from the persective of the caller).
	Muteable bool `protobuf:"varint,6,opt,name=muteable,proto3" json:"muteable,omitempty"`
	// Number of (estimated) unread message (from the perspective of the caller).
	NumUnread uint32 `protobuf:"varint,7,opt,name=num_unread,json=numUnread,proto3" json:"num_unread,omitempty"`
	// Owner is the owner/creator of the chat.
	//
	// This is a super priviledge role, in which there can only be one.
	// This role is displayed as a 'host' currently.
	Owner *v1.UserId `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	// If present, the cover charge that must be paid to join the chat
	CoverCharge *v1.PaymentAmount `protobuf:"bytes,9,opt,name=cover_charge,json=coverCharge,proto3" json:"cover_charge,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{18}
}

func (x *Metadata) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *Metadata) GetType() Metadata_ChatType {
	if x != nil {
		return x.Type
	}
	return Metadata_UNKNOWN
}

func (x *Metadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Metadata) GetRoomNumber() uint64 {
	if x != nil {
		return x.RoomNumber
	}
	return 0
}

func (x *Metadata) GetIsMuted() bool {
	if x != nil {
		return x.IsMuted
	}
	return false
}

func (x *Metadata) GetMuteable() bool {
	if x != nil {
		return x.Muteable
	}
	return false
}

func (x *Metadata) GetNumUnread() uint32 {
	if x != nil {
		return x.NumUnread
	}
	return 0
}

func (x *Metadata) GetOwner() *v1.UserId {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Metadata) GetCoverCharge() *v1.PaymentAmount {
	if x != nil {
		return x.CoverCharge
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId *v1.UserId `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The chat member's identity/profile information.
	//
	// It is a light weight version of the users full profile, which
	// can be retrieved from the Profile service.
	Identity *MemberIdentity `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// Chat message state for this member.
	//
	// If set, the list may contain DELIVERED and READ pointers. SENT pointers
	// are only shared between the sender and server, to indicate persistence.
	//
	// The server may wish to omit all pointers in various types of group chats
	// or as relief valves.
	Pointers []*v11.Pointer `protobuf:"bytes,3,rep,name=pointers,proto3" json:"pointers,omitempty"`
	// If the member is the caller (where applicable), will be set to true.
	IsSelf bool `protobuf:"varint,4,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"`
	// NOTE: We may switch to 'roles' in the future.
	IsHost bool `protobuf:"varint,5,opt,name=is_host,json=isHost,proto3" json:"is_host,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{19}
}

func (x *Member) GetUserId() *v1.UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *Member) GetIdentity() *MemberIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *Member) GetPointers() []*v11.Pointer {
	if x != nil {
		return x.Pointers
	}
	return nil
}

func (x *Member) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

func (x *Member) GetIsHost() bool {
	if x != nil {
		return x.IsHost
	}
	return false
}

type MemberIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If present, the display name of the user.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// If present, the URL of the users profile pic.
	ProfilePicUrl string `protobuf:"bytes,2,opt,name=profile_pic_url,json=profilePicUrl,proto3" json:"profile_pic_url,omitempty"`
}

func (x *MemberIdentity) Reset() {
	*x = MemberIdentity{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberIdentity) ProtoMessage() {}

func (x *MemberIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberIdentity.ProtoReflect.Descriptor instead.
func (*MemberIdentity) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{20}
}

func (x *MemberIdentity) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MemberIdentity) GetProfilePicUrl() string {
	if x != nil {
		return x.ProfilePicUrl
	}
	return ""
}

type StreamChatEventsRequest_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *v1.Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// ts contains the time for stream open.
	//
	// It is used primarily as a nonce for auth. Server may reject
	// timestamps that are too far in the future or past.
	Ts *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *StreamChatEventsRequest_Params) Reset() {
	*x = StreamChatEventsRequest_Params{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsRequest_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsRequest_Params) ProtoMessage() {}

func (x *StreamChatEventsRequest_Params) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsRequest_Params.ProtoReflect.Descriptor instead.
func (*StreamChatEventsRequest_Params) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StreamChatEventsRequest_Params) GetAuth() *v1.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *StreamChatEventsRequest_Params) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

type StreamChatEventsResponse_StreamError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code StreamChatEventsResponse_StreamError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=flipchat.chat.v1.StreamChatEventsResponse_StreamError_Code" json:"code,omitempty"`
}

func (x *StreamChatEventsResponse_StreamError) Reset() {
	*x = StreamChatEventsResponse_StreamError{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_StreamError) ProtoMessage() {}

func (x *StreamChatEventsResponse_StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_StreamError.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_StreamError) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StreamChatEventsResponse_StreamError) GetCode() StreamChatEventsResponse_StreamError_Code {
	if x != nil {
		return x.Code
	}
	return StreamChatEventsResponse_StreamError_DENIED
}

type StreamChatEventsResponse_EventBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*StreamChatEventsResponse_ChatUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *StreamChatEventsResponse_EventBatch) Reset() {
	*x = StreamChatEventsResponse_EventBatch{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_EventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_EventBatch) ProtoMessage() {}

func (x *StreamChatEventsResponse_EventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_EventBatch.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_EventBatch) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StreamChatEventsResponse_EventBatch) GetUpdates() []*StreamChatEventsResponse_ChatUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

// ChatUpdate contains a set of updates for a given chat id.
//
// Only the relevant fields will be set on update. On initial
// stream open, all fields will be set, however.
type StreamChatEventsResponse_ChatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v1.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// metadata contains the latest (full) metadata of the chat.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// MemberUpdate contains an update to the membership set.
	MemberUpdate *StreamChatEventsResponse_MemberUpdate `protobuf:"bytes,3,opt,name=member_update,json=memberUpdate,proto3" json:"member_update,omitempty"`
	// Message contains the last known message of the chat.
	LastMessage *v11.Message `protobuf:"bytes,4,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	// where 'relevant' means "relevant to UI updates". For example,
	// when a user has read the latest message.
	Pointer *StreamChatEventsResponse_ChatUpdate_PointerUpdate `protobuf:"bytes,5,opt,name=pointer,proto3" json:"pointer,omitempty"`
	// IsTyping indicates whether or not someone is typing in the group.
	IsTyping *v11.IsTyping `protobuf:"bytes,6,opt,name=is_typing,json=isTyping,proto3" json:"is_typing,omitempty"`
}

func (x *StreamChatEventsResponse_ChatUpdate) Reset() {
	*x = StreamChatEventsResponse_ChatUpdate{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_ChatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_ChatUpdate) ProtoMessage() {}

func (x *StreamChatEventsResponse_ChatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_ChatUpdate.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_ChatUpdate) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *StreamChatEventsResponse_ChatUpdate) GetChatId() *v1.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetMemberUpdate() *StreamChatEventsResponse_MemberUpdate {
	if x != nil {
		return x.MemberUpdate
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetLastMessage() *v11.Message {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetPointer() *StreamChatEventsResponse_ChatUpdate_PointerUpdate {
	if x != nil {
		return x.Pointer
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate) GetIsTyping() *v11.IsTyping {
	if x != nil {
		return x.IsTyping
	}
	return nil
}

type StreamChatEventsResponse_MemberUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*StreamChatEventsResponse_MemberUpdate_Refresh_
	Kind isStreamChatEventsResponse_MemberUpdate_Kind `protobuf_oneof:"kind"`
}

func (x *StreamChatEventsResponse_MemberUpdate) Reset() {
	*x = StreamChatEventsResponse_MemberUpdate{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_MemberUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_MemberUpdate) ProtoMessage() {}

func (x *StreamChatEventsResponse_MemberUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_MemberUpdate.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_MemberUpdate) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{1, 3}
}

func (m *StreamChatEventsResponse_MemberUpdate) GetKind() isStreamChatEventsResponse_MemberUpdate_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *StreamChatEventsResponse_MemberUpdate) GetRefresh() *StreamChatEventsResponse_MemberUpdate_Refresh {
	if x, ok := x.GetKind().(*StreamChatEventsResponse_MemberUpdate_Refresh_); ok {
		return x.Refresh
	}
	return nil
}

type isStreamChatEventsResponse_MemberUpdate_Kind interface {
	isStreamChatEventsResponse_MemberUpdate_Kind()
}

type StreamChatEventsResponse_MemberUpdate_Refresh_ struct {
	Refresh *StreamChatEventsResponse_MemberUpdate_Refresh `protobuf:"bytes,1,opt,name=refresh,proto3,oneof"`
}

func (*StreamChatEventsResponse_MemberUpdate_Refresh_) isStreamChatEventsResponse_MemberUpdate_Kind() {
}

type StreamChatEventsResponse_ChatUpdate_PointerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member  *v1.UserId   `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Pointer *v11.Pointer `protobuf:"bytes,2,opt,name=pointer,proto3" json:"pointer,omitempty"`
}

func (x *StreamChatEventsResponse_ChatUpdate_PointerUpdate) Reset() {
	*x = StreamChatEventsResponse_ChatUpdate_PointerUpdate{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_ChatUpdate_PointerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_ChatUpdate_PointerUpdate) ProtoMessage() {}

func (x *StreamChatEventsResponse_ChatUpdate_PointerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_ChatUpdate_PointerUpdate.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_ChatUpdate_PointerUpdate) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *StreamChatEventsResponse_ChatUpdate_PointerUpdate) GetMember() *v1.UserId {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *StreamChatEventsResponse_ChatUpdate_PointerUpdate) GetPointer() *v11.Pointer {
	if x != nil {
		return x.Pointer
	}
	return nil
}

type StreamChatEventsResponse_MemberUpdate_Refresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *StreamChatEventsResponse_MemberUpdate_Refresh) Reset() {
	*x = StreamChatEventsResponse_MemberUpdate_Refresh{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatEventsResponse_MemberUpdate_Refresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatEventsResponse_MemberUpdate_Refresh) ProtoMessage() {}

func (x *StreamChatEventsResponse_MemberUpdate_Refresh) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatEventsResponse_MemberUpdate_Refresh.ProtoReflect.Descriptor instead.
func (*StreamChatEventsResponse_MemberUpdate_Refresh) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{1, 3, 0}
}

func (x *StreamChatEventsResponse_MemberUpdate_Refresh) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

// StartTwoWayChatParameters contains the parameters required to start
// or recover a two way chat between the caller and the specified 'other_user'.
//
// The 'other_user' is currently the 'tip_address', normally retrieved from
// user.Identity.GetTwitterUser(username).
type StartChatRequest_StartTwoWayChatParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account id of the user the caller wishes to chat with.
	OtherUserId *v1.UserId `protobuf:"bytes,1,opt,name=other_user_id,json=otherUserId,proto3" json:"other_user_id,omitempty"`
}

func (x *StartChatRequest_StartTwoWayChatParameters) Reset() {
	*x = StartChatRequest_StartTwoWayChatParameters{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatRequest_StartTwoWayChatParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatRequest_StartTwoWayChatParameters) ProtoMessage() {}

func (x *StartChatRequest_StartTwoWayChatParameters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatRequest_StartTwoWayChatParameters.ProtoReflect.Descriptor instead.
func (*StartChatRequest_StartTwoWayChatParameters) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *StartChatRequest_StartTwoWayChatParameters) GetOtherUserId() *v1.UserId {
	if x != nil {
		return x.OtherUserId
	}
	return nil
}

type StartChatRequest_StartGroupChatParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of users (not including self) to initially set in the group chat.
	Users []*v1.UserId `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// Optional title to set for the group.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The payment for creating the group
	PaymentIntent *v1.IntentId `protobuf:"bytes,3,opt,name=payment_intent,json=paymentIntent,proto3" json:"payment_intent,omitempty"`
}

func (x *StartChatRequest_StartGroupChatParameters) Reset() {
	*x = StartChatRequest_StartGroupChatParameters{}
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartChatRequest_StartGroupChatParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartChatRequest_StartGroupChatParameters) ProtoMessage() {}

func (x *StartChatRequest_StartGroupChatParameters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_flipchat_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartChatRequest_StartGroupChatParameters.ProtoReflect.Descriptor instead.
func (*StartChatRequest_StartGroupChatParameters) Descriptor() ([]byte, []int) {
	return file_chat_v1_flipchat_service_proto_rawDescGZIP(), []int{6, 1}
}

func (x *StartChatRequest_StartGroupChatParameters) GetUsers() []*v1.UserId {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *StartChatRequest_StartGroupChatParameters) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StartChatRequest_StartGroupChatParameters) GetPaymentIntent() *v1.IntentId {
	if x != nil {
		return x.PaymentIntent
	}
	return nil
}

var File_chat_v1_flipchat_service_proto protoreflect.FileDescriptor

var file_chat_v1_flipchat_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa0, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x1a, 0x76,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x34, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x02, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0xfa, 0x09, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x72, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x6a, 0x0a, 0x0a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x5c, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10, 0x80, 0x08, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xd5, 0x04, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d,
	0x0a, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x69, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x91, 0x01, 0x0a, 0x0d,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x1a,
	0xc1, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x5b, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x1a, 0x47, 0x0a,
	0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x0b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0x90, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00,
	0x10, 0x64, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0xab, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x1f, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x22, 0xc4, 0x04, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x60, 0x0a, 0x0c, 0x74, 0x77, 0x6f, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x5c, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x65, 0x0a, 0x19, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x77, 0x6f, 0x57, 0x61, 0x79, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0xbd, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x00, 0x10, 0x20, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x11, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x22, 0x30, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22,
	0x5e, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xf3, 0x01, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x42, 0x11, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x1c, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x69, 0x0a,
	0x11, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x2b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x02, 0x22,
	0xd4, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2a, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x22, 0xce, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x20, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80, 0x08,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x30,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x57, 0x4f, 0x5f, 0x57, 0x41, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x22, 0xff, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x46, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x02, 0x52, 0x08, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x65,
	0x6c, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x0e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x32, 0xdb, 0x05, 0x0a, 0x04, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x6d, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x51, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x21,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x20, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x22, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x21, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6c, 0x69,
	0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x09, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x22, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x6c,
	0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7b, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x69, 0x6e, 0x63, 0x2e, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x5a, 0x4a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x66, 0x6c, 0x69, 0x70, 0x63, 0x68, 0x61, 0x74, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76,
	0x31, 0x3b, 0x63, 0x68, 0x61, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x0a, 0x46, 0x43, 0x50, 0x42, 0x43,
	0x68, 0x61, 0x74, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_v1_flipchat_service_proto_rawDescOnce sync.Once
	file_chat_v1_flipchat_service_proto_rawDescData = file_chat_v1_flipchat_service_proto_rawDesc
)

func file_chat_v1_flipchat_service_proto_rawDescGZIP() []byte {
	file_chat_v1_flipchat_service_proto_rawDescOnce.Do(func() {
		file_chat_v1_flipchat_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_v1_flipchat_service_proto_rawDescData)
	})
	return file_chat_v1_flipchat_service_proto_rawDescData
}

var file_chat_v1_flipchat_service_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_chat_v1_flipchat_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_chat_v1_flipchat_service_proto_goTypes = []any{
	(StreamChatEventsResponse_StreamError_Code)(0),            // 0: flipchat.chat.v1.StreamChatEventsResponse.StreamError.Code
	(GetChatsResponse_Result)(0),                              // 1: flipchat.chat.v1.GetChatsResponse.Result
	(GetChatResponse_Result)(0),                               // 2: flipchat.chat.v1.GetChatResponse.Result
	(StartChatResponse_Result)(0),                             // 3: flipchat.chat.v1.StartChatResponse.Result
	(JoinChatResponse_Result)(0),                              // 4: flipchat.chat.v1.JoinChatResponse.Result
	(LeaveChatResponse_Result)(0),                             // 5: flipchat.chat.v1.LeaveChatResponse.Result
	(SetMuteStateResponse_Result)(0),                          // 6: flipchat.chat.v1.SetMuteStateResponse.Result
	(SetCoverChargeResponse_Result)(0),                        // 7: flipchat.chat.v1.SetCoverChargeResponse.Result
	(Metadata_ChatType)(0),                                    // 8: flipchat.chat.v1.Metadata.ChatType
	(*StreamChatEventsRequest)(nil),                           // 9: flipchat.chat.v1.StreamChatEventsRequest
	(*StreamChatEventsResponse)(nil),                          // 10: flipchat.chat.v1.StreamChatEventsResponse
	(*GetChatsRequest)(nil),                                   // 11: flipchat.chat.v1.GetChatsRequest
	(*GetChatsResponse)(nil),                                  // 12: flipchat.chat.v1.GetChatsResponse
	(*GetChatRequest)(nil),                                    // 13: flipchat.chat.v1.GetChatRequest
	(*GetChatResponse)(nil),                                   // 14: flipchat.chat.v1.GetChatResponse
	(*StartChatRequest)(nil),                                  // 15: flipchat.chat.v1.StartChatRequest
	(*StartChatResponse)(nil),                                 // 16: flipchat.chat.v1.StartChatResponse
	(*StartGroupChatPaymentMetadata)(nil),                     // 17: flipchat.chat.v1.StartGroupChatPaymentMetadata
	(*JoinChatRequest)(nil),                                   // 18: flipchat.chat.v1.JoinChatRequest
	(*JoinChatResponse)(nil),                                  // 19: flipchat.chat.v1.JoinChatResponse
	(*JoinChatPaymentMetadata)(nil),                           // 20: flipchat.chat.v1.JoinChatPaymentMetadata
	(*LeaveChatRequest)(nil),                                  // 21: flipchat.chat.v1.LeaveChatRequest
	(*LeaveChatResponse)(nil),                                 // 22: flipchat.chat.v1.LeaveChatResponse
	(*SetMuteStateRequest)(nil),                               // 23: flipchat.chat.v1.SetMuteStateRequest
	(*SetMuteStateResponse)(nil),                              // 24: flipchat.chat.v1.SetMuteStateResponse
	(*SetCoverChargeRequest)(nil),                             // 25: flipchat.chat.v1.SetCoverChargeRequest
	(*SetCoverChargeResponse)(nil),                            // 26: flipchat.chat.v1.SetCoverChargeResponse
	(*Metadata)(nil),                                          // 27: flipchat.chat.v1.Metadata
	(*Member)(nil),                                            // 28: flipchat.chat.v1.Member
	(*MemberIdentity)(nil),                                    // 29: flipchat.chat.v1.MemberIdentity
	(*StreamChatEventsRequest_Params)(nil),                    // 30: flipchat.chat.v1.StreamChatEventsRequest.Params
	(*StreamChatEventsResponse_StreamError)(nil),              // 31: flipchat.chat.v1.StreamChatEventsResponse.StreamError
	(*StreamChatEventsResponse_EventBatch)(nil),               // 32: flipchat.chat.v1.StreamChatEventsResponse.EventBatch
	(*StreamChatEventsResponse_ChatUpdate)(nil),               // 33: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate
	(*StreamChatEventsResponse_MemberUpdate)(nil),             // 34: flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate
	(*StreamChatEventsResponse_ChatUpdate_PointerUpdate)(nil), // 35: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.PointerUpdate
	(*StreamChatEventsResponse_MemberUpdate_Refresh)(nil),     // 36: flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate.Refresh
	(*StartChatRequest_StartTwoWayChatParameters)(nil),        // 37: flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters
	(*StartChatRequest_StartGroupChatParameters)(nil),         // 38: flipchat.chat.v1.StartChatRequest.StartGroupChatParameters
	(*v1.ClientPong)(nil),                                     // 39: flipchat.common.v1.ClientPong
	(*v1.ServerPing)(nil),                                     // 40: flipchat.common.v1.ServerPing
	(*v1.QueryOptions)(nil),                                   // 41: flipchat.common.v1.QueryOptions
	(*v1.Auth)(nil),                                           // 42: flipchat.common.v1.Auth
	(*v1.ChatId)(nil),                                         // 43: flipchat.common.v1.ChatId
	(*v1.UserId)(nil),                                         // 44: flipchat.common.v1.UserId
	(*v1.IntentId)(nil),                                       // 45: flipchat.common.v1.IntentId
	(*v1.PaymentAmount)(nil),                                  // 46: flipchat.common.v1.PaymentAmount
	(*v11.Pointer)(nil),                                       // 47: flipchat.messaging.v1.Pointer
	(*timestamppb.Timestamp)(nil),                             // 48: google.protobuf.Timestamp
	(*v11.Message)(nil),                                       // 49: flipchat.messaging.v1.Message
	(*v11.IsTyping)(nil),                                      // 50: flipchat.messaging.v1.IsTyping
}
var file_chat_v1_flipchat_service_proto_depIdxs = []int32{
	30, // 0: flipchat.chat.v1.StreamChatEventsRequest.params:type_name -> flipchat.chat.v1.StreamChatEventsRequest.Params
	39, // 1: flipchat.chat.v1.StreamChatEventsRequest.pong:type_name -> flipchat.common.v1.ClientPong
	40, // 2: flipchat.chat.v1.StreamChatEventsResponse.ping:type_name -> flipchat.common.v1.ServerPing
	31, // 3: flipchat.chat.v1.StreamChatEventsResponse.error:type_name -> flipchat.chat.v1.StreamChatEventsResponse.StreamError
	32, // 4: flipchat.chat.v1.StreamChatEventsResponse.events:type_name -> flipchat.chat.v1.StreamChatEventsResponse.EventBatch
	41, // 5: flipchat.chat.v1.GetChatsRequest.query_options:type_name -> flipchat.common.v1.QueryOptions
	42, // 6: flipchat.chat.v1.GetChatsRequest.auth:type_name -> flipchat.common.v1.Auth
	1,  // 7: flipchat.chat.v1.GetChatsResponse.result:type_name -> flipchat.chat.v1.GetChatsResponse.Result
	27, // 8: flipchat.chat.v1.GetChatsResponse.chats:type_name -> flipchat.chat.v1.Metadata
	43, // 9: flipchat.chat.v1.GetChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	42, // 10: flipchat.chat.v1.GetChatRequest.auth:type_name -> flipchat.common.v1.Auth
	2,  // 11: flipchat.chat.v1.GetChatResponse.result:type_name -> flipchat.chat.v1.GetChatResponse.Result
	27, // 12: flipchat.chat.v1.GetChatResponse.metadata:type_name -> flipchat.chat.v1.Metadata
	28, // 13: flipchat.chat.v1.GetChatResponse.members:type_name -> flipchat.chat.v1.Member
	37, // 14: flipchat.chat.v1.StartChatRequest.two_way_chat:type_name -> flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters
	38, // 15: flipchat.chat.v1.StartChatRequest.group_chat:type_name -> flipchat.chat.v1.StartChatRequest.StartGroupChatParameters
	42, // 16: flipchat.chat.v1.StartChatRequest.auth:type_name -> flipchat.common.v1.Auth
	3,  // 17: flipchat.chat.v1.StartChatResponse.result:type_name -> flipchat.chat.v1.StartChatResponse.Result
	27, // 18: flipchat.chat.v1.StartChatResponse.chat:type_name -> flipchat.chat.v1.Metadata
	44, // 19: flipchat.chat.v1.StartGroupChatPaymentMetadata.user_id:type_name -> flipchat.common.v1.UserId
	43, // 20: flipchat.chat.v1.JoinChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	45, // 21: flipchat.chat.v1.JoinChatRequest.payment_intent:type_name -> flipchat.common.v1.IntentId
	42, // 22: flipchat.chat.v1.JoinChatRequest.auth:type_name -> flipchat.common.v1.Auth
	4,  // 23: flipchat.chat.v1.JoinChatResponse.result:type_name -> flipchat.chat.v1.JoinChatResponse.Result
	27, // 24: flipchat.chat.v1.JoinChatResponse.metadata:type_name -> flipchat.chat.v1.Metadata
	28, // 25: flipchat.chat.v1.JoinChatResponse.members:type_name -> flipchat.chat.v1.Member
	44, // 26: flipchat.chat.v1.JoinChatPaymentMetadata.user_id:type_name -> flipchat.common.v1.UserId
	43, // 27: flipchat.chat.v1.JoinChatPaymentMetadata.chat_id:type_name -> flipchat.common.v1.ChatId
	43, // 28: flipchat.chat.v1.LeaveChatRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	42, // 29: flipchat.chat.v1.LeaveChatRequest.auth:type_name -> flipchat.common.v1.Auth
	5,  // 30: flipchat.chat.v1.LeaveChatResponse.result:type_name -> flipchat.chat.v1.LeaveChatResponse.Result
	43, // 31: flipchat.chat.v1.SetMuteStateRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	42, // 32: flipchat.chat.v1.SetMuteStateRequest.auth:type_name -> flipchat.common.v1.Auth
	6,  // 33: flipchat.chat.v1.SetMuteStateResponse.result:type_name -> flipchat.chat.v1.SetMuteStateResponse.Result
	43, // 34: flipchat.chat.v1.SetCoverChargeRequest.chat_id:type_name -> flipchat.common.v1.ChatId
	46, // 35: flipchat.chat.v1.SetCoverChargeRequest.cover_charge:type_name -> flipchat.common.v1.PaymentAmount
	42, // 36: flipchat.chat.v1.SetCoverChargeRequest.auth:type_name -> flipchat.common.v1.Auth
	7,  // 37: flipchat.chat.v1.SetCoverChargeResponse.result:type_name -> flipchat.chat.v1.SetCoverChargeResponse.Result
	43, // 38: flipchat.chat.v1.Metadata.chat_id:type_name -> flipchat.common.v1.ChatId
	8,  // 39: flipchat.chat.v1.Metadata.type:type_name -> flipchat.chat.v1.Metadata.ChatType
	44, // 40: flipchat.chat.v1.Metadata.owner:type_name -> flipchat.common.v1.UserId
	46, // 41: flipchat.chat.v1.Metadata.cover_charge:type_name -> flipchat.common.v1.PaymentAmount
	44, // 42: flipchat.chat.v1.Member.user_id:type_name -> flipchat.common.v1.UserId
	29, // 43: flipchat.chat.v1.Member.identity:type_name -> flipchat.chat.v1.MemberIdentity
	47, // 44: flipchat.chat.v1.Member.pointers:type_name -> flipchat.messaging.v1.Pointer
	42, // 45: flipchat.chat.v1.StreamChatEventsRequest.Params.auth:type_name -> flipchat.common.v1.Auth
	48, // 46: flipchat.chat.v1.StreamChatEventsRequest.Params.ts:type_name -> google.protobuf.Timestamp
	0,  // 47: flipchat.chat.v1.StreamChatEventsResponse.StreamError.code:type_name -> flipchat.chat.v1.StreamChatEventsResponse.StreamError.Code
	33, // 48: flipchat.chat.v1.StreamChatEventsResponse.EventBatch.updates:type_name -> flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate
	43, // 49: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.chat_id:type_name -> flipchat.common.v1.ChatId
	27, // 50: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.metadata:type_name -> flipchat.chat.v1.Metadata
	34, // 51: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.member_update:type_name -> flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate
	49, // 52: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.last_message:type_name -> flipchat.messaging.v1.Message
	35, // 53: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.pointer:type_name -> flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.PointerUpdate
	50, // 54: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.is_typing:type_name -> flipchat.messaging.v1.IsTyping
	36, // 55: flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate.refresh:type_name -> flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate.Refresh
	44, // 56: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.PointerUpdate.member:type_name -> flipchat.common.v1.UserId
	47, // 57: flipchat.chat.v1.StreamChatEventsResponse.ChatUpdate.PointerUpdate.pointer:type_name -> flipchat.messaging.v1.Pointer
	28, // 58: flipchat.chat.v1.StreamChatEventsResponse.MemberUpdate.Refresh.members:type_name -> flipchat.chat.v1.Member
	44, // 59: flipchat.chat.v1.StartChatRequest.StartTwoWayChatParameters.other_user_id:type_name -> flipchat.common.v1.UserId
	44, // 60: flipchat.chat.v1.StartChatRequest.StartGroupChatParameters.users:type_name -> flipchat.common.v1.UserId
	45, // 61: flipchat.chat.v1.StartChatRequest.StartGroupChatParameters.payment_intent:type_name -> flipchat.common.v1.IntentId
	9,  // 62: flipchat.chat.v1.Chat.StreamChatEvents:input_type -> flipchat.chat.v1.StreamChatEventsRequest
	11, // 63: flipchat.chat.v1.Chat.GetChats:input_type -> flipchat.chat.v1.GetChatsRequest
	13, // 64: flipchat.chat.v1.Chat.GetChat:input_type -> flipchat.chat.v1.GetChatRequest
	15, // 65: flipchat.chat.v1.Chat.StartChat:input_type -> flipchat.chat.v1.StartChatRequest
	18, // 66: flipchat.chat.v1.Chat.JoinChat:input_type -> flipchat.chat.v1.JoinChatRequest
	21, // 67: flipchat.chat.v1.Chat.LeaveChat:input_type -> flipchat.chat.v1.LeaveChatRequest
	23, // 68: flipchat.chat.v1.Chat.SetMuteState:input_type -> flipchat.chat.v1.SetMuteStateRequest
	25, // 69: flipchat.chat.v1.Chat.SetCoverCharge:input_type -> flipchat.chat.v1.SetCoverChargeRequest
	10, // 70: flipchat.chat.v1.Chat.StreamChatEvents:output_type -> flipchat.chat.v1.StreamChatEventsResponse
	12, // 71: flipchat.chat.v1.Chat.GetChats:output_type -> flipchat.chat.v1.GetChatsResponse
	14, // 72: flipchat.chat.v1.Chat.GetChat:output_type -> flipchat.chat.v1.GetChatResponse
	16, // 73: flipchat.chat.v1.Chat.StartChat:output_type -> flipchat.chat.v1.StartChatResponse
	19, // 74: flipchat.chat.v1.Chat.JoinChat:output_type -> flipchat.chat.v1.JoinChatResponse
	22, // 75: flipchat.chat.v1.Chat.LeaveChat:output_type -> flipchat.chat.v1.LeaveChatResponse
	24, // 76: flipchat.chat.v1.Chat.SetMuteState:output_type -> flipchat.chat.v1.SetMuteStateResponse
	26, // 77: flipchat.chat.v1.Chat.SetCoverCharge:output_type -> flipchat.chat.v1.SetCoverChargeResponse
	70, // [70:78] is the sub-list for method output_type
	62, // [62:70] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_chat_v1_flipchat_service_proto_init() }
func file_chat_v1_flipchat_service_proto_init() {
	if File_chat_v1_flipchat_service_proto != nil {
		return
	}
	file_chat_v1_flipchat_service_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamChatEventsRequest_Params_)(nil),
		(*StreamChatEventsRequest_Pong)(nil),
	}
	file_chat_v1_flipchat_service_proto_msgTypes[1].OneofWrappers = []any{
		(*StreamChatEventsResponse_Ping)(nil),
		(*StreamChatEventsResponse_Error)(nil),
		(*StreamChatEventsResponse_Events)(nil),
	}
	file_chat_v1_flipchat_service_proto_msgTypes[4].OneofWrappers = []any{
		(*GetChatRequest_ChatId)(nil),
		(*GetChatRequest_RoomNumber)(nil),
	}
	file_chat_v1_flipchat_service_proto_msgTypes[6].OneofWrappers = []any{
		(*StartChatRequest_TwoWayChat)(nil),
		(*StartChatRequest_GroupChat)(nil),
	}
	file_chat_v1_flipchat_service_proto_msgTypes[9].OneofWrappers = []any{
		(*JoinChatRequest_ChatId)(nil),
		(*JoinChatRequest_RoomId)(nil),
	}
	file_chat_v1_flipchat_service_proto_msgTypes[25].OneofWrappers = []any{
		(*StreamChatEventsResponse_MemberUpdate_Refresh_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_v1_flipchat_service_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_v1_flipchat_service_proto_goTypes,
		DependencyIndexes: file_chat_v1_flipchat_service_proto_depIdxs,
		EnumInfos:         file_chat_v1_flipchat_service_proto_enumTypes,
		MessageInfos:      file_chat_v1_flipchat_service_proto_msgTypes,
	}.Build()
	File_chat_v1_flipchat_service_proto = out.File
	file_chat_v1_flipchat_service_proto_rawDesc = nil
	file_chat_v1_flipchat_service_proto_goTypes = nil
	file_chat_v1_flipchat_service_proto_depIdxs = nil
}
