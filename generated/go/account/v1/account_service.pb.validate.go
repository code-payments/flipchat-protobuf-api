// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/v1/account_service.proto

package acountpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPublicKey() == nil {
		err := RegisterRequestValidationError{
			field:  "PublicKey",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPublicKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "PublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := RegisterRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 0 || l > 64 {
		err := RegisterRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be between 0 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for ErrorReason

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() == nil {
		err := LoginRequestValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuth() == nil {
		err := LoginRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on AuthorizePublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizePublicKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizePublicKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizePublicKeyRequestMultiError, or nil if none found.
func (m *AuthorizePublicKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizePublicKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := AuthorizePublicKeyRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizePublicKeyRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizePublicKeyRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizePublicKeyRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPublicKey() == nil {
		err := AuthorizePublicKeyRequestValidationError{
			field:  "PublicKey",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPublicKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizePublicKeyRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizePublicKeyRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizePublicKeyRequestValidationError{
				field:  "PublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := AuthorizePublicKeyRequestValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizePublicKeyRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizePublicKeyRequestValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizePublicKeyRequestValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := AuthorizePublicKeyRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizePublicKeyRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizePublicKeyRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizePublicKeyRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthorizePublicKeyRequestMultiError(errors)
	}

	return nil
}

// AuthorizePublicKeyRequestMultiError is an error wrapping multiple validation
// errors returned by AuthorizePublicKeyRequest.ValidateAll() if the
// designated constraints aren't met.
type AuthorizePublicKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizePublicKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizePublicKeyRequestMultiError) AllErrors() []error { return m }

// AuthorizePublicKeyRequestValidationError is the validation error returned by
// AuthorizePublicKeyRequest.Validate if the designated constraints aren't met.
type AuthorizePublicKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizePublicKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizePublicKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizePublicKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizePublicKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizePublicKeyRequestValidationError) ErrorName() string {
	return "AuthorizePublicKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizePublicKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizePublicKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizePublicKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizePublicKeyRequestValidationError{}

// Validate checks the field values on AuthorizePublicKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizePublicKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizePublicKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizePublicKeyResponseMultiError, or nil if none found.
func (m *AuthorizePublicKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizePublicKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AuthorizePublicKeyResponseMultiError(errors)
	}

	return nil
}

// AuthorizePublicKeyResponseMultiError is an error wrapping multiple
// validation errors returned by AuthorizePublicKeyResponse.ValidateAll() if
// the designated constraints aren't met.
type AuthorizePublicKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizePublicKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizePublicKeyResponseMultiError) AllErrors() []error { return m }

// AuthorizePublicKeyResponseValidationError is the validation error returned
// by AuthorizePublicKeyResponse.Validate if the designated constraints aren't met.
type AuthorizePublicKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizePublicKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizePublicKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizePublicKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizePublicKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizePublicKeyResponseValidationError) ErrorName() string {
	return "AuthorizePublicKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizePublicKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizePublicKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizePublicKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizePublicKeyResponseValidationError{}

// Validate checks the field values on RevokePublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokePublicKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokePublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokePublicKeyRequestMultiError, or nil if none found.
func (m *RevokePublicKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokePublicKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := RevokePublicKeyRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevokePublicKeyRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevokePublicKeyRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevokePublicKeyRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPublicKey() == nil {
		err := RevokePublicKeyRequestValidationError{
			field:  "PublicKey",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPublicKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevokePublicKeyRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevokePublicKeyRequestValidationError{
					field:  "PublicKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevokePublicKeyRequestValidationError{
				field:  "PublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := RevokePublicKeyRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevokePublicKeyRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevokePublicKeyRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevokePublicKeyRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RevokePublicKeyRequestMultiError(errors)
	}

	return nil
}

// RevokePublicKeyRequestMultiError is an error wrapping multiple validation
// errors returned by RevokePublicKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokePublicKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokePublicKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokePublicKeyRequestMultiError) AllErrors() []error { return m }

// RevokePublicKeyRequestValidationError is the validation error returned by
// RevokePublicKeyRequest.Validate if the designated constraints aren't met.
type RevokePublicKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokePublicKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokePublicKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokePublicKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokePublicKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokePublicKeyRequestValidationError) ErrorName() string {
	return "RevokePublicKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokePublicKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokePublicKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokePublicKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokePublicKeyRequestValidationError{}

// Validate checks the field values on RevokePublicKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokePublicKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokePublicKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokePublicKeyResponseMultiError, or nil if none found.
func (m *RevokePublicKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokePublicKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return RevokePublicKeyResponseMultiError(errors)
	}

	return nil
}

// RevokePublicKeyResponseMultiError is an error wrapping multiple validation
// errors returned by RevokePublicKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type RevokePublicKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokePublicKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokePublicKeyResponseMultiError) AllErrors() []error { return m }

// RevokePublicKeyResponseValidationError is the validation error returned by
// RevokePublicKeyResponse.Validate if the designated constraints aren't met.
type RevokePublicKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokePublicKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokePublicKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokePublicKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokePublicKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokePublicKeyResponseValidationError) ErrorName() string {
	return "RevokePublicKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokePublicKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokePublicKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokePublicKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokePublicKeyResponseValidationError{}

// Validate checks the field values on GetPaymentDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentDestinationRequestMultiError, or nil if none found.
func (m *GetPaymentDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := GetPaymentDestinationRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentDestinationRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentDestinationRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentDestinationRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaymentDestinationRequestMultiError(errors)
	}

	return nil
}

// GetPaymentDestinationRequestMultiError is an error wrapping multiple
// validation errors returned by GetPaymentDestinationRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentDestinationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentDestinationRequestMultiError) AllErrors() []error { return m }

// GetPaymentDestinationRequestValidationError is the validation error returned
// by GetPaymentDestinationRequest.Validate if the designated constraints
// aren't met.
type GetPaymentDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentDestinationRequestValidationError) ErrorName() string {
	return "GetPaymentDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentDestinationRequestValidationError{}

// Validate checks the field values on GetPaymentDestinationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentDestinationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentDestinationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPaymentDestinationResponseMultiError, or nil if none found.
func (m *GetPaymentDestinationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentDestinationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetPaymentDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentDestinationResponseValidationError{
					field:  "PaymentDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentDestinationResponseValidationError{
					field:  "PaymentDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentDestinationResponseValidationError{
				field:  "PaymentDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaymentDestinationResponseMultiError(errors)
	}

	return nil
}

// GetPaymentDestinationResponseMultiError is an error wrapping multiple
// validation errors returned by GetPaymentDestinationResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPaymentDestinationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentDestinationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentDestinationResponseMultiError) AllErrors() []error { return m }

// GetPaymentDestinationResponseValidationError is the validation error
// returned by GetPaymentDestinationResponse.Validate if the designated
// constraints aren't met.
type GetPaymentDestinationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentDestinationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentDestinationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentDestinationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentDestinationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentDestinationResponseValidationError) ErrorName() string {
	return "GetPaymentDestinationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentDestinationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentDestinationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentDestinationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentDestinationResponseValidationError{}

// Validate checks the field values on GetUserFlagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFlagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFlagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFlagsRequestMultiError, or nil if none found.
func (m *GetUserFlagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFlagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := GetUserFlagsRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserFlagsRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserFlagsRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserFlagsRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAuth() == nil {
		err := GetUserFlagsRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserFlagsRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserFlagsRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserFlagsRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserFlagsRequestMultiError(errors)
	}

	return nil
}

// GetUserFlagsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserFlagsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserFlagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFlagsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFlagsRequestMultiError) AllErrors() []error { return m }

// GetUserFlagsRequestValidationError is the validation error returned by
// GetUserFlagsRequest.Validate if the designated constraints aren't met.
type GetUserFlagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFlagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFlagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFlagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFlagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFlagsRequestValidationError) ErrorName() string {
	return "GetUserFlagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFlagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFlagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFlagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFlagsRequestValidationError{}

// Validate checks the field values on GetUserFlagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFlagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFlagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFlagsResponseMultiError, or nil if none found.
func (m *GetUserFlagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFlagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetUserFlags()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserFlagsResponseValidationError{
					field:  "UserFlags",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserFlagsResponseValidationError{
					field:  "UserFlags",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserFlags()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserFlagsResponseValidationError{
				field:  "UserFlags",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserFlagsResponseMultiError(errors)
	}

	return nil
}

// GetUserFlagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserFlagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserFlagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFlagsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFlagsResponseMultiError) AllErrors() []error { return m }

// GetUserFlagsResponseValidationError is the validation error returned by
// GetUserFlagsResponse.Validate if the designated constraints aren't met.
type GetUserFlagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFlagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFlagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFlagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFlagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFlagsResponseValidationError) ErrorName() string {
	return "GetUserFlagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFlagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFlagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFlagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFlagsResponseValidationError{}

// Validate checks the field values on UserFlags with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserFlags) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFlags with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserFlagsMultiError, or nil
// if none found.
func (m *UserFlags) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFlags) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsStaff

	if m.GetStartGroupFee() == nil {
		err := UserFlagsValidationError{
			field:  "StartGroupFee",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartGroupFee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserFlagsValidationError{
					field:  "StartGroupFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserFlagsValidationError{
					field:  "StartGroupFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartGroupFee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserFlagsValidationError{
				field:  "StartGroupFee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFeeDestination() == nil {
		err := UserFlagsValidationError{
			field:  "FeeDestination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFeeDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserFlagsValidationError{
					field:  "FeeDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserFlagsValidationError{
					field:  "FeeDestination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeeDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserFlagsValidationError{
				field:  "FeeDestination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserFlagsMultiError(errors)
	}

	return nil
}

// UserFlagsMultiError is an error wrapping multiple validation errors returned
// by UserFlags.ValidateAll() if the designated constraints aren't met.
type UserFlagsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFlagsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFlagsMultiError) AllErrors() []error { return m }

// UserFlagsValidationError is the validation error returned by
// UserFlags.Validate if the designated constraints aren't met.
type UserFlagsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFlagsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFlagsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFlagsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFlagsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFlagsValidationError) ErrorName() string { return "UserFlagsValidationError" }

// Error satisfies the builtin error interface
func (e UserFlagsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFlags.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFlagsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFlagsValidationError{}
