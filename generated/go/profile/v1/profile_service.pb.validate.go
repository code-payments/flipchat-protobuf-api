// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: profile/v1/profile_service.proto

package profilepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetProfileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileRequestMultiError, or nil if none found.
func (m *GetProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() == nil {
		err := GetProfileRequestValidationError{
			field:  "UserId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUserId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProfileRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProfileRequestValidationError{
					field:  "UserId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProfileRequestValidationError{
				field:  "UserId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProfileRequestMultiError(errors)
	}

	return nil
}

// GetProfileRequestMultiError is an error wrapping multiple validation errors
// returned by GetProfileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileRequestMultiError) AllErrors() []error { return m }

// GetProfileRequestValidationError is the validation error returned by
// GetProfileRequest.Validate if the designated constraints aren't met.
type GetProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileRequestValidationError) ErrorName() string {
	return "GetProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileRequestValidationError{}

// Validate checks the field values on GetProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProfileResponseMultiError, or nil if none found.
func (m *GetProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetUserProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProfileResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProfileResponseValidationError{
					field:  "UserProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProfileResponseValidationError{
				field:  "UserProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProfileResponseMultiError(errors)
	}

	return nil
}

// GetProfileResponseMultiError is an error wrapping multiple validation errors
// returned by GetProfileResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProfileResponseMultiError) AllErrors() []error { return m }

// GetProfileResponseValidationError is the validation error returned by
// GetProfileResponse.Validate if the designated constraints aren't met.
type GetProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfileResponseValidationError) ErrorName() string {
	return "GetProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfileResponseValidationError{}

// Validate checks the field values on SetDisplayNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDisplayNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDisplayNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDisplayNameRequestMultiError, or nil if none found.
func (m *SetDisplayNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDisplayNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 1 || l > 64 {
		err := SetDisplayNameRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuth() == nil {
		err := SetDisplayNameRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDisplayNameRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDisplayNameRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDisplayNameRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetDisplayNameRequestMultiError(errors)
	}

	return nil
}

// SetDisplayNameRequestMultiError is an error wrapping multiple validation
// errors returned by SetDisplayNameRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDisplayNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDisplayNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDisplayNameRequestMultiError) AllErrors() []error { return m }

// SetDisplayNameRequestValidationError is the validation error returned by
// SetDisplayNameRequest.Validate if the designated constraints aren't met.
type SetDisplayNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDisplayNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDisplayNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDisplayNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDisplayNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDisplayNameRequestValidationError) ErrorName() string {
	return "SetDisplayNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDisplayNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDisplayNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDisplayNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDisplayNameRequestValidationError{}

// Validate checks the field values on SetDisplayNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDisplayNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDisplayNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDisplayNameResponseMultiError, or nil if none found.
func (m *SetDisplayNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDisplayNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SetDisplayNameResponseMultiError(errors)
	}

	return nil
}

// SetDisplayNameResponseMultiError is an error wrapping multiple validation
// errors returned by SetDisplayNameResponse.ValidateAll() if the designated
// constraints aren't met.
type SetDisplayNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDisplayNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDisplayNameResponseMultiError) AllErrors() []error { return m }

// SetDisplayNameResponseValidationError is the validation error returned by
// SetDisplayNameResponse.Validate if the designated constraints aren't met.
type SetDisplayNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDisplayNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDisplayNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDisplayNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDisplayNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDisplayNameResponseValidationError) ErrorName() string {
	return "SetDisplayNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDisplayNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDisplayNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDisplayNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDisplayNameResponseValidationError{}

// Validate checks the field values on LinkXAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkXAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkXAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkXAccountRequestMultiError, or nil if none found.
func (m *LinkXAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkXAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccessToken()); l < 1 || l > 4096 {
		err := LinkXAccountRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be between 1 and 4096 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuth() == nil {
		err := LinkXAccountRequestValidationError{
			field:  "Auth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkXAccountRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkXAccountRequestValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkXAccountRequestValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LinkXAccountRequestMultiError(errors)
	}

	return nil
}

// LinkXAccountRequestMultiError is an error wrapping multiple validation
// errors returned by LinkXAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type LinkXAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkXAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkXAccountRequestMultiError) AllErrors() []error { return m }

// LinkXAccountRequestValidationError is the validation error returned by
// LinkXAccountRequest.Validate if the designated constraints aren't met.
type LinkXAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkXAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkXAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkXAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkXAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkXAccountRequestValidationError) ErrorName() string {
	return "LinkXAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LinkXAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkXAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkXAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkXAccountRequestValidationError{}

// Validate checks the field values on LinkXAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LinkXAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkXAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LinkXAccountResponseMultiError, or nil if none found.
func (m *LinkXAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkXAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if all {
		switch v := interface{}(m.GetXProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkXAccountResponseValidationError{
					field:  "XProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkXAccountResponseValidationError{
					field:  "XProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetXProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkXAccountResponseValidationError{
				field:  "XProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LinkXAccountResponseMultiError(errors)
	}

	return nil
}

// LinkXAccountResponseMultiError is an error wrapping multiple validation
// errors returned by LinkXAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type LinkXAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkXAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkXAccountResponseMultiError) AllErrors() []error { return m }

// LinkXAccountResponseValidationError is the validation error returned by
// LinkXAccountResponse.Validate if the designated constraints aren't met.
type LinkXAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkXAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkXAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkXAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkXAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkXAccountResponseValidationError) ErrorName() string {
	return "LinkXAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LinkXAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkXAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkXAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkXAccountResponseValidationError{}
