// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/common.proto

package commonpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Auth with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Auth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthMultiError, or nil if none found.
func (m *Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofKindPresent := false
	switch v := m.Kind.(type) {
	case *Auth_KeyPair_:
		if v == nil {
			err := AuthValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetKeyPair()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "KeyPair",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthValidationError{
						field:  "KeyPair",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKeyPair()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthValidationError{
					field:  "KeyPair",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofKindPresent {
		err := AuthValidationError{
			field:  "Kind",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthMultiError(errors)
	}

	return nil
}

// AuthMultiError is an error wrapping multiple validation errors returned by
// Auth.ValidateAll() if the designated constraints aren't met.
type AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMultiError) AllErrors() []error { return m }

// AuthValidationError is the validation error returned by Auth.Validate if the
// designated constraints aren't met.
type AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidationError) ErrorName() string { return "AuthValidationError" }

// Error satisfies the builtin error interface
func (e AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidationError{}

// Validate checks the field values on UserId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserIdMultiError, or nil if none found.
func (m *UserId) ValidateAll() error {
	return m.validate(true)
}

func (m *UserId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 32 {
		err := UserIdValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 32 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserIdMultiError(errors)
	}

	return nil
}

// UserIdMultiError is an error wrapping multiple validation errors returned by
// UserId.ValidateAll() if the designated constraints aren't met.
type UserIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdMultiError) AllErrors() []error { return m }

// UserIdValidationError is the validation error returned by UserId.Validate if
// the designated constraints aren't met.
type UserIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdValidationError) ErrorName() string { return "UserIdValidationError" }

// Error satisfies the builtin error interface
func (e UserIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdValidationError{}

// Validate checks the field values on ChatId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChatIdMultiError, or nil if none found.
func (m *ChatId) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 16 || l > 32 {
		err := ChatIdValidationError{
			field:  "Value",
			reason: "value length must be between 16 and 32 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatIdMultiError(errors)
	}

	return nil
}

// ChatIdMultiError is an error wrapping multiple validation errors returned by
// ChatId.ValidateAll() if the designated constraints aren't met.
type ChatIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatIdMultiError) AllErrors() []error { return m }

// ChatIdValidationError is the validation error returned by ChatId.Validate if
// the designated constraints aren't met.
type ChatIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatIdValidationError) ErrorName() string { return "ChatIdValidationError" }

// Error satisfies the builtin error interface
func (e ChatIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatIdValidationError{}

// Validate checks the field values on BlobId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlobId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BlobIdMultiError, or nil if none found.
func (m *BlobId) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 32 {
		err := BlobIdValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 32 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BlobIdMultiError(errors)
	}

	return nil
}

// BlobIdMultiError is an error wrapping multiple validation errors returned by
// BlobId.ValidateAll() if the designated constraints aren't met.
type BlobIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobIdMultiError) AllErrors() []error { return m }

// BlobIdValidationError is the validation error returned by BlobId.Validate if
// the designated constraints aren't met.
type BlobIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobIdValidationError) ErrorName() string { return "BlobIdValidationError" }

// Error satisfies the builtin error interface
func (e BlobIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobIdValidationError{}

// Validate checks the field values on AppInstallId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppInstallId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppInstallId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppInstallIdMultiError, or
// nil if none found.
func (m *AppInstallId) ValidateAll() error {
	return m.validate(true)
}

func (m *AppInstallId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 256 {
		err := AppInstallIdValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AppInstallIdMultiError(errors)
	}

	return nil
}

// AppInstallIdMultiError is an error wrapping multiple validation errors
// returned by AppInstallId.ValidateAll() if the designated constraints aren't met.
type AppInstallIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppInstallIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppInstallIdMultiError) AllErrors() []error { return m }

// AppInstallIdValidationError is the validation error returned by
// AppInstallId.Validate if the designated constraints aren't met.
type AppInstallIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppInstallIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppInstallIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppInstallIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppInstallIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppInstallIdValidationError) ErrorName() string { return "AppInstallIdValidationError" }

// Error satisfies the builtin error interface
func (e AppInstallIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppInstallId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppInstallIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppInstallIdValidationError{}

// Validate checks the field values on Locale with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Locale) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Locale with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LocaleMultiError, or nil if none found.
func (m *Locale) ValidateAll() error {
	return m.validate(true)
}

func (m *Locale) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Locale_Value_Pattern.MatchString(m.GetValue()) {
		err := LocaleValidationError{
			field:  "Value",
			reason: "value does not match regex pattern \"^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LocaleMultiError(errors)
	}

	return nil
}

// LocaleMultiError is an error wrapping multiple validation errors returned by
// Locale.ValidateAll() if the designated constraints aren't met.
type LocaleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocaleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocaleMultiError) AllErrors() []error { return m }

// LocaleValidationError is the validation error returned by Locale.Validate if
// the designated constraints aren't met.
type LocaleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocaleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocaleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocaleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocaleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocaleValidationError) ErrorName() string { return "LocaleValidationError" }

// Error satisfies the builtin error interface
func (e LocaleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocale.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocaleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocaleValidationError{}

var _Locale_Value_Pattern = regexp.MustCompile("^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$")

// Validate checks the field values on PublicKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublicKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublicKeyMultiError, or nil
// if none found.
func (m *PublicKey) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := PublicKeyValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PublicKeyMultiError(errors)
	}

	return nil
}

// PublicKeyMultiError is an error wrapping multiple validation errors returned
// by PublicKey.ValidateAll() if the designated constraints aren't met.
type PublicKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKeyMultiError) AllErrors() []error { return m }

// PublicKeyValidationError is the validation error returned by
// PublicKey.Validate if the designated constraints aren't met.
type PublicKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKeyValidationError) ErrorName() string { return "PublicKeyValidationError" }

// Error satisfies the builtin error interface
func (e PublicKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKeyValidationError{}

// Validate checks the field values on IntentId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntentId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntentId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntentIdMultiError, or nil
// if none found.
func (m *IntentId) ValidateAll() error {
	return m.validate(true)
}

func (m *IntentId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 32 {
		err := IntentIdValidationError{
			field:  "Value",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntentIdMultiError(errors)
	}

	return nil
}

// IntentIdMultiError is an error wrapping multiple validation errors returned
// by IntentId.ValidateAll() if the designated constraints aren't met.
type IntentIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntentIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntentIdMultiError) AllErrors() []error { return m }

// IntentIdValidationError is the validation error returned by
// IntentId.Validate if the designated constraints aren't met.
type IntentIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntentIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntentIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntentIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntentIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntentIdValidationError) ErrorName() string { return "IntentIdValidationError" }

// Error satisfies the builtin error interface
func (e IntentIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntentId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntentIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntentIdValidationError{}

// Validate checks the field values on Signature with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Signature) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Signature with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignatureMultiError, or nil
// if none found.
func (m *Signature) ValidateAll() error {
	return m.validate(true)
}

func (m *Signature) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetValue()) != 64 {
		err := SignatureValidationError{
			field:  "Value",
			reason: "value length must be 64 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignatureMultiError(errors)
	}

	return nil
}

// SignatureMultiError is an error wrapping multiple validation errors returned
// by Signature.ValidateAll() if the designated constraints aren't met.
type SignatureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignatureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignatureMultiError) AllErrors() []error { return m }

// SignatureValidationError is the validation error returned by
// Signature.Validate if the designated constraints aren't met.
type SignatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignatureValidationError) ErrorName() string { return "SignatureValidationError" }

// Error satisfies the builtin error interface
func (e SignatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignatureValidationError{}

// Validate checks the field values on PaymentAmount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentAmount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentAmountMultiError, or
// nil if none found.
func (m *PaymentAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQuarks() <= 0 {
		err := PaymentAmountValidationError{
			field:  "Quarks",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaymentAmountMultiError(errors)
	}

	return nil
}

// PaymentAmountMultiError is an error wrapping multiple validation errors
// returned by PaymentAmount.ValidateAll() if the designated constraints
// aren't met.
type PaymentAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentAmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentAmountMultiError) AllErrors() []error { return m }

// PaymentAmountValidationError is the validation error returned by
// PaymentAmount.Validate if the designated constraints aren't met.
type PaymentAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentAmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentAmountValidationError) ErrorName() string { return "PaymentAmountValidationError" }

// Error satisfies the builtin error interface
func (e PaymentAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentAmountValidationError{}

// Validate checks the field values on ServerPing with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerPing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerPing with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerPingMultiError, or
// nil if none found.
func (m *ServerPing) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerPing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() == nil {
		err := ServerPingValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPingDelay() == nil {
		err := ServerPingValidationError{
			field:  "PingDelay",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerPingMultiError(errors)
	}

	return nil
}

// ServerPingMultiError is an error wrapping multiple validation errors
// returned by ServerPing.ValidateAll() if the designated constraints aren't met.
type ServerPingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerPingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerPingMultiError) AllErrors() []error { return m }

// ServerPingValidationError is the validation error returned by
// ServerPing.Validate if the designated constraints aren't met.
type ServerPingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerPingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerPingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerPingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerPingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerPingValidationError) ErrorName() string { return "ServerPingValidationError" }

// Error satisfies the builtin error interface
func (e ServerPingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerPingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerPingValidationError{}

// Validate checks the field values on ClientPong with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientPong) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientPong with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientPongMultiError, or
// nil if none found.
func (m *ClientPong) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientPong) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() == nil {
		err := ClientPongValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClientPongMultiError(errors)
	}

	return nil
}

// ClientPongMultiError is an error wrapping multiple validation errors
// returned by ClientPong.ValidateAll() if the designated constraints aren't met.
type ClientPongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientPongMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientPongMultiError) AllErrors() []error { return m }

// ClientPongValidationError is the validation error returned by
// ClientPong.Validate if the designated constraints aren't met.
type ClientPongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientPongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientPongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientPongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientPongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientPongValidationError) ErrorName() string { return "ClientPongValidationError" }

// Error satisfies the builtin error interface
func (e ClientPongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientPong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientPongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientPongValidationError{}

// Validate checks the field values on PagingToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PagingToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingToken with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PagingTokenMultiError, or
// nil if none found.
func (m *PagingToken) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetValue()); l < 1 || l > 128 {
		err := PagingTokenValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 128 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PagingTokenMultiError(errors)
	}

	return nil
}

// PagingTokenMultiError is an error wrapping multiple validation errors
// returned by PagingToken.ValidateAll() if the designated constraints aren't met.
type PagingTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingTokenMultiError) AllErrors() []error { return m }

// PagingTokenValidationError is the validation error returned by
// PagingToken.Validate if the designated constraints aren't met.
type PagingTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingTokenValidationError) ErrorName() string { return "PagingTokenValidationError" }

// Error satisfies the builtin error interface
func (e PagingTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingTokenValidationError{}

// Validate checks the field values on QueryOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryOptionsMultiError, or
// nil if none found.
func (m *QueryOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	if all {
		switch v := interface{}(m.GetPagingToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOptionsValidationError{
					field:  "PagingToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOptionsValidationError{
					field:  "PagingToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagingToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOptionsValidationError{
				field:  "PagingToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Order

	if len(errors) > 0 {
		return QueryOptionsMultiError(errors)
	}

	return nil
}

// QueryOptionsMultiError is an error wrapping multiple validation errors
// returned by QueryOptions.ValidateAll() if the designated constraints aren't met.
type QueryOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOptionsMultiError) AllErrors() []error { return m }

// QueryOptionsValidationError is the validation error returned by
// QueryOptions.Validate if the designated constraints aren't met.
type QueryOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOptionsValidationError) ErrorName() string { return "QueryOptionsValidationError" }

// Error satisfies the builtin error interface
func (e QueryOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOptionsValidationError{}

// Validate checks the field values on ImageInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageInfoMultiError, or nil
// if none found.
func (m *ImageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for BlurHash

	if len(errors) > 0 {
		return ImageInfoMultiError(errors)
	}

	return nil
}

// ImageInfoMultiError is an error wrapping multiple validation errors returned
// by ImageInfo.ValidateAll() if the designated constraints aren't met.
type ImageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageInfoMultiError) AllErrors() []error { return m }

// ImageInfoValidationError is the validation error returned by
// ImageInfo.Validate if the designated constraints aren't met.
type ImageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageInfoValidationError) ErrorName() string { return "ImageInfoValidationError" }

// Error satisfies the builtin error interface
func (e ImageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageInfoValidationError{}

// Validate checks the field values on VideoInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoInfoMultiError, or nil
// if none found.
func (m *VideoInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Duration

	if len(errors) > 0 {
		return VideoInfoMultiError(errors)
	}

	return nil
}

// VideoInfoMultiError is an error wrapping multiple validation errors returned
// by VideoInfo.ValidateAll() if the designated constraints aren't met.
type VideoInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoInfoMultiError) AllErrors() []error { return m }

// VideoInfoValidationError is the validation error returned by
// VideoInfo.Validate if the designated constraints aren't met.
type VideoInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoInfoValidationError) ErrorName() string { return "VideoInfoValidationError" }

// Error satisfies the builtin error interface
func (e VideoInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoInfoValidationError{}

// Validate checks the field values on AudioInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AudioInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AudioInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AudioInfoMultiError, or nil
// if none found.
func (m *AudioInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AudioInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Duration

	if len(errors) > 0 {
		return AudioInfoMultiError(errors)
	}

	return nil
}

// AudioInfoMultiError is an error wrapping multiple validation errors returned
// by AudioInfo.ValidateAll() if the designated constraints aren't met.
type AudioInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AudioInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AudioInfoMultiError) AllErrors() []error { return m }

// AudioInfoValidationError is the validation error returned by
// AudioInfo.Validate if the designated constraints aren't met.
type AudioInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioInfoValidationError) ErrorName() string { return "AudioInfoValidationError" }

// Error satisfies the builtin error interface
func (e AudioInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioInfoValidationError{}

// Validate checks the field values on Auth_KeyPair with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Auth_KeyPair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Auth_KeyPair with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Auth_KeyPairMultiError, or
// nil if none found.
func (m *Auth_KeyPair) ValidateAll() error {
	return m.validate(true)
}

func (m *Auth_KeyPair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPubKey() == nil {
		err := Auth_KeyPairValidationError{
			field:  "PubKey",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPubKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Auth_KeyPairValidationError{
					field:  "PubKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Auth_KeyPairValidationError{
					field:  "PubKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPubKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Auth_KeyPairValidationError{
				field:  "PubKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSignature() == nil {
		err := Auth_KeyPairValidationError{
			field:  "Signature",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSignature()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Auth_KeyPairValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Auth_KeyPairValidationError{
					field:  "Signature",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignature()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Auth_KeyPairValidationError{
				field:  "Signature",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Auth_KeyPairMultiError(errors)
	}

	return nil
}

// Auth_KeyPairMultiError is an error wrapping multiple validation errors
// returned by Auth_KeyPair.ValidateAll() if the designated constraints aren't met.
type Auth_KeyPairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Auth_KeyPairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Auth_KeyPairMultiError) AllErrors() []error { return m }

// Auth_KeyPairValidationError is the validation error returned by
// Auth_KeyPair.Validate if the designated constraints aren't met.
type Auth_KeyPairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Auth_KeyPairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Auth_KeyPairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Auth_KeyPairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Auth_KeyPairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Auth_KeyPairValidationError) ErrorName() string { return "Auth_KeyPairValidationError" }

// Error satisfies the builtin error interface
func (e Auth_KeyPairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuth_KeyPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Auth_KeyPairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Auth_KeyPairValidationError{}
