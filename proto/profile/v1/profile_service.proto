syntax = "proto3";

package flipchat.profile.v1;

option go_package = "github.com/code-payments/flipchat-protobuf-api/generated/go/profile/v1;profilepb";
option java_package = "com.codeinc.flipchat.gen.profile.v1";
option objc_class_prefix = "FCPBProfileV1";

import "common/v1/common.proto";
import "profile/v1/model.proto";
import "validate/validate.proto";

service Profile {
	rpc GetProfile(GetProfileRequest) returns (GetProfileResponse);

	rpc SetDisplayName(SetDisplayNameRequest) returns (SetDisplayNameResponse);

	// LinkXAccount links a X account to a user. Any existing links will
	// be removed.
	rpc LinkXAccount(LinkXAccountRequest) returns (LinkXAccountResponse);
}

message GetProfileRequest {
	common.v1.UserId user_id = 1 [(validate.rules).message.required = true];
}
message GetProfileResponse {
	Result result = 1;
	enum Result {
		OK        = 0;
		NOT_FOUND = 1;
	}

	// UserProfile, if found.
	//
	// Some fields may or may not be set, depending on the scope of request
	// in the future.
	UserProfile user_profile = 2;
}

message SetDisplayNameRequest {
	// DisplayName is the new name to set.
	string display_name = 1 [(validate.rules).string = {
		min_len: 1
		max_len: 64
	}];

	common.v1.Auth auth = 10 [(validate.rules).message.required = true];
}

message SetDisplayNameResponse {
	Result result = 1;
	enum Result {
		OK                   = 0;
		INVALID_DISPLAY_NAME = 1;
		DENIED               = 2;
	}
}

message LinkXAccountRequest {
	// Twitter access token from the OAuth 2.0 flow
	string access_token = 1 [(validate.rules).string = {
        min_len: 1
        max_len: 4096 // todo: arbitrary
    }];

	common.v1.Auth auth = 10 [(validate.rules).message.required = true];
}

message LinkXAccountResponse {
	Result result = 1;
	enum Result {
		OK                   = 0;
		INVALID_ACCESS_TOKEN = 1;
		EXISTING_LINK        = 2;
		DENIED               = 3;
	}

	XProfile x_profile = 2;
}
